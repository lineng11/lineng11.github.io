<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Python 迭代器和生成器]]></title>
      <url>http://nenglee.com/2018/07/19/Python/Python%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>由于生成器自动实现了迭代器协议，而迭代器协议也是一个较为抽象的概念，所以有必要好好了解一下</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>Python中 <strong>list，truple，str，dict</strong> 这些都可以被迭代，俗称可迭代对象(Iterable)，但他们并不是迭代器(Iterator)。为什么？</p>
<p>因为和迭代器相比有一个很大的不同，<code>ist/truple/map/dict</code> 这些数据的大小是确定的，是可知。但迭代器不是，迭代器不知道要执行多少次，所以可以理解为不知道有多少个元素，每调用一次next()，就会往下走一步，是惰性的。</p>
<h4 id="迭代对象-Iterable"><a href="#迭代对象-Iterable" class="headerlink" title="迭代对象(Iterable)"></a>迭代对象(Iterable)</h4><p>直接作用于<code>for循环</code>的变量</p>
<h4 id="迭代器-Iterator"><a href="#迭代器-Iterator" class="headerlink" title="迭代器(Iterator)"></a>迭代器(Iterator)</h4><p>不但可以作用于<code>for循环</code>，还可以提供<code>next()</code>方法</p>
<ul>
<li>list是典型的可迭代对象，但不是迭代器</li>
<li>迭代器一定是可迭代对象，反过过来就不一定</li>
<li>可迭代对象可以通过内置 iter() 函数转换成迭代器</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">iter</span><span class="params">(source, sentinel=None)</span>:</span> <span class="comment"># known special case of iter</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    iter(iterable) -&gt; iterator</div><div class="line">    iter(callable, sentinel) -&gt; iterator</div><div class="line"></div><div class="line">    Get an iterator from an object.  In the first form, the argument must</div><div class="line">    supply its own iterator, or be a sequence.</div><div class="line">    In the second form, the callable is called until it returns the sentinel.</div><div class="line">    """</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<h4 id="迭代器协议"><a href="#迭代器协议" class="headerlink" title="迭代器协议"></a>迭代器协议</h4><ul>
<li><p>迭代器协议(Iterator)：对象需要提供<code>next()</code>函数，它要么返回迭代出下一项，要么抛出<code>StopIteration</code>异常终止迭代</p>
</li>
<li><p>可迭代对象(Iterable)：实现了迭代器协议的对象</p>
</li>
<li><p>协议：是一种约定，可迭代对象实现迭代器协议，Python的内置工具(如for循环，sum，min，max函数等)使用迭代器协议访问对象。</p>
</li>
</ul>
<h4 id="判断-is…"><a href="#判断-is…" class="headerlink" title="判断 is…"></a>判断 is…</h4><ul>
<li>判断是否是可迭代对象</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</div><div class="line"></div><div class="line">print(isinstance([], Iterable))</div><div class="line"><span class="comment">#打印 True</span></div><div class="line">print(isinstance((), Iterable))</div><div class="line"><span class="comment">#打印 True</span></div><div class="line">print(isinstance(<span class="number">100</span>, Iterable))</div><div class="line"><span class="comment">#打印 False</span></div></pre></td></tr></table></figure>
<ul>
<li>判断是否是迭代器</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</div><div class="line"></div><div class="line">print(isinstance([], Iterator))</div><div class="line"><span class="comment">#打印 False</span></div><div class="line">print(isinstance((), Iterator))</div><div class="line"><span class="comment">#打印 False</span></div><div class="line">print(isinstance(<span class="number">100</span>, Iterator))</div><div class="line"><span class="comment">#打印 False</span></div><div class="line">print(isinstance((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)), Iterator))</div><div class="line"><span class="comment">#打印 True</span></div></pre></td></tr></table></figure>
<p>可迭代对象 转换成–&gt; 迭代器</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable, Iterator</div><div class="line"></div><div class="line"><span class="comment"># 随便定义一个list</span></div><div class="line">listArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"></div><div class="line">print(<span class="string">"是否是可迭代对象："</span>, isinstance(listArray, Iterable))</div><div class="line">print(<span class="string">"是否是迭代器："</span>, isinstance(listArray, Iterator))</div><div class="line"></div><div class="line"><span class="comment">## 既然是迭代对象，就可以转换成迭代器</span></div><div class="line">listArray_s = iter(listArray)</div><div class="line">print(<span class="string">"是否是迭代器："</span>, isinstance(listArray_s, Iterator))</div><div class="line"></div><div class="line">print(listArray_s)</div><div class="line"><span class="comment"># 结果如下：是一个列表list的迭代器</span></div><div class="line"><span class="comment"># &lt;list_iterator object at 0x0000007476E6CC50&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># 既然是迭代器不仅可以通过for取出，关键还可以用next()函数取出</span></div><div class="line"></div><div class="line">print(next(listArray_s))</div><div class="line">print(next(listArray_s))</div><div class="line">print(next(listArray_s))</div><div class="line"><span class="comment"># print(next(listArray_s)) # 没有迭代到下一个元素，直接抛出异常 StopIteration</span></div></pre></td></tr></table></figure>
<h3 id="迭代器类"><a href="#迭代器类" class="headerlink" title="迭代器类"></a>迭代器类</h3><p>Python中一个实现了<code>_iter_</code>方法和<code>_next_</code>方法的类对象，就是迭代器</p>
<p>如下案例是计算菲波那切数列的案例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 斐波那契类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, max)</span>:</span></div><div class="line">        self.a, self.b = <span class="number">0</span>, <span class="number">1</span></div><div class="line">        self.max = max</div><div class="line"></div><div class="line">    <span class="comment"># iter函数要返回自己Self</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></div><div class="line">        fib = self.a</div><div class="line">        <span class="keyword">if</span> fib &gt; self.max:</div><div class="line">            <span class="keyword">raise</span> StopIteration  <span class="comment"># raise显示地引发异常</span></div><div class="line">        self.a, self.b = self.b, self.a + self.b</div><div class="line">        <span class="keyword">return</span> fib</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 100以内的数 循环遍历每一个斐波那契</span></div><div class="line">    fib = Fib(<span class="number">100</span>)  </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> fib:</div><div class="line">        print(i)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 测试</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<blockquote>
<p>在Fib内部<strong>iter</strong> 和<strong>next</strong>方法，使得Fib类对象成为了 <strong>迭代器</strong></p>
</blockquote>
<p><em>iter</em>(self)只会被调用一次,而<em>next</em>(self)会被调用 n 次，直到出现StopIteration异常</p>
<h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>Python使用生成器对延迟操作提供了支持，所谓的延迟操作是指：在需要的时候才生产结果，而不是一味的立即产生结果集，说白了就是<code>一边循环一边计算下一个元素的机制</code>这是生成器的优点，避免数据的一次性读取而占用巨大内存空间。</p>
<p>在python中，有两种创建生成器的方式:</p>
<h4 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h4><p>常规的函数定义，但是使用yield语句而不是return语句返回结果，但每个结果中间，挂起函数的状态，以便下次从它离开的地方继续执行。</p>
<p>用生成器返回自然数的平方,函数的定义基本相同，唯一是返回值是 yield</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gensquares</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line">        <span class="keyword">yield</span> i ** <span class="number">2</span></div><div class="line"></div><div class="line"></div><div class="line">print(gensquares(<span class="number">3</span>))</div><div class="line">print(type(gensquares(<span class="number">3</span>)))  <span class="comment"># &lt;class 'generator'&gt;  generator就是生成器</span></div><div class="line"></div><div class="line"><span class="comment"># 方法一</span></div><div class="line"><span class="comment"># gensitms = gensquares(5)</span></div><div class="line"><span class="comment"># print(next(gensitms))</span></div><div class="line"><span class="comment"># print(next(gensitms))</span></div><div class="line"><span class="comment"># print(next(gensitms))</span></div><div class="line"><span class="comment"># print(next(gensitms))  # 超出n=3 StopIteration</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 方法二</span></div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> gensquares(<span class="number">3</span>):</div><div class="line">    print(<span class="string">'itme: '</span>, item)</div></pre></td></tr></table></figure>
<h4 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">L = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>)]  <span class="comment"># 放在中括号中是列表生成器</span></div><div class="line">g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>))  <span class="comment"># 放在小括号中就是生成器</span></div><div class="line"></div><div class="line">print(type(L))  <span class="comment"># &lt;class 'list'&gt;</span></div><div class="line">print(type(g))  <span class="comment"># &lt;class 'generator'&gt;</span></div></pre></td></tr></table></figure>
<p>生成器的典型用法是在<code>for</code>中使用，其中比较常用的典型生成器就是 <code>range</code></p>
<p>注意：</p>
<ul>
<li><p>Python2中：range()返回的是 list类型    xrange():返回的就是 生成器</p>
</li>
<li><p>Python3中: 已经没有<del>xrange()</del>  只有range()并且返回类型是 class ‘range’,是一个可迭代类 可嵌套()就成了</p>
</li>
</ul>
<h4 id="总结生成器"><a href="#总结生成器" class="headerlink" title="总结生成器"></a>总结生成器</h4><ul>
<li><p>语法上和函数类似：都是def开头，差异在于在于返回值，生成器用yield返回，而不是return</p>
</li>
<li><p>自动实现迭代器协议：对于生成器，pyhton会自动实现迭代器协议，由于生成器自动是实现了迭代器协议就可以调用next()，并且在没有数值返回时候，生成器自动产生StopIteration异常</p>
</li>
<li><p>状态挂起：生成器使用yield语句返回，yield语句挂起该生成器的函数状态，保留足够的信息，以便于从它离开的地方继续执行</p>
</li>
<li><p>生成器是只能遍历一次的</p>
</li>
<li><p>生成器是一类特殊的迭代器</p>
</li>
</ul>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python队列]]></title>
      <url>http://nenglee.com/2018/07/17/Python/Python%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>模拟这样一个场景：<strong>生产者 – 消费者</strong> ,在商品或服务的生产者生产商品，然后将其放到类型的队列数据结构中，生产商品的时间是不确定，同样消费者的消费生产者生产的商品的时间也是不确定。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<p>场景中最为关键的是：创建一个队列，让生产者(线程)在其中放入新的商品，而消费者(线程)消费这个商品。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random, threading, time</div><div class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 生产者类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, queue)</span>:</span></div><div class="line">        threading.Thread.__init__(self, name=name)</div><div class="line">        self.data = queue</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">            print(<span class="string">"%s is producing %d to the queue!"</span> % (self.getName(), i))</div><div class="line">            self.data.put(i)</div><div class="line">            time.sleep(random.randrange(<span class="number">10</span>) / <span class="number">5</span>)</div><div class="line">        print(<span class="string">"%s finished!"</span> % self.getName())</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 消费者类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, queue)</span>:</span></div><div class="line">        threading.Thread.__init__(self, name=name)</div><div class="line">        self.data = queue</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">            val = self.data.get()</div><div class="line">            print(<span class="string">"%s is consuming. %d in the queue is consumed!"</span> % (self.getName(), val))</div><div class="line">            time.sleep(random.randrange(<span class="number">10</span>))</div><div class="line">        print(<span class="string">"%s finished!"</span> % self.getName())</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    queue = Queue()</div><div class="line">    producer = Producer(<span class="string">'Producer'</span>, queue)</div><div class="line">    consumer = Consumer(<span class="string">'Consumer'</span>, queue)</div><div class="line"></div><div class="line">    producer.start()</div><div class="line">    consumer.start()</div><div class="line"></div><div class="line">    producer.join()</div><div class="line">    consumer.join()</div><div class="line">    print(<span class="string">'All threads finished!'</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Producer is producing 0 to the queue!</div><div class="line">Consumer is consuming. 0 in the queue is consumed!</div><div class="line">Producer is producing 1 to the queue!</div><div class="line">Producer is producing 2 to the queue!</div><div class="line">Consumer is consuming. 1 in the queue is consumed!</div><div class="line">Producer is producing 3 to the queue!</div><div class="line">Consumer is consuming. 2 in the queue is consumed!</div><div class="line">Producer is producing 4 to the queue!</div><div class="line">Producer finished!</div><div class="line">Consumer is consuming. 3 in the queue is consumed!</div><div class="line">Consumer is consuming. 4 in the queue is consumed!</div><div class="line">Consumer finished!</div><div class="line">All threads finished!</div></pre></td></tr></table></figure></p>
<h3 id="生产者消费者模式的优点"><a href="#生产者消费者模式的优点" class="headerlink" title="生产者消费者模式的优点"></a>生产者消费者模式的优点</h3><ul>
<li><p>解耦：假设生产者和消费者分别是两个线程。让两者都依赖于某个缓冲区，两者之间不直接依赖，耦合也就相应降低了。</p>
</li>
<li><p>并发：于生产者与消费者是两个独立的并发体，他们之间是用缓冲区通信的，生产者只需要往缓冲区里丢数据，就可以继续生产下一个数据，而消费者只需要从缓冲区拿数据即可，这样就不会因为彼此的处理速度而发生阻塞。</p>
</li>
<li><p>忙闲不均问题：当生产者制造数据快的时候，消费者来不及处理，未处理的数据可以暂时存在缓冲区中，慢慢处理掉。而不至于因为消费者的性能造成数据丢失或影响生产者生产。</p>
</li>
</ul>
<h3 id="队列的类型"><a href="#队列的类型" class="headerlink" title="队列的类型"></a>队列的类型</h3><h4 id="先进先出"><a href="#先进先出" class="headerlink" title="先进先出"></a>先进先出</h4><p><code>queue.Queue(maxsize=0)</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> queue</div><div class="line"></div><div class="line">q = queue.Queue()  <span class="comment"># 生成先入先出队列实例</span></div><div class="line">q.put(<span class="number">1</span>)  <span class="comment"># 先放进1，再放入2</span></div><div class="line">q.put(<span class="number">2</span>)</div><div class="line">print(q.get())  <span class="comment">#</span></div><div class="line"></div><div class="line"><span class="comment"># 输出</span></div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<h4 id="先进后出"><a href="#先进后出" class="headerlink" title="先进后出"></a>先进后出</h4><p><code>queue.LifoQueue(maxsize=0)</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> queue</div><div class="line">q = queue.LifoQueue()   <span class="comment"># 生成后入先出队列实例</span></div><div class="line">q.put(<span class="number">1</span>)  <span class="comment"># 先放进1，再放入2</span></div><div class="line">q.put(<span class="number">2</span>)</div><div class="line">print(q.get())</div><div class="line">print(q.get())  </div><div class="line"></div><div class="line"><span class="comment"># 输出</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<h4 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h4><p><code>queue.PriorityQueue(maxsize=0)</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> queue</div><div class="line">q = queue.PriorityQueue()</div><div class="line">q.put((<span class="number">1</span>, <span class="string">"d1"</span>))</div><div class="line">q.put((<span class="number">-1</span>, <span class="string">"d2"</span>))</div><div class="line">q.put((<span class="number">6</span>, <span class="string">"d3"</span>))</div><div class="line">print(q.get())</div><div class="line">print(q.get())</div><div class="line">print(q.get())</div><div class="line"></div><div class="line"><span class="comment">#执行结果</span></div><div class="line">(<span class="number">-1</span>, <span class="string">'d2'</span>)</div><div class="line">(<span class="number">1</span>, <span class="string">'d1'</span>)</div><div class="line">(<span class="number">6</span>, <span class="string">'d3'</span>)</div></pre></td></tr></table></figure>
<p><code>queue.put((priority_number,data)) priority_number：越小，优先级越高</code></p>
<h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><p><code>.qsize()</code>  :查看队列大小</p>
<p><code>.empty()</code>  :队列如果为空返回True，不为空返回False</p>
<p><code>.full()</code>  :队列如果满了，返回True，没有满返回False</p>
<p><code>.put(item,block=True,timeout=None)()</code>  :把数据插入队列中</p>
<p>如果blcok为false的话，那么在put时候超过设定的maxsize的值，就会报full异常。<br>如果timeout设置值得话，说明put值得个数超过maxsize值，那么会在timeout几秒之后抛出full异常。</p>
<p><code>.put_nowait()</code>  :这个其实等同于Queue.put(item,block=False)或者是Queue.put(item,False)</p>
<p><code>.get(block=True,timeout=None)</code>  :移除并返回队列中的序列。参数block=true并且timeout=None。如果block=false的话，那么队列为空的情况下，就直接Empty异常。如果timeout有实际的值，这个时候队列为空，执行get的时候，则时隔多长时间则报出Empty的异常。</p>
<p><code>.get_nowait(item)</code> :其实这个等同于Queue.get(block=False)或者Queue.get(False)</p>
<p><code>.task_done</code>  :get()用于获取任务，task_done()则是用来告诉队列之前获取的任务已经处理完成</p>
<p><code>.join()</code>  :block(阻塞)直到queue（队列）被消费完毕</p>
<h3 id="exception异常"><a href="#exception异常" class="headerlink" title="exception异常"></a>exception异常</h3><p>在block参数默认为True， 在设置为False</p>
<ul>
<li><p>Empty：当队列中的数据为空时，取数据，就会抛出这个异常。</p>
</li>
<li><p>Full：当队列中满了以后，再放数据的话，就会抛出此异常。</p>
</li>
</ul>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python多线程]]></title>
      <url>http://nenglee.com/2018/07/17/Python/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>多线程适合I/O密集型任务，如网络资源下载或者读写文件；多进程适合CPU密集型任务，比如需要大量计算的任务</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h3 id="什么是多线程"><a href="#什么是多线程" class="headerlink" title="什么是多线程"></a>什么是多线程</h3><p>多线程编程的本质是 <strong>异步</strong> ,需要多个并发活动，而且每个任务处理的顺序可能是不确定，或者说有随机性、不可预测。</p>
<p><strong>进程：</strong></p>
<ul>
<li>一个可执行的程序，被计算机程序加载到内存中被操作系统调用，才拥有其生命周期</li>
<li>进程都有属于自己的地址空间，内存，数据栈</li>
<li>进程和进程数据通信采用IPC(Inter-Process Communication)</li>
</ul>
<p><strong>线程：</strong></p>
<ul>
<li>进程的独立运行片段，一个进程可以由多个线程组成，至少有一个主线程</li>
<li>线程可以理解为轻量化的进程</li>
<li>一个进程的多个线程间共享数据和上下文运行环境</li>
<li>多个线程同时工作容易产生互斥问题</li>
</ul>
<p>Python 标准库提供了 thread 和 threading 两个模块来对多线程进行支持。<br>其中， thread 模块以低级、原始的方式来处理和控制线程，而 threading 模块通过对 thread 进行二次封装，提供了更方便的 api 来处理线程。</p>
<p>避免使用thread的另一个原因是该模块不支持 <strong>守护线程</strong> ,当主线程退出时候，所有的子线程都将终止，不管它们是否仍在工作，显然这个弊端是不希望发生的，就需要引入守护线程。</p>
<h3 id="thread"><a href="#thread" class="headerlink" title="thread"></a>thread</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="comment"># 导入多线程包并更名为thread  * python2为: thread  python3为：_thread</span></div><div class="line"><span class="keyword">import</span> _thread <span class="keyword">as</span> thread</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop1</span><span class="params">(in1)</span>:</span></div><div class="line">    <span class="comment"># ctime 得到当前时间</span></div><div class="line">    print(<span class="string">'Start loop 1 at :'</span>, time.ctime())</div><div class="line">    <span class="comment"># 把参数打印出来</span></div><div class="line">    print(<span class="string">"我是参数 "</span>, in1)</div><div class="line">    <span class="comment"># 睡眠多长时间，单位是秒</span></div><div class="line">    time.sleep(<span class="number">4</span>)</div><div class="line">    print(<span class="string">'End loop 1 at:'</span>, time.ctime())</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop2</span><span class="params">(in1, in2)</span>:</span></div><div class="line">    <span class="comment"># ctime 得到当前时间</span></div><div class="line">    print(<span class="string">'Start loop 2 at :'</span>, time.ctime())</div><div class="line">    <span class="comment"># 把参数in 和 in2打印出来，代表使用</span></div><div class="line">    print(<span class="string">"我是参数 "</span>, in1, <span class="string">"和参数  "</span>, in2)</div><div class="line">    <span class="comment"># 睡眠多长时间，单位是秒</span></div><div class="line">    time.sleep(<span class="number">2</span>)</div><div class="line">    print(<span class="string">'End loop 2 at:'</span>, time.ctime())</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"Main Start ---------"</span>, time.ctime())</div><div class="line">    <span class="comment"># 启动多线程的意思是用多线程去执行某个函数</span></div><div class="line">    <span class="comment"># 启动多线程函数为start_new_thead</span></div><div class="line">    <span class="comment"># 参数两个，一个是需要运行的函数名，第二是函数的参数作为元祖使用，为空则使用空元祖</span></div><div class="line">    <span class="comment"># 注意：如果函数只有一个参数，需要参数后由一个逗号</span></div><div class="line">    thread.start_new_thread(loop1, (<span class="string">"李美丽"</span>,))</div><div class="line">    thread.start_new_thread(loop2, (<span class="string">"王大鹏"</span>, <span class="string">"王小鹏"</span>))</div><div class="line"></div><div class="line">    print(<span class="string">"Main end ---------"</span>, time.ctime())</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    main()</div><div class="line">    <span class="comment"># 如果主线程执行完毕，则子线程可能也需要终止</span></div><div class="line">    <span class="comment"># time.sleep(10)</span></div></pre></td></tr></table></figure>
<h3 id="threading"><a href="#threading" class="headerlink" title="threading"></a>threading</h3><p>threading模块除了Tread类以外，该模块还包块了非常好用的同步机制。</p>
<p>初始化：</p>
<p><code>def __init__(self, group=None, target=None, name=None,args=(), kwargs=None, *, daemon=None):</code></p>
<ul>
<li>group是预留的，用于将来扩展；</li>
<li>target是一个可调用对象（也称为活动[activity]），在线程启动后执行；</li>
<li>name是线程的名字。默认值为“Thread-N“，N是一个数字。</li>
<li>args和kwargs分别表示调用target时的参数列表和关键字参数。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="comment"># 导入多线程包并更名为thread  * python2为: thread  python3为：_thread</span></div><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop1</span><span class="params">(in1)</span>:</span></div><div class="line">    <span class="comment"># ctime 得到当前时间</span></div><div class="line">    print(<span class="string">'Start loop 1 at :'</span>, time.ctime())</div><div class="line">    <span class="comment"># 把参数打印出来</span></div><div class="line">    print(<span class="string">"我是参数 "</span>, in1)</div><div class="line">    <span class="comment"># 睡眠多长时间，单位是秒</span></div><div class="line">    time.sleep(<span class="number">4</span>)</div><div class="line">    print(<span class="string">'End loop 1 at:'</span>, time.ctime())</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop2</span><span class="params">(in1, in2)</span>:</span></div><div class="line">    <span class="comment"># ctime 得到当前时间</span></div><div class="line">    print(<span class="string">'Start loop 2 at :'</span>, time.ctime())</div><div class="line">    <span class="comment"># 把参数in 和 in2打印出来，代表使用</span></div><div class="line">    print(<span class="string">"我是参数 "</span>, in1, <span class="string">"和参数  "</span>, in2)</div><div class="line">    <span class="comment"># 睡眠多长时间，单位是秒</span></div><div class="line">    time.sleep(<span class="number">2</span>)</div><div class="line">    print(<span class="string">'End loop 2 at:'</span>, time.ctime())</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"Main Start ---------"</span>, time.ctime())</div><div class="line"></div><div class="line">    <span class="comment"># 生成threading.Thread实例</span></div><div class="line">    t1 = threading.Thread(target=loop1, args=(<span class="string">"李美丽"</span>,))</div><div class="line">    t2 = threading.Thread(target=loop2, args=(<span class="string">"王大鹏"</span>, <span class="string">"王小鹏"</span>))</div><div class="line"></div><div class="line">    <span class="comment"># t1.setDaemon(True)</span></div><div class="line">    <span class="comment"># t2.setDaemon(True)</span></div><div class="line"></div><div class="line">    t1.start()</div><div class="line">    <span class="comment"># t1.join()</span></div><div class="line">    <span class="comment"># t1.join(2)</span></div><div class="line"></div><div class="line">    t2.start()</div><div class="line">    <span class="comment"># t2.join()</span></div><div class="line"></div><div class="line">    print(<span class="string">"Main end ---------"</span>, time.ctime())</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Main Start --------- Tue Jul 17 16:58:53 2018</div><div class="line">Start loop 1 at : Tue Jul 17 16:58:53 2018</div><div class="line">我是参数  李美丽</div><div class="line">Start loop 2 at : Tue Jul 17 16:58:53 2018</div><div class="line">我是参数  王大鹏 和参数   王小鹏</div><div class="line">Main end --------- Tue Jul 17 16:58:53 2018</div><div class="line">End loop 2 at: Tue Jul 17 16:58:55 2018</div><div class="line">End loop 1 at: Tue Jul 17 16:58:57 2018</div></pre></td></tr></table></figure></p>
<p>可以发现虽然 主线程mian继续往下执行，没有等待实现了异步，然而已经启动的线程t1和t2依然执行</p>
<ul>
<li><p>join(self, timeout=None)  </p>
<ul>
<li><p>.join()将会使主调线程堵塞，直到被调用线程运行结束或超时；例如主线程mian创建启动t1线程，这个时候主线程要等待t1执行完毕，主线程main方可继续向下执行</p>
</li>
<li><p>timeout=None(秒) 参数表示超时时间，主线程在此堵塞时间，过时不候，需要注意的是t1线程依然会在后台执行</p>
</li>
<li><p>设置start()启动后</p>
</li>
</ul>
</li>
<li><p>setDaemon(daemonic)   设置守护线程，表示并不重要</p>
<ul>
<li><p>t1.setDaemon(True)相当于把t1设置线程守护，要是主线程main执行完毕，就不管t1线程是否完毕已经不重要，一并退出，恰恰与join相反</p>
</li>
<li><p>设置start()启动前才有效</p>
</li>
</ul>
</li>
</ul>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul>
<li><p><code>.currentThread：</code> 返回当前线程变量</p>
</li>
<li><p><code>.enumerate:</code>  返回一个包含正在运行的线程的list，正在运行的线程指的是线程启动后，结束前的状态</p>
</li>
<li><p><code>.activeCount:</code> 返回正在运行的线程数量，效果跟 <code>len(threading.enumerate)</code> 相同</p>
</li>
<li><p><code>.setName:</code> 给线程设置名字</p>
</li>
<li><p><code>.getName:</code> 得到线程的名字</p>
</li>
<li><p><code>.isAlivel/is_alive</code> 返回这个线程是否还存活</p>
</li>
<li><p><code>.isDecmon</code> 是否为守护线程</p>
</li>
</ul>
<h3 id="线程锁-Lock-amp-RLock"><a href="#线程锁-Lock-amp-RLock" class="headerlink" title="线程锁 Lock &amp; RLock"></a>线程锁 Lock &amp; RLock</h3><p>在threading模块中，定义两种类型的琐：<code>threading.Lock</code> 和 <code>threading.RLock</code></p>
<p>它们之间有一点细微的区别，通过比较下面两段代码来说明：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line">lock = threading.Lock()	<span class="comment">#Lock对象</span></div><div class="line">lock.acquire()</div><div class="line">lock.acquire()  <span class="comment">#产生了死琐。</span></div><div class="line">lock.release()</div><div class="line">lock.release()</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line">rLock = threading.RLock()  <span class="comment">#RLock对象</span></div><div class="line">rLock.acquire()</div><div class="line">rLock.acquire()	<span class="comment">#在同一线程内，程序不会堵塞。</span></div><div class="line">rLock.release()</div><div class="line">rLock.release()</div></pre></td></tr></table></figure>
<p>这两种琐的主要区别是：</p>
<blockquote>
<p>RLock允许在同一线程中被多次acquire。而Lock却不允许这种情况。</p>
</blockquote>
<p><code>注意：如果使用RLock，那么acquire和release必须成对出现，即调用了n次acquire，必须调用n次的release才能真正释放所占用的琐。</code></p>
<p>Lock 对象和 with 语句块一起使用可以保证互斥执行，就是每次只有一个线程可以执行 with 语句包含的代码块。with 语句会在这个代码块执行前自动获取锁，在执行结束后自动释放锁。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> lock:</div><div class="line">	<span class="comment"># do something</span></div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">lock = threading.Lock()</div><div class="line">thread_list = []</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadClass</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, threadName)</span>:</span></div><div class="line">        threading.Thread.__init__(self)</div><div class="line">        self.threadName = threadName</div><div class="line"></div><div class="line">    <span class="comment"># run函数必须实现</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># with 支持自动枷锁，解锁</span></div><div class="line">        <span class="keyword">with</span> lock:</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</div><div class="line">                print(<span class="string">'&#123;&#125;'</span>.format(self.threadName), <span class="string">':'</span>, str(i))</div><div class="line">                time.sleep(<span class="number">2</span>)</div><div class="line"></div><div class="line">        <span class="comment"># lock.acquire()  # 加锁</span></div><div class="line">        <span class="comment"># for i in range(0, 10):</span></div><div class="line">        <span class="comment">#     print('&#123;&#125;'.format(self.threadName), ':', str(i))</span></div><div class="line">        <span class="comment">#     time.sleep(2)</span></div><div class="line">        <span class="comment"># lock.release()  # 解锁</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">    thread = ThreadClass(<span class="string">'thread &#123;&#125;'</span>.format(i))</div><div class="line">    thread_list.append(thread)</div><div class="line">    thread.start()</div><div class="line"></div><div class="line"><span class="keyword">for</span> thread <span class="keyword">in</span> thread_list:</div><div class="line">    <span class="keyword">if</span> thread:</div><div class="line">        thread.join()</div></pre></td></tr></table></figure>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PyQuery库]]></title>
      <url>http://nenglee.com/2018/06/18/Python/PyQuery/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>如果正则写起来太麻烦</p>
<p>如果 BeautifulSoup 语法不好记</p>
<p>刚好你熟悉JQuery的语法，那么PyQuery就是你绝佳的选择。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">



<p>PyQuery 是 Python 仿照 jQuery 的严格实现，强大又灵活的网页解析库，语法与 jQuery 几乎完全相同，</p>
<p>所以不用再去费心去记一些奇怪的方法了，熟悉Web开发将会事半功倍。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install pyquery</div></pre></td></tr></table></figure>
<h1 id="初始化方法"><a href="#初始化方法" class="headerlink" title="初始化方法"></a>初始化方法</h1><ol>
<li>解析Html字符串</li>
<li>通过URL获取网页</li>
<li>加载本地文件</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">html = <span class="string">'''</span></div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">          &lt;li class="item-0"&gt;frst item&lt;/li&gt;</div><div class="line">          &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;Second item-0&lt;/a&gt;&lt;/li&gt;</div><div class="line">          &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="bold"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">          &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</div><div class="line">          &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth tiem&lt;/li&gt;</div><div class="line">          &lt;li class="item-3"&gt;frst item 333333333333&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;'''</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span>  pq</div><div class="line"></div><div class="line"><span class="comment">#html字符串 初始化</span></div><div class="line">docStr = pq(html)</div><div class="line"></div><div class="line"><span class="comment">#url 初始化</span></div><div class="line">docURL = pq(url = <span class="string">"http://www.taobao.com"</span>)</div><div class="line"></div><div class="line"><span class="comment">#filename文件 初始化   目前存放同级根目录中</span></div><div class="line">docFile = pq(filename = <span class="string">"./dome.html"</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#取出所有的&lt;li&gt; 标签</span></div><div class="line">print(docStr(<span class="string">"li"</span>))</div><div class="line"></div><div class="line"><span class="comment">#取出html网页 &lt;title&gt;标签</span></div><div class="line">print(docURL(<span class="string">"title"</span>))</div><div class="line"></div><div class="line"><span class="comment">#取出本地文件 &lt;ul&gt;标签</span></div><div class="line">print(docFile(<span class="string">"a"</span>))</div></pre></td></tr></table></figure>
<pre><code>&lt;li class=&quot;item-0&quot;&gt;frst item&lt;/li&gt;
          &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;Second item-0&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth tiem&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-3&quot;&gt;frst item 333333333333&lt;/li&gt;

&lt;title&gt;淘宝网 - 淘！我喜欢&lt;/title&gt;

&lt;a href=&quot;link2.html&quot;&gt;Second item-0&lt;/a&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth tiem&lt;/a&gt;
</code></pre><h1 id="CSS基本选择器"><a href="#CSS基本选择器" class="headerlink" title="CSS基本选择器"></a>CSS基本选择器</h1><ul>
<li><strong> # </strong>  是查找id的标签</li>
<li><strong> .</strong>  是查找class的标签</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">html = <span class="string">'''</span></div><div class="line">    &lt;div id="container"&gt;</div><div class="line">        &lt;ul class="list"&gt;</div><div class="line">          &lt;li class="item-0"&gt;frst item&lt;/li&gt;</div><div class="line">          &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;Second item-0&lt;/a&gt;&lt;/li&gt;</div><div class="line">          &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="bold"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">          &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</div><div class="line">          &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth tiem&lt;/li&gt;</div><div class="line">          &lt;li class="item-3"&gt;frst item 333333333333&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;'''</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</div><div class="line"></div><div class="line">doc = pq(html)</div><div class="line"></div><div class="line"><span class="comment"># 输出 class="item-0"所有的标签内容</span></div><div class="line">lis = doc(<span class="string">"#container .list .item-0"</span>);</div><div class="line">print(lis)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lis.items():</div><div class="line">        print(i)</div><div class="line">        print(i.text())   <span class="comment">#取出标签内部的内容</span></div></pre></td></tr></table></figure>
<pre><code>&lt;li class=&quot;item-0&quot;&gt;frst item&lt;/li&gt;
          &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth tiem&lt;/a&gt;&lt;/li&gt;

&lt;li class=&quot;item-0&quot;&gt;frst item&lt;/li&gt;

frst item
&lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;

third item
&lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth tiem&lt;/a&gt;&lt;/li&gt;

fifth tiem
</code></pre><h2 id="查找子元素"><a href="#查找子元素" class="headerlink" title="查找子元素"></a>查找子元素</h2><ul>
<li><p>find()  通过标签名字获取</p>
</li>
<li><p>children()  当前标签的子标签，其中返回值是 pyQuery 方便再次查找</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">doc_list = doc(<span class="string">".list"</span>)</div><div class="line">print(doc_list)</div><div class="line">print(type(doc_list))</div><div class="line"></div><div class="line">fin_a = doc_list.find(<span class="string">"a"</span>)</div><div class="line">print(fin_a)</div><div class="line"></div><div class="line">print(<span class="string">"*"</span>*<span class="number">100</span>)</div><div class="line"></div><div class="line">chdrStr = doc_list.children()  <span class="comment">#当前doc_list 内部是所有子标签</span></div><div class="line">print(chdrStr)</div><div class="line"></div><div class="line">print(type(chdrStr))  <span class="comment">#类型依然是PyQuery，然而又可以直接用</span></div><div class="line"></div><div class="line">print(doc_list.children(<span class="string">".item-0 a"</span>))</div></pre></td></tr></table></figure>
<pre><code>&lt;ul class=&quot;list&quot;&gt;
          &lt;li class=&quot;item-0&quot;&gt;frst item&lt;/li&gt;
          &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;Second item-0&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth tiem&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-3&quot;&gt;frst item 333333333333&lt;/li&gt;
        &lt;/ul&gt;

&lt;class &apos;pyquery.pyquery.PyQuery&apos;&gt;
&lt;a href=&quot;link2.html&quot;&gt;Second item-0&lt;/a&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth tiem&lt;/a&gt;
****************************************************************************************************
&lt;li class=&quot;item-0&quot;&gt;frst item&lt;/li&gt;
          &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;Second item-0&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth tiem&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-3&quot;&gt;frst item 333333333333&lt;/li&gt;

&lt;class &apos;pyquery.pyquery.PyQuery&apos;&gt;
&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth tiem&lt;/a&gt;
</code></pre><h2 id="查找父元素"><a href="#查找父元素" class="headerlink" title="查找父元素"></a>查找父元素</h2><ul>
<li>parent() 查找当前位置的父节点</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">print(doc)</div><div class="line">print(doc.find(<span class="string">".item-1"</span>))</div><div class="line">print(doc(<span class="string">".item-1"</span>).parent())</div></pre></td></tr></table></figure>
<pre><code>&lt;div id=&quot;container&quot;&gt;
        &lt;ul class=&quot;list&quot;&gt;
          &lt;li class=&quot;item-0&quot;&gt;frst item&lt;/li&gt;
          &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;Second item-0&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth tiem&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-3&quot;&gt;frst item 333333333333&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;Second item-0&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;

&lt;ul class=&quot;list&quot;&gt;
          &lt;li class=&quot;item-0&quot;&gt;frst item&lt;/li&gt;
          &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;Second item-0&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth tiem&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-3&quot;&gt;frst item 333333333333&lt;/li&gt;
        &lt;/ul&gt;
</code></pre><h2 id="查找兄弟元素"><a href="#查找兄弟元素" class="headerlink" title="查找兄弟元素"></a>查找兄弟元素</h2><ul>
<li>siblings()  获取当前平级的所有标签</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">print(doc)</div><div class="line">print(<span class="string">""</span>)</div><div class="line">print(type(doc))</div><div class="line">print(<span class="string">""</span>)</div><div class="line">label =doc(<span class="string">".item-1"</span>)</div><div class="line">print(label)</div><div class="line">print(<span class="string">"label 的len：&#123;0&#125;"</span>.format(len(label)))</div><div class="line">print(<span class="string">""</span>)</div><div class="line"></div><div class="line">print(label.siblings()) <span class="comment">#当前label有多少个就对应有多少兄弟元素</span></div></pre></td></tr></table></figure>
<pre><code>&lt;div id=&quot;container&quot;&gt;
        &lt;ul class=&quot;list&quot;&gt;
          &lt;li class=&quot;item-0&quot;&gt;frst item&lt;/li&gt;
          &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;Second item-0&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth tiem&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-3&quot;&gt;frst item 333333333333&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;

&lt;class &apos;pyquery.pyquery.PyQuery&apos;&gt;

&lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;Second item-0&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;

label 的len：2

&lt;li class=&quot;item-0&quot;&gt;frst item&lt;/li&gt;
          &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;Second item-0&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-0&quot;&gt;frst item&lt;/li&gt;
          &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth tiem&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-3&quot;&gt;frst item 333333333333&lt;/li&gt;
        &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth tiem&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-3&quot;&gt;frst item 333333333333&lt;/li&gt;
</code></pre><h1 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h1><ul>
<li>attr(“key_name”)  或者  attr.key_name  </li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">print(doc)</div><div class="line">label_a =doc(<span class="string">'.item-0.active a'</span>)</div><div class="line">print(label_a)</div><div class="line"><span class="comment">#方法一</span></div><div class="line">print(label_a.attr(<span class="string">"href"</span>))</div><div class="line"><span class="comment">#方法二</span></div><div class="line">print(label_a.attr.href)</div></pre></td></tr></table></figure>
<pre><code>&lt;div id=&quot;container&quot;&gt;
        &lt;ul class=&quot;list&quot;&gt;
          &lt;li class=&quot;item-0&quot;&gt;frst item&lt;/li&gt;
          &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;Second item-0&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth tiem&lt;/a&gt;&lt;/li&gt;
          &lt;li class=&quot;item-3&quot;&gt;frst item 333333333333&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;
link3.html
link3.html
</code></pre><h1 id="获取文本"><a href="#获取文本" class="headerlink" title="获取文本"></a>获取文本</h1><ul>
<li>text()</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">label_a =doc(<span class="string">'.item-0.active a'</span>)</div><div class="line">print(label_a)</div><div class="line">print(label_a.text()) <span class="comment">#获取text文本内容</span></div></pre></td></tr></table></figure>
<pre><code>&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;
third item
</code></pre><h1 id="获取HTML文本"><a href="#获取HTML文本" class="headerlink" title="获取HTML文本"></a>获取HTML文本</h1><ul>
<li>html()</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">label_a =doc(<span class="string">'.item-0.active a'</span>)</div><div class="line">print(label_a)</div><div class="line">print(label_a.html()) <span class="comment">#获取标签内部所有的html</span></div></pre></td></tr></table></figure>
<pre><code>&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;
&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;
</code></pre><h1 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h1><ul>
<li><p>addClass 添加在Class Name字段</p>
</li>
<li><p>removeClass 移出Class Name字段</p>
</li>
<li><p>attr attr属性</p>
</li>
<li><p>css css属性</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">html = <span class="string">'''</span></div><div class="line">    &lt;div id="container"&gt;</div><div class="line">        &lt;ul class="list"&gt;</div><div class="line">          &lt;li class="item-0"&gt;frst item&lt;/li&gt;</div><div class="line">          &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;Second item-0&lt;/a&gt;&lt;/li&gt;</div><div class="line">          &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="bold"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">          &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</div><div class="line">          &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth tiem&lt;/li&gt;</div><div class="line">          &lt;li class="item-3"&gt;frst item 333333333333&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;'''</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</div><div class="line"></div><div class="line">doc = pq(html)</div><div class="line">label_li =doc(<span class="string">'.item-0.active'</span>)</div><div class="line">print(label_li)</div><div class="line"></div><div class="line"><span class="comment"># removeCLas</span></div><div class="line">print(label_li.removeClass(<span class="string">"active"</span>))</div><div class="line"></div><div class="line"><span class="comment"># AddClass</span></div><div class="line">print(label_li.addClass(<span class="string">"active"</span>))</div><div class="line"></div><div class="line"><span class="comment"># atte</span></div><div class="line">print(label_li.attr(<span class="string">"name"</span>,<span class="string">"like"</span>))</div><div class="line"></div><div class="line"><span class="comment"># css</span></div><div class="line">print(label_li.css(<span class="string">"font-size"</span>,<span class="string">"14px"</span>))</div></pre></td></tr></table></figure>
<pre><code>&lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;

&lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;

&lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;

&lt;li class=&quot;item-0 active&quot; name=&quot;like&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;

&lt;li class=&quot;item-0 active&quot; name=&quot;like&quot; style=&quot;font-size: 14px&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
</code></pre><h1 id="其他API"><a href="#其他API" class="headerlink" title="其他API"></a>其他API</h1><ul>
<li><p>remove()  删除当前表情</p>
</li>
<li><p>eq(num)  在列表集合标签，返回确定num位置的标签</p>
</li>
</ul>
<p>pyQuery 官方API：<a href="https://pythonhosted.org/pyquery/api.html" target="_blank" rel="external">https://pythonhosted.org/pyquery/api.html</a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Jupyter NoteBook]]></title>
      <url>http://nenglee.com/2018/06/17/Jupyter%20NoteBook/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>Jupyter Notebook（此前被称为 IPython notebook）是一个交互式笔记本，支持运行 40 多种编程语言。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<p>Jupyter Notebook 的本质是一个 Web 应用程序，便于创建和共享文学化程序文档，</p>
<p>支持实时代码，数学方程，可视化和 markdown。</p>
<p>途包括：数据清理和转换，数值模拟，统计建模，机器学习等等</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install jupyter</div></pre></td></tr></table></figure>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jupyter notebook</div></pre></td></tr></table></figure>
<h3 id="Jupyter-notebook-常用的快捷键"><a href="#Jupyter-notebook-常用的快捷键" class="headerlink" title="Jupyter notebook 常用的快捷键"></a>Jupyter notebook 常用的快捷键</h3><p>在使用 jupyter notebook 快捷键之前先了解一下以下俩种模式</p>
<h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><p>当前cell侧边为 <font color="#42A5F5">| 蓝色</font> ，此时为 <strong> 命令模式 </strong> ，按Enter可切换成 编辑模式</p>
<h5 id="命令模式快捷键"><a href="#命令模式快捷键" class="headerlink" title="命令模式快捷键"></a>命令模式快捷键</h5><ul>
<li><p>H：显示快捷键帮助</p>
</li>
<li><p>F：查找和替换</p>
</li>
<li><p>Ctrl-Enter：运行当前cell</p>
</li>
<li><p>Y：把当前cell内容转换为code形式</p>
</li>
<li><p>M：把当前cell内容转换为markdown形式</p>
</li>
<li><p>1~6：把当前cell内容设置为标题1~6格式</p>
</li>
<li><p>A：在上方新建cell</p>
</li>
<li><p>B：在下方新建cell</p>
</li>
<li><p>X/C/Shift-V/V：剪切/复制/上方粘贴/下方粘贴</p>
</li>
<li><p>双击D：删除当前cell</p>
</li>
<li><p>Z：撤销删除</p>
</li>
<li><p>S：保存notebook</p>
</li>
<li><p>L：为当前cell的代码添加行编号</p>
</li>
<li><p>Shift-L：为所有cell的代码添加行编号</p>
</li>
</ul>
<h4 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h4><p>当前cell侧边为 <font color="#66BB6A">| 绿色</font> ，此时为 <strong> 编辑模式 </strong> ，按Esc可切换成 命令模式</p>
<h5 id="编辑模式快捷键"><a href="#编辑模式快捷键" class="headerlink" title="编辑模式快捷键"></a>编辑模式快捷键</h5><ul>
<li><p>Tab：代码补全</p>
</li>
<li><p>Ctrl-A：全选</p>
</li>
<li><p>Ctrl-Z：撤销</p>
</li>
<li><p>Ctrl-Home：将光标移至cell最前端</p>
</li>
<li><p>Ctrl-End：将光标移至cell末端</p>
</li>
</ul>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python管理集合Anaconda]]></title>
      <url>http://nenglee.com/2018/06/16/Python/Python%E7%AE%A1%E7%90%86%E9%9B%86%E5%90%88Anaconda/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>Anaconda是专注于数据分析的Python发行版本，包含了 <strong>conda、Python等190多个科学包及其依赖项</strong> 。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<p>Anaconda简单来说就是一款Pyhton的包管理工具，减少初学者在使用过程中因缺失依赖包导致 <strong>Error</strong> 问题；</p>
<p>以及Pyhton的不同环境管理工具；其用法和 <strong>pip</strong> 一模一样，只不过用到的是 <strong>conda</strong> 当然你选择 <strong>pip</strong> 来安装</p>
<p>包也是没问题的。</p>
<h4 id="conda管理"><a href="#conda管理" class="headerlink" title="conda管理"></a>conda管理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># conda 的基本信息</span></div><div class="line">conda info</div><div class="line"></div><div class="line"><span class="comment"># 确认conda 版本信息</span></div><div class="line">conda --version</div></pre></td></tr></table></figure>
<h4 id="conda-安装"><a href="#conda-安装" class="headerlink" title="conda 安装"></a>conda 安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装一个package</span></div><div class="line">conda install requests</div><div class="line"></div><div class="line"><span class="comment"># 同时安装多个package</span></div><div class="line">conda install requests numpy scipy</div><div class="line"></div><div class="line"><span class="comment"># 也可以指定版本安装</span></div><div class="line">conda install requests=2.18.1</div></pre></td></tr></table></figure>
<h4 id="conda-删除"><a href="#conda-删除" class="headerlink" title="conda 删除"></a>conda 删除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda remove requests</div></pre></td></tr></table></figure>
<h4 id="conda-更新"><a href="#conda-更新" class="headerlink" title="conda 更新"></a>conda 更新</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda update requests</div></pre></td></tr></table></figure>
<h4 id="code-查询当前存在的包"><a href="#code-查询当前存在的包" class="headerlink" title="code 查询当前存在的包"></a>code 查询当前存在的包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda list</div></pre></td></tr></table></figure>
<h3 id="环境管理"><a href="#环境管理" class="headerlink" title="环境管理"></a>环境管理</h3><p>在conda中可以建立多个虚拟环境，用于隔离不同项目所需的不同版本的工具包，以防止版本上的冲突。对纠结于 Python 版本的同学们，我们也可以建立 Python2 和 Python3 两个环境，来分别运行不同版本的 Python 代码。</p>
<p>默认环境是Base，当然你也可以创建一个新的环境</p>
<h4 id="创建新环境"><a href="#创建新环境" class="headerlink" title="创建新环境"></a>创建新环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">conda create -n env_name list of packages</div><div class="line"></div><div class="line"><span class="comment">#env_name是：需要创建的环境名称</span></div><div class="line"><span class="comment">#list of packages是：列出新环境中需要的安装工具包</span></div><div class="line"></div><div class="line"><span class="comment">#例如</span></div><div class="line">conda create -n py2 python=2.7 pandas</div><div class="line"><span class="comment">#env 目录下面有一个名为 py2的pyhton环境</span></div></pre></td></tr></table></figure>
<h4 id="显示所有环境"><a href="#显示所有环境" class="headerlink" title="显示所有环境"></a>显示所有环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda env list</div></pre></td></tr></table></figure>
<h4 id="进入环境"><a href="#进入环境" class="headerlink" title="进入环境"></a>进入环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">activate  env_name</div></pre></td></tr></table></figure>
<h4 id="退出环境"><a href="#退出环境" class="headerlink" title="退出环境"></a>退出环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">deactivate</div></pre></td></tr></table></figure>
<h4 id="删除env-name环境"><a href="#删除env-name环境" class="headerlink" title="删除env_name环境"></a>删除env_name环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda env remove -n env_name</div></pre></td></tr></table></figure>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python基础(5)-条件、循环和其他语句]]></title>
      <url>http://nenglee.com/2018/06/15/Python/Python%E5%9F%BA%E7%A1%80(5)-%E6%9D%A1%E4%BB%B6%E3%80%81%E5%BE%AA%E7%8E%AF%E5%92%8C%E5%85%B6%E4%BB%96%E8%AF%AD%E5%8F%A5/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>条件、循环等其他语句，在编程中起到至关重要，在不同的条件下执行不同的逻辑，就好像代码具有人性思考力，自己的选择权。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h3 id="print语句"><a href="#print语句" class="headerlink" title="print语句"></a>print语句</h3><p>print语句为python中的输出语句</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>x , y , z = <span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> x , y , z</div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h3 id="raw-input-和input-语句"><a href="#raw-input-和input-语句" class="headerlink" title="raw_input 和input 语句"></a>raw_input 和input 语句</h3><p>raw_input 和 input 都是接收控制台输入语句</p>
<p><strong>raw_input：</strong> 直接读取控制台的输入（任何类型的输入它都可以接收）</p>
<p><strong>input：</strong> 它希望能够读取一个合法的 python 表达式，即你输入字符串的时候必须使用引号将它括起来，否则它会引发一个 SyntaxError</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>name = raw_input(<span class="string">'what is your name : '</span>)</div><div class="line">what <span class="keyword">is</span> your name : nenglee</div><div class="line">&gt;&gt;&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name = input(<span class="string">'what is your name :'</span>)</div><div class="line">what <span class="keyword">is</span> your name :nenglee</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">  File <span class="string">"&lt;string&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">NameError: name <span class="string">'nenglee'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name = input(<span class="string">'what is your name :'</span>)</div><div class="line">what <span class="keyword">is</span> your name :<span class="string">'nenglee'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p><strong>真值</strong> 也称作布尔值，换句话说在 :</p>
<blockquote>
<p>False   None     0      “”     ‘’     ()     []     {}</p>
</blockquote>
<p><code>False  None 数字0 空序列 空字典</code> 都会被解释器视作假（false）</p>
<h3 id="条件-和-if语句"><a href="#条件-和-if语句" class="headerlink" title="条件 和 if语句"></a>条件 和 if语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">num = input(<span class="string">'Enter a number:'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> num &gt; <span class="number">0</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'this number is positive'</span></div><div class="line"><span class="keyword">elif</span> num &lt; <span class="number">0</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'this number is negative'</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'This number is Zero'</span></div></pre></td></tr></table></figure>
<p>只要注意语法书写结尾要有:(冒号)，<code>elif</code> 是缩写 <code>else if</code>，当然python语法规定必须要用缩写，<br>要不然怎么体现python的简洁性。</p>
<h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><p>in 运算符可以像其他运算符一样在条件语句中使用，是否存在/满足？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">name = raw_input(<span class="string">'what is your name :'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span>  <span class="string">'s'</span> <span class="keyword">in</span> name:</div><div class="line">    <span class="keyword">print</span> <span class="string">'You name letter "s" '</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'You name not leeter "s" '</span></div></pre></td></tr></table></figure>
<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">x = <span class="number">1</span></div><div class="line"><span class="keyword">while</span> x &lt;= <span class="number">100</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'x is :'</span>,x</div><div class="line">    x+=<span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment">#输出------------</span></div><div class="line">x <span class="keyword">is</span> : <span class="number">1</span></div><div class="line">....</div><div class="line">x <span class="keyword">is</span> : <span class="number">100</span></div></pre></td></tr></table></figure>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span>  range(<span class="number">10</span>):</div><div class="line">    <span class="keyword">print</span> x</div></pre></td></tr></table></figure>
<p>遍历字典<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">d = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</div><div class="line"><span class="comment">#方法1</span></div><div class="line"><span class="keyword">for</span> key <span class="keyword">in</span>  d:</div><div class="line">    <span class="keyword">print</span> key , <span class="string">'corresoinds to '</span>, d[key]</div><div class="line"></div><div class="line"><span class="comment">#方法2</span></div><div class="line"><span class="keyword">for</span> key , value <span class="keyword">in</span> d.items():</div><div class="line">    <span class="keyword">print</span> key, <span class="string">'corresoinds to '</span>, value</div></pre></td></tr></table></figure></p>
<h3 id="一些迭代工具"><a href="#一些迭代工具" class="headerlink" title="一些迭代工具"></a>一些迭代工具</h3><p>在Python中迭代序列(或者迭代其他对象)时，有一些函数非常好用，有些函数位于<a href="http://www.wklken.me/posts/2013/08/20/python-extra-itertools.html" target="_blank" rel="external">itertools</a>模块中.</p>
<h4 id="并行迭代"><a href="#并行迭代" class="headerlink" title="并行迭代"></a>并行迭代</h4><p>程序可以同时迭代俩个序列</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">names = [<span class="string">'anne'</span>,<span class="string">'beth'</span>,<span class="string">'george'</span>,<span class="string">'damon'</span>]</div><div class="line">ages = [<span class="number">12</span>,<span class="number">20</span>,<span class="number">32</span>,<span class="number">15</span>]</div><div class="line"></div><div class="line"><span class="comment">#方法一</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(names)):</div><div class="line">    <span class="keyword">print</span> names[i] , <span class="string">'is '</span>, ages[i] ,<span class="string">'years old'</span></div><div class="line"></div><div class="line"><span class="comment">#方法二</span></div><div class="line"><span class="keyword">for</span> name,age <span class="keyword">in</span> zip(names,ages):  <span class="comment">#zip函数内建，特点可以处理长短不同的序列，但短序列完就结束</span></div><div class="line">    <span class="keyword">print</span> name,<span class="string">'is'</span>,age,<span class="string">'years old'</span></div></pre></td></tr></table></figure>
<h4 id="索引迭代"><a href="#索引迭代" class="headerlink" title="索引迭代"></a>索引迭代</h4><p>有时候项要迭代访问序列中对象，同时还要获得当前对象的索引。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">names = [<span class="string">'anne'</span>,<span class="string">'beth'</span>,<span class="string">'george'</span>,<span class="string">'damon'</span>]</div><div class="line"></div><div class="line"><span class="comment">#方法一  推荐 enumerate()  enumerate其实是一个元组tuple</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i,v <span class="keyword">in</span> enumerate(names):</div><div class="line"><span class="meta">... </span>   <span class="keyword">print</span> i,<span class="string">'-'</span>,v</div><div class="line">...</div><div class="line"><span class="number">0</span> - anne</div><div class="line"><span class="number">1</span> - beth</div><div class="line"><span class="number">2</span> - george</div><div class="line"><span class="number">3</span> - damon</div><div class="line">&gt;&gt;&gt;</div><div class="line"></div><div class="line"><span class="comment">#方法二</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(names)):</div><div class="line">    <span class="keyword">print</span> <span class="string">'is '</span> , names[i] , <span class="string">'index:'</span> , i</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#方法三</span></div><div class="line">i = <span class="number">0</span></div><div class="line"><span class="keyword">while</span> ( i &lt; len(names)):</div><div class="line">    <span class="keyword">print</span> <span class="string">'is '</span>, names[i], <span class="string">'index:'</span>, i</div><div class="line">    i+=<span class="number">1</span>;</div></pre></td></tr></table></figure>
<h4 id="翻转-和-排序迭代"><a href="#翻转-和-排序迭代" class="headerlink" title="翻转 和 排序迭代"></a>翻转 和 排序迭代</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">s = sorted([<span class="number">4</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">6</span>])  <span class="comment">#排序从小到大</span></div><div class="line"><span class="keyword">print</span> s</div><div class="line"></div><div class="line"><span class="comment">#排序 ascii码表  0～31控制字符  32是空格    </span></div><div class="line"><span class="comment"># 48～57为0到9十个阿拉伯数字</span></div><div class="line"><span class="comment"># 65～90为26个大写英文字母，97～122号为26个小写英文字母</span></div><div class="line">ss = sorted(<span class="string">'abcABC123!'</span>)   </div><div class="line"><span class="keyword">print</span> ss</div><div class="line"></div><div class="line">sss = list(reversed(<span class="string">'abcABC123!'</span>))  <span class="comment">#倒序翻转</span></div><div class="line"><span class="keyword">print</span> sss</div><div class="line"></div><div class="line">ssss = <span class="string">'-'</span>.join(reversed(<span class="string">'abcABC123!'</span>)) <span class="comment">#拼接 + 倒序</span></div><div class="line"><span class="keyword">print</span> ssss</div><div class="line"></div><div class="line"><span class="comment">#-------输出</span></div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</div><div class="line">[<span class="string">'!'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">[<span class="string">'!'</span>, <span class="string">'3'</span>, <span class="string">'2'</span>, <span class="string">'1'</span>, <span class="string">'C'</span>, <span class="string">'B'</span>, <span class="string">'A'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</div><div class="line">!<span class="number">-3</span><span class="number">-2</span><span class="number">-1</span>-C-B-A-c-b-a</div></pre></td></tr></table></figure>
<h3 id="跳出循环"><a href="#跳出循环" class="headerlink" title="跳出循环"></a>跳出循环</h3><p>一般来说，循环会一直执行到条件为假，或者序列的元素结束，要么就是死循环(哈哈–.)，有时候需要跳出结果，或者直接进入”下一个”循环</p>
<h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><p>结束(跳出)循环可以使用break语句</p>
<h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><p>continue语句会使得当前迭代结束，直接进行“下一个”循环</p>
<h3 id="列表推导式–轻量级循环"><a href="#列表推导式–轻量级循环" class="headerlink" title="列表推导式–轻量级循环"></a>列表推导式–轻量级循环</h3><p>列表推导是利用其他列表创建新列表的一种方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> [x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</div></pre></td></tr></table></figure>
<p>如果在 range(10)中每个x的平方组合列表，并且可以被3整除的有哪些呢？   <code>%3</code> ?</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> [x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">3</span> == <span class="number">0</span> ]</div><div class="line">[<span class="number">0</span>, <span class="number">9</span>, <span class="number">36</span>, <span class="number">81</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>既然for 后面可以跟 for  那么是否还能再跟上 for ?</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> [(x,y) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>) <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">3</span>)]</div><div class="line">[(<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>)]</div></pre></td></tr></table></figure>
<p><code>Python厉害，还可以这么玩，厉害叻！！！</code></p>
<h3 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h3><p>pass语句表示，什么都不做，什么都没发生，起到一个占行作用，比较Python对语法的缩进，格式非常非常非常的重要！</p>
<h3 id="del"><a href="#del" class="headerlink" title="del"></a>del</h3><p>有时候不需要的字段，还存在内存中，即使设置了None，只能说明数值是None，变量名还是存在，使用del删除。就彻底说拜拜。</p>
<p>###</p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python基础(4)-字典]]></title>
      <url>http://nenglee.com/2018/06/12/Python/Python%E5%9F%BA%E7%A1%80(4)-%E5%AD%97%E5%85%B8/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>提到键值对概念，在java中就是Map&lt; key - Value&gt;，是极为重要的数据结构，在Python称作”字典”,<br>这种类型的数据结构以映射(mapping),字典是python唯一内建的映射类型，字典中的值并没有特殊的<br>顺序，但是都存储在一个特定的键(key)下,键可以是数字,字符串或者是元组。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<p>先来创建一个字典瞧瞧看:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>phone =&#123;<span class="string">'apple'</span>:<span class="string">'iPhone7'</span>,<span class="string">'XiMi'</span>:<span class="string">'Mi Note'</span>,<span class="string">'MeiZu'</span>:<span class="string">'Mx 6'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>phone</div><div class="line">&#123;<span class="string">'MeiZu'</span>: <span class="string">'Mx 6'</span>, <span class="string">'apple'</span>: <span class="string">'iPhone7'</span>, <span class="string">'XiMi'</span>: <span class="string">'Mi Note'</span>&#125;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<ul>
<li>多个键对应值，构成键-值组成</li>
<li>键和值对应用(冒号) : 隔开</li>
<li>项之间用(逗号) , 隔开</li>
<li>整个字典用(花括号) {} 括起来</li>
</ul>
<h3 id="dict函数"><a href="#dict函数" class="headerlink" title="dict函数"></a>dict函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#  可以通过dict函数，通过其他映射关系或者有键值关系，可以建立字典</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>items =[(<span class="string">'name'</span>,<span class="string">'NengLee'</span>),(<span class="string">'age'</span>,<span class="number">25</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict(items)    <span class="comment">#数组</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">&#123;<span class="string">'age'</span>: <span class="number">25</span>, <span class="string">'name'</span>: <span class="string">'NengLee'</span>&#125;</div><div class="line">&gt;&gt;&gt;</div><div class="line"></div><div class="line"><span class="comment"># dict函数也可以通过关键字参数创建字典</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict(name = <span class="string">'NengLee'</span> , age = <span class="number">25</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">&#123;<span class="string">'age'</span>: <span class="number">25</span>, <span class="string">'name'</span>: <span class="string">'NengLee'</span>&#125;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h3 id="基本字典操作"><a href="#基本字典操作" class="headerlink" title="基本字典操作"></a>基本字典操作</h3><p>字典的基本行为在很多方面与序列类似：</p>
<ol>
<li><code>len(d)</code>   返回d中的项(k-v)的数量</li>
<li><code>d[K]</code>     返回关联k对应的(v)值</li>
<li><code>d[k]=v</code>   将一个新v重新赋值到k上</li>
<li><code>del d[k]</code> 删除k的项</li>
<li><code>k in d</code>   检查d中是否含有键(k)的项</li>
</ol>
<p><strong>键类型：</strong> 字典的键可以是任意不可变的类型，比如浮点型、字符型或者元组</p>
<p><strong>自动添加：</strong> 即使键起初在字典中并不存在，也可以为它赋值，这样字典就会建立新的项</p>
<p><strong>成员资格：</strong> 表达式 <code>k in d</code> 查找是否有键,而不是值. 表达式 <code>v in l (l为列表)</code>用于查找值，而不是索引</p>
<h3 id="字典方法"><a href="#字典方法" class="headerlink" title="字典方法"></a>字典方法</h3><p>字典也有自己的方法，非常有用</p>
<h4 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h4><p>clear()方法清除字典中多有的项</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict(name = <span class="string">'MacBook Pro'</span> , price = <span class="string">'2000$'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">&#123;<span class="string">'price'</span>: <span class="string">'2000$'</span>, <span class="string">'name'</span>: <span class="string">'MacBook Pro'</span>&#125;</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.clear()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">&#123;&#125;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h4><p>copy()方法返回一个具有相同键-值的新字典(实现了浅拷贝,而本身就是相同,而不是副本)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict(name = <span class="string">'MacBook Pro'</span> , price = <span class="string">'2000$'</span>,ps = [<span class="string">'bag'</span>,<span class="string">'mouse'</span>,<span class="string">'usb'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = d.copy()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c</div><div class="line">&#123;<span class="string">'ps'</span>: [<span class="string">'bag'</span>, <span class="string">'mouse'</span>, <span class="string">'usb'</span>], <span class="string">'price'</span>: <span class="string">'2000$'</span>, <span class="string">'name'</span>: <span class="string">'MacBook Pro'</span>&#125;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>这里有一个概念 <a href="http://python.jobbole.com/82294/" target="_blank" rel="external"><strong>深拷贝(deepcopy)</strong> 和 <strong>浅拷贝(copy)</strong></a></p>
<h4 id="fromkeys"><a href="#fromkeys" class="headerlink" title="fromkeys"></a>fromkeys</h4><p>fromkey()方法使用给定的键建立新的字典，每一个键都对应一个默认的值None</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;&#125;.fromkeys([<span class="string">'name'</span>,<span class="string">'age'</span>])</div><div class="line">&#123;<span class="string">'age'</span>: <span class="keyword">None</span>, <span class="string">'name'</span>: <span class="keyword">None</span>&#125;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><p>get()方法是一个更宽松的访问字典项方法,get()访问当不存在的key不会 KeyError</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict(name = <span class="string">'MacBook Pro'</span> , price = <span class="string">'2000$'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'age'</span>]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">KeyError: <span class="string">'age'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">'age'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">None</span></div></pre></td></tr></table></figure>
<h4 id="has-key"><a href="#has-key" class="headerlink" title="has_key"></a>has_key</h4><p>kas_key()方法可以检查字典中是否含有特定的键，<code>d.has_key(K)</code> 与表达式 <code>k in d</code>具有异曲同工，<br>需要注意的是在python3.0中不包括此函数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;&#125;.has_key(<span class="string">'key'</span>)</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'key'</span> <span class="keyword">in</span> &#123;&#125;</div><div class="line"><span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'key'</span>:<span class="string">'admin'</span>&#125;.has_key(<span class="string">'key'</span>)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'key'</span> <span class="keyword">in</span> &#123;<span class="string">'key'</span>:<span class="string">'admin'</span>&#125;</div><div class="line"><span class="keyword">True</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="items-和-iteritems"><a href="#items-和-iteritems" class="headerlink" title="items 和 iteritems"></a>items 和 iteritems</h4><p><strong>items：</strong> 方法将字典所有的项以列表方式返回，每一项都是(键-值)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict(name = <span class="string">'MacBook Pro'</span> , price = <span class="string">'2000$'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.items()</div><div class="line">[(<span class="string">'price'</span>, <span class="string">'2000$'</span>), (<span class="string">'name'</span>, <span class="string">'MacBook Pro'</span>)]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<p><strong>iteritems：</strong> 同样也是以项的形式返回，但是不是列表而是一个迭代器对象<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>it = d.iteritems()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>it</div><div class="line">&lt;dictionary-itemiterator object at <span class="number">0x023F9D20</span>&gt;  <span class="comment">#字典 - 条目列表</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(it)</div><div class="line">[(<span class="string">'price'</span>, <span class="string">'2000$'</span>), (<span class="string">'name'</span>, <span class="string">'MacBook Pro'</span>)]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<h4 id="keys-和-iterkeys"><a href="#keys-和-iterkeys" class="headerlink" title="keys 和 iterkeys"></a>keys 和 iterkeys</h4><p><strong>keys：</strong> 将字典中的键以列表的形式返回<br><strong>iterkeys：</strong> 返回键以迭代器形式返回</p>
<h4 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h4><p>pop()方法用来获得对应于给定键的值，然后将这个(键-值)对从字典中移出</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict(name = <span class="string">'MacBook Pro'</span> , price = <span class="string">'2000$'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.pop(<span class="string">'name'</span>)</div><div class="line"><span class="string">'MacBook Pro'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">&#123;<span class="string">'price'</span>: <span class="string">'2000$'</span>&#125;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="popitem"><a href="#popitem" class="headerlink" title="popitem"></a>popitem</h4><p>popitem()方法类似于list.pop [弹出最后一项元素]，不同的是popitem弹出是随机的项，因为字典<br>并没有”最后项元素”，无序列表。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict(name = <span class="string">'MacBook Pro'</span> , price = <span class="string">'2000$'</span> , ps = <span class="string">'Usb'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">&#123;<span class="string">'ps'</span>: <span class="string">'Usb'</span>, <span class="string">'price'</span>: <span class="string">'2000$'</span>, <span class="string">'name'</span>: <span class="string">'MacBook Pro'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.popitem()</div><div class="line">(<span class="string">'ps'</span>, <span class="string">'Usb'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">&#123;<span class="string">'price'</span>: <span class="string">'2000$'</span>, <span class="string">'name'</span>: <span class="string">'MacBook Pro'</span>&#125;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="setdefault"><a href="#setdefault" class="headerlink" title="setdefault"></a>setdefault</h4><p>setdefault()方法在某种程度上类似get方法，能够获得与给定键相关的值，除此之外，setdefault还能在字典中不含有给定键的情况下设定相应的键值。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.setdefault(<span class="string">'name'</span>,<span class="string">'N/A'</span>)      <span class="comment">#当字典不存在key时候，可以设定第二个参数</span></div><div class="line"><span class="string">'N/A'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">&#123;<span class="string">'name'</span>: <span class="string">'N/A'</span>&#125;</div><div class="line">&gt;&gt;&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.setdefault(<span class="string">'name'</span>)     <span class="comment">#当字典不存在key时候，可以设定第二个参数 默认为：None</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">&#123;<span class="string">'name'</span>: <span class="keyword">None</span>&#125;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><p>update()方法可以利用一个字典项更新另一个字典</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict(name = <span class="string">'MacBook Pro'</span> , price = <span class="string">'2000$'</span> , ps = <span class="string">'Usb'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = &#123;<span class="string">'name'</span>: <span class="string">'MacBook Air 2016'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.update(x)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">&#123;<span class="string">'ps'</span>: <span class="string">'Usb'</span>, <span class="string">'price'</span>: <span class="string">'2000$'</span>, <span class="string">'name'</span>: <span class="string">'MacBook Air 2016'</span>&#125;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="values-和-itervalues"><a href="#values-和-itervalues" class="headerlink" title="values 和 itervalues"></a>values 和 itervalues</h4><p><strong>values：</strong> 以列表的形式返回字典中的值，因为返回值可以有相同<br><strong>itervalues：</strong> 返回接收形式是迭代器</p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python基础(3)-字符串]]></title>
      <url>http://nenglee.com/2018/06/11/Python/Python%E5%9F%BA%E7%A1%80(3)-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>字符串是 Python 中最常用的数据类型,可以使用引号(‘或”)来创建字符串,并且通过索引和分片访<br>问字符串中单个字符。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<p>创建一个简单的字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>website=<span class="string">'http://www.nenglee.com'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>website</div><div class="line"><span class="string">'http://www.nenglee.com'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(website)</div><div class="line"><span class="number">22</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>website[<span class="number">7</span>:]</div><div class="line"><span class="string">'www.nenglee.com'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<h3 id="简单转换"><a href="#简单转换" class="headerlink" title="简单转换"></a>简单转换</h3><p>字符串格式化转换类型</p>
<table>
<thead>
<tr>
<th>转换类型</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>d , i</td>
<td style="text-align:center">到符号的十进制整数</td>
</tr>
<tr>
<td>o</td>
<td style="text-align:center">不带符号的八进制</td>
</tr>
<tr>
<td>u</td>
<td style="text-align:center">不带符号的十进制</td>
</tr>
<tr>
<td>x</td>
<td style="text-align:center">不带符号的十六进制(小写)</td>
</tr>
<tr>
<td>X</td>
<td style="text-align:center">不带符号的十六进制(大写)</td>
</tr>
<tr>
<td>e</td>
<td style="text-align:center">科学计数法表示的浮点数(小写)</td>
</tr>
<tr>
<td>E</td>
<td style="text-align:center">科学计数法表示的浮点数(大写)</td>
</tr>
<tr>
<td>f , F</td>
<td style="text-align:center">十进制浮点数</td>
</tr>
<tr>
<td>g</td>
<td style="text-align:center">如果指数大于-4或者小于精度值则和e相同，其他情况和f相同</td>
</tr>
<tr>
<td>G</td>
<td style="text-align:center">如果指数大于-4或者小于精度值则和E相同，其他情况和F相同</td>
</tr>
<tr>
<td>C</td>
<td style="text-align:center">单字符 (接收整数或者单字符字符串)</td>
</tr>
<tr>
<td>r</td>
<td style="text-align:center">字符串 (使用repr转换任意Python对象)</td>
</tr>
<tr>
<td>s</td>
<td style="text-align:center">字符串 (使用str转换任意Python对象)</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Price of eggs: $%d'</span> % <span class="number">42</span>  </div><div class="line"><span class="string">'Price of eggs: $42'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Headecimal price of eggs: %x'</span> % <span class="number">42</span></div><div class="line"><span class="string">'Headecimal price of eggs: 2a'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> math <span class="keyword">import</span> pi</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'pi: %f...'</span> % pi</div><div class="line"><span class="string">'pi: 3.141593...'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Very inexact estimate of pi: %i'</span> % pi</div><div class="line"><span class="string">'Very inexact estimate of pi: 3'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Using str: %s'</span> % <span class="number">42L</span></div><div class="line"><span class="string">'Using str: 42'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Using repr: %r'</span> % <span class="number">42L</span></div><div class="line"><span class="string">'Using repr: 42L'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h3 id="宽度和精度"><a href="#宽度和精度" class="headerlink" title="宽度和精度"></a>宽度和精度</h3><ul>
<li>宽度：转换后的值保留最小字数个数</li>
<li>精度：结果中包含小数位数(对于数字转换来说)，或者说是包含最大字符个数</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> math <span class="keyword">import</span> pi</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pi</div><div class="line"><span class="number">3.141592653589793</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%10f'</span> % pi         <span class="comment">#字段宽度10</span></div><div class="line"><span class="string">'  3.141593'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%10.2f'</span> % pi       <span class="comment">#字段宽度10，精度2</span></div><div class="line"><span class="string">'      3.14'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%.2f'</span> % pi         <span class="comment">#精度2</span></div><div class="line"><span class="string">'3.14'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%.5s'</span> % <span class="string">'Guido van Rossum'</span>     <span class="comment">#精度5</span></div><div class="line"><span class="string">'Guido'</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"></div><div class="line"><span class="comment">#也可以使用 *作为字段宽度或者精度 (或者俩者都使用*),此时数值会从元组参数读出:</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%.*s'</span> % (<span class="number">5</span>,<span class="string">'Guido van Rossum'</span>)</div><div class="line"><span class="string">'Guido'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h3 id="符号、对齐、0填充"><a href="#符号、对齐、0填充" class="headerlink" title="符号、对齐、0填充"></a>符号、对齐、0填充</h3><p>在字段宽度和精度值之前还可以放置一个“标志”，该标志可以是零(0)、加号、减号、或者空格</p>
<ul>
<li>减号(-)： 左对齐数值</li>
<li>加号(+)： 在正数前面显示加号(+)</li>
<li>0：      显示的数字前面填充’0’而不是默认的空格</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> math <span class="keyword">import</span> pi</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%10.2f'</span> % pi</div><div class="line"><span class="string">'      3.14'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%010.2f'</span> % pi   <span class="comment">#0填充</span></div><div class="line"><span class="string">'0000003.14'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%+10.2f'</span> % pi  <span class="comment">#正数前面+</span></div><div class="line"><span class="string">'     +3.14'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%-10.2f'</span> % pi  <span class="comment">#左边对齐</span></div><div class="line"><span class="string">'3.14'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><p>字符串从String模块中”继承”了很多方法，字符串的方法实在是太多，掌握一些特别重用及有用的即可。</p>
<h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>find()方法可以在一个较长的字符串中查找子串，它返回子串所在位置的最左端索引。如果没有找到则返回-1</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>subject = <span class="string">'$$$ Get rich now!!! $$$'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>subject.find(<span class="string">'$$$'</span>)</div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>subject.find(<span class="string">'Get'</span>)</div><div class="line"><span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>subject.find(<span class="string">'$$$$'</span>)</div><div class="line"><span class="number">-1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>subject.find(<span class="string">'$$$'</span>,<span class="number">1</span>)   <span class="comment">#1定义了开始查找索引位置</span></div><div class="line"><span class="number">20</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>subject.find(<span class="string">'!!!'</span>)</div><div class="line"><span class="number">16</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>subject.find(<span class="string">'!!!'</span>,<span class="number">0</span>,<span class="number">16</span>)  <span class="comment">#0和16 分别定义索引开始和结束的区间位置内查找</span></div><div class="line"><span class="number">-1</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="join-连接"><a href="#join-连接" class="headerlink" title="join [连接]"></a>join [连接]</h4><p>join()方法是非常重要的字符串方法，她是Sqlit方法的逆方法，用来连接序列中的元素</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>symol = <span class="string">'+'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>seq = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>symol.join(seq)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: sequence item <span class="number">0</span>: expected string, int found</div><div class="line"><span class="comment"># TypeError 类型异常 序列项0：期望的字符串，int找到</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>seq = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>symol.join(seq)</div><div class="line"><span class="string">'1+2+3+4+5'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p><code>可以看到连接的字符串必须都是字符串</code></p>
<h4 id="lower-小写转换"><a href="#lower-小写转换" class="headerlink" title="lower [小写转换]"></a>lower [小写转换]</h4><p>lower()方法返回字符串的小写母板</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>mStr = <span class="string">'I Love Python'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mStr.lower()</div><div class="line"><span class="string">'i love python'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="upper-转换大写"><a href="#upper-转换大写" class="headerlink" title="upper [转换大写]"></a>upper [转换大写]</h4><p>upper()方法返回字符串的大写</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>mStr = <span class="string">'I Love Python'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mStr.upper()</div><div class="line"><span class="string">'I LOVE PYTHON'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="replace-替换"><a href="#replace-替换" class="headerlink" title="replace [替换]"></a>replace [替换]</h4><p>replace()方法返回某个字符串的所有匹配项均被替换之后得到字符串</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>mStr = <span class="string">'This is a test  is a test'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mStr.replace(<span class="string">'is'</span>,<span class="string">'xXx'</span>)</div><div class="line"><span class="string">'ThxXx xXx a test  xXx a test'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="split-切割"><a href="#split-切割" class="headerlink" title="split [切割]"></a>split [切割]</h4><p>split()方法是join()逆方法，用来将字符串分割成序</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>mStr = <span class="string">'1+2+3+4+5'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mStr.split(<span class="string">'+'</span>)</div><div class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'/User/.python/mode'</span>.split(<span class="string">'/'</span>)</div><div class="line">[<span class="string">''</span>, <span class="string">'User'</span>, <span class="string">'.python'</span>, <span class="string">'mode'</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="strip-去除空格"><a href="#strip-去除空格" class="headerlink" title="strip [去除空格]"></a>strip [去除空格]</h4><p>strip()方法返回去除俩侧(不包括内部) 空格的字符串</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'     Python strip string   '</span>.strip()</div><div class="line"><span class="string">'Python strip string'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="translate"><a href="#translate" class="headerlink" title="translate"></a>translate</h4><p>translate()方法和replace()方法一样，替换字符串中的某些部分，但是前者不同的是:translate()<br>处理单个字符<br>string.translate(str, del=””)<br>例如：根据 str 给出的表(包含 256 个字符)转换 string 的字符,要过滤掉的字符放到 del 参数中</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from string import maketrans</div><div class="line">&gt;&gt;&gt; intab = 'aeiou'</div><div class="line">&gt;&gt;&gt; outtab = '12345'</div><div class="line">&gt;&gt;&gt; trantab = maketrans(intab,outtab)</div><div class="line">&gt;&gt;&gt; trantab</div><div class="line">'\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\</div><div class="line">x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&amp;\'()*+,-./0123456789:;&lt;=&gt;?@ABC</div><div class="line">DEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`1bcd2fgh3jklmn4pqrst5vwxyz&#123;|&#125;~\x7f\x80\x81\x82\x83</div><div class="line">\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97</div><div class="line">\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab</div><div class="line">\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf</div><div class="line">\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3</div><div class="line">\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7</div><div class="line">\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb</div><div class="line">\xfc\xfd\xfe\xff'</div><div class="line"></div><div class="line">&gt;&gt;&gt; mStr = 'this is string ..aeiou... wo!'</div><div class="line">&gt;&gt;&gt; mStr.translate(trantab)</div><div class="line">'th3s 3s str3ng ..12345... w4!'</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python基础(2)-列表-元组]]></title>
      <url>http://nenglee.com/2018/06/09/Python/Python%E5%9F%BA%E7%A1%80(2)-%E5%88%97%E8%A1%A8-%E5%85%83%E7%BB%84/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>Python的数据结构，和很多语言一样，就是一些列元素存放集合，那么最基本的数据结构就是序列。<br>序列中的每一个元素被分配一个序号–即元素的位置，也称为：索引。</excerpt></p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h3 id="内建序列分别："><a href="#内建序列分别：" class="headerlink" title="内建序列分别："></a>内建序列分别：</h3><ol>
<li>列表</li>
<li>元组</li>
<li>字符串</li>
<li>Unicode字符串</li>
<li>buffer对象</li>
<li>xrange对象</li>
</ol>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表可以使用所有适用于序列的标准操作，例如索引、分片、连接和乘法，当然还有最基本的增删改查等..</p>
<p>例如集合：<br><code>mList = [&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thur&#39;,&#39;Fri&#39;]</code></p>
<h4 id="基本列表操作"><a href="#基本列表操作" class="headerlink" title="基本列表操作"></a>基本列表操作</h4><ol>
<li><p>元素赋值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList[<span class="number">0</span>] = <span class="string">'Mon-1'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList</div><div class="line">[<span class="string">'Mon-1'</span>,<span class="string">'Tues'</span>,<span class="string">'Wed'</span>,<span class="string">'Thur'</span>,<span class="string">'Fri'</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>删除元素</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; del mList[0]</div><div class="line">&gt;&gt;&gt; mList</div><div class="line">[Tues','Wed','Thur','Fri']</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>分片赋值</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList[<span class="number">1</span>:<span class="number">-1</span>]</div><div class="line">[<span class="string">'Tues'</span>, <span class="string">'Wed'</span>, <span class="string">'Thur'</span>]</div><div class="line">&gt;&gt;&gt;</div><div class="line"></div><div class="line"><span class="comment"># 分片还有一个步长的定义, 例如 mList[::2]</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList[::<span class="number">2</span>]</div><div class="line">[<span class="string">'Mon'</span>, <span class="string">'Wed'</span>, <span class="string">'Fri'</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h3 id="列表（list）方法"><a href="#列表（list）方法" class="headerlink" title="列表（list）方法"></a>列表（list）方法</h3><p>方法是一个与某些对象有密切联系的函数，对象可能是列表、数字、也可能是字符串或者是其他类型<br>的对象，方法可以这样进行调用:</p>
<p><code>对象.方法 (参数)</code></p>
<p>除了对象被放置到方法名之前，并且俩者之间用一个点号隔开，方法调用与参数调用很类似。</p>
<h4 id="append"><a href="#append" class="headerlink" title="append"></a>append</h4><p>append() 方法用于在列表的末尾追加新的对象</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList.append(<span class="string">'Sat'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList</div><div class="line">[<span class="string">'Mon'</span>, <span class="string">'Tues'</span>, <span class="string">'Wed'</span>, <span class="string">'Thur'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><p>count() 方法用于统计某个元素在列表中出现的次数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList = [<span class="string">'Mon'</span>, <span class="string">'Tues'</span>, <span class="string">'Wed'</span>, <span class="string">'Thur'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>, <span class="string">'Mon'</span>, <span class="string">'Mon'</span>, <span class="string">'Tues'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList.count(<span class="string">'Mon'</span>)</div><div class="line"><span class="number">3</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="extend"><a href="#extend" class="headerlink" title="extend"></a>extend</h4><p>extend() 方法可以在列表的末尾一次性追加另一个序列中的多个值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList1 = [<span class="string">'Mon'</span>,<span class="string">'Tues'</span>,<span class="string">'Wed'</span>,<span class="string">'Thur'</span>,<span class="string">'Fri'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList2 = [<span class="string">'Sat'</span>,<span class="string">'Sun'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList1.extend(mList2)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList1</div><div class="line">[<span class="string">'Mon'</span>, <span class="string">'Tues'</span>, <span class="string">'Wed'</span>, <span class="string">'Thur'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>, <span class="string">'Sun'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList2</div><div class="line">[<span class="string">'Sat'</span>, <span class="string">'Sun'</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="index"><a href="#index" class="headerlink" title="index"></a>index</h4><p>index() 方法用于列表中找出某个值第一个匹配项的索引位置</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList = [<span class="string">'Mon'</span>, <span class="string">'Tues'</span>, <span class="string">'Wed'</span>, <span class="string">'Thur'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>, <span class="string">'Sun'</span>, <span class="string">'Tues'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList.index(<span class="string">'Tues'</span>)</div><div class="line"><span class="number">1</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><p>insert() 方法用于将对象插入到列表中</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList = [<span class="string">'Tues'</span>, <span class="string">'Wed'</span>, <span class="string">'Thur'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>]</div><div class="line"><span class="comment">#索引0的时候 插入一个元素</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList.insert(<span class="number">0</span>,<span class="string">'Mon'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList</div><div class="line">[<span class="string">'Mon'</span>, <span class="string">'Tues'</span>, <span class="string">'Wed'</span>, <span class="string">'Thur'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>]</div><div class="line"></div><div class="line"><span class="comment">#列表末尾添加对象，用insert需要知道最后的索引，而用append就是直接追加在末尾，并且可读性较高</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList.insert(len(mList)+<span class="number">1</span>,<span class="string">'Sun'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList</div><div class="line">[<span class="string">'Mon'</span>, <span class="string">'Tues'</span>, <span class="string">'Wed'</span>, <span class="string">'Thur'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>, <span class="string">'Sun'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList.append(<span class="string">'Sun'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList</div><div class="line">[<span class="string">'Mon'</span>, <span class="string">'Tues'</span>, <span class="string">'Wed'</span>, <span class="string">'Thur'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>, <span class="string">'Sun'</span>, <span class="string">'Sun'</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h4><p>pop() 方法会移除列表中最后一个元素(默认是最后一位)，并且返回该元素</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList = [<span class="string">'Mon'</span>, <span class="string">'Tues'</span>, <span class="string">'Wed'</span>, <span class="string">'Thur'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>, <span class="string">'Sun'</span>, <span class="string">'Sun'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList.pop()</div><div class="line"><span class="string">'Sun'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h4><p>remove() 方法用于移除列表中某一个值，并且第一个匹配项</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList = [<span class="string">'Mon'</span>, <span class="string">'Tues'</span>, <span class="string">'Wed'</span>, <span class="string">'Thur'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>, <span class="string">'Sun'</span>, <span class="string">'Sun'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList.remove(<span class="string">'Sun'</span>)   <span class="comment">#匹配最新出现的索引位置，并且删除  </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList</div><div class="line">[<span class="string">'Mon'</span>, <span class="string">'Tues'</span>, <span class="string">'Wed'</span>, <span class="string">'Thur'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>, <span class="string">'Sun'</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h4><p>reverse() 方法是将列表中的元素进行反向存放，俗称倒序</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList = [<span class="string">'Mon'</span>, <span class="string">'Tues'</span>, <span class="string">'Wed'</span>, <span class="string">'Thur'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>, <span class="string">'Sun'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList.reverse()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList</div><div class="line">[<span class="string">'Sun'</span>, <span class="string">'Sat'</span>, <span class="string">'Fri'</span>, <span class="string">'Thur'</span>, <span class="string">'Wed'</span>, <span class="string">'Tues'</span>, <span class="string">'Mon'</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>sort() 方法用于在原来的位置对列表进行排序</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">6</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>]</div></pre></td></tr></table></figure>
<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>元组和列表一样，也属序列的一种，唯一不同的是:元组不能修改</p>
<p><code>mTuple = (&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thur&#39;,&#39;Fri&#39;)</code></p>
<p>需要主要的是元组是用 () 括起来的，并且不能修改内部对象</p>
<h4 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h4><p>tuple() 把序列转换成元组<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList = [<span class="string">'Mon'</span>, <span class="string">'Tues'</span>, <span class="string">'Wed'</span>, <span class="string">'Thur'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>, <span class="string">'Sun'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tuple(mList)</div><div class="line">(<span class="string">'Mon'</span>, <span class="string">'Tues'</span>, <span class="string">'Wed'</span>, <span class="string">'Thur'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>, <span class="string">'Sun'</span>)</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python基础(1)-序列操作]]></title>
      <url>http://nenglee.com/2018/06/07/Python/Python%E5%9F%BA%E7%A1%80(1)-%E5%BA%8F%E5%88%97%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>Python的数据结构，和很多语言一样，就是一些列元素存放集合，那么最基本的数据结构就是序列。<br>序列中的每一个元素被分配一个序号–即元素的位置，也称为：索引。</excerpt></p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h2 id="序列通用操作分别"><a href="#序列通用操作分别" class="headerlink" title="序列通用操作分别:"></a>序列通用操作分别:</h2><ol>
<li>索引</li>
<li>分片</li>
<li>序列相加</li>
<li>乘法</li>
<li>成员资格</li>
<li>长度/最小值/最大值</li>
<li>迭代</li>
</ol>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>序列中所有的元素都存在自己的编号，从0开始递增，那么这些元素可以通过编号分别访问</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>sequence = <span class="string">"Hello Word"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sequence[<span class="number">0</span>]</div><div class="line"><span class="string">'H'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sequence[<span class="number">-1</span>]</div><div class="line"><span class="string">'d'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p><code>第一个索引是0，第二则是1，依此内退，最后一个为-1</code></p>
<h3 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h3><p>与索引类似访问单个元素，可以使用分片操作一定范围内的元素。分片通过冒号隔开的俩个索引来实现</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>letter = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'h'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>letter [<span class="number">0</span>:<span class="number">3</span>]</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p><code>总而言之，分片的操作提供俩个索引的边界，第一个索引含在切片内，第二索引不在切片内</code></p>
<p>假设： 取最后3个元素？</p>
<p><strong> 要知道-1是取最后一个索引，可是在切片中第二个索引不包含在切片的范围内</strong></p>
<p><del>错误：</del><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>letter [<span class="number">-3</span>:<span class="number">-1</span>]</div><div class="line">[<span class="string">'f'</span>,<span class="string">'g'</span>]    <span class="comment">#显然这种方式取不到最后3个</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<p>正确：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>letter [<span class="number">-3</span>:]   <span class="comment">#这里为空，不是代表0， 如果是0那么切片是空数值</span></div><div class="line">[<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'h'</span>]  </div><div class="line"> &gt;&gt;&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>letter [<span class="number">-3</span>:<span class="number">9</span>]   <span class="comment">#为什么是9？letter总长度为8个，第9个向前推一个刚好最后一个索引位</span></div><div class="line">[<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'h'</span>]  </div><div class="line"> &gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<h4 id="1-步长-Step-length"><a href="#1-步长-Step-length" class="headerlink" title="1.步长(Step length)"></a>1.步长(Step length)</h4><p> 在进行分片的时候，分片的开始和结束点需要进行指定，(不管是直接或是间接)，而另一种参数“步<br> 长”通常都是隐士设置的。<br> <code>先按照分片的定义操作，然后更具步长【比值数】逐步遍历序列中的元素，最后返回开始和结束的元素</code></p>
<p> 举个例子:<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>letter = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'h'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>letter [<span class="number">0</span>:<span class="number">9</span>:<span class="number">2</span>]  </div><div class="line">[<span class="string">'a'</span>,<span class="string">'c'</span>,<span class="string">'e'</span>,<span class="string">'g'</span>]</div><div class="line"> &gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>分析一下：首先按照[0:9]来分片，然后再根据1的步长遍历，返回最后的结果集。</p>
</blockquote>
<p>其中步长不能为0，但是可以为空值，空值相当于1，那么问题来了。能不能为负数呢？</p>
<p>当然可以，只不过要先反着分片【从右(尾)向左开始（倒序）】,然后遍历步长</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>letter = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'h'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>letter [<span class="number">9</span>:<span class="number">0</span>:<span class="number">-3</span>]  </div><div class="line">[<span class="string">'h'</span>,<span class="string">'e'</span>,<span class="string">b']</span></div><div class="line"> &gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p><code>letter [9:0:-3]   等价于  letter [:0:-3]</code></p>
<h4 id="2-分片其他"><a href="#2-分片其他" class="headerlink" title="2.分片其他"></a>2.分片其他</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>letter = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'h'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>letter [:]  </div><div class="line"> [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'h'</span>]  <span class="comment">#相当于复制整个序列</span></div><div class="line"> &gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h3 id="序列相加"><a href="#序列相加" class="headerlink" title="序列相加"></a>序列相加</h3><p>通过使用运算符可以进行序列的连接操作</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] + [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello'</span> + <span class="string">'World'</span></div><div class="line"><span class="string">'HelloWorld'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] + <span class="string">'Hello'</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: can only concatenate list (<span class="keyword">not</span> <span class="string">"str"</span>) to list</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>当列表和字符串是无法连接在一块，即使它们都是序列，但是属于不同的类型序列。</p>
<h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"Pyhton"</span> * <span class="number">5</span></div><div class="line"><span class="string">'PyhtonPyhtonPyhtonPyhtonPyhton'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">10</span>] * <span class="number">10</span></div><div class="line">[<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="1-None，空列表"><a href="#1-None，空列表" class="headerlink" title="1.None，空列表"></a>1.None，空列表</h4><ol>
<li>空列表：可以直接用[]表示</li>
<li>None: Python的内建值，确切的含义“这里面什么都没有”，因此想表示初始化长度为10的空列表<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>noneSequence = [<span class="keyword">None</span>] * <span class="number">10</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>noneSequence</div><div class="line">[<span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="成员资格"><a href="#成员资格" class="headerlink" title="成员资格"></a>成员资格</h3><p>用于检查一个数值是否存在序列中，可以用in运算符，然后接收布尔值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>language = <span class="string">"Python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'o'</span> <span class="keyword">in</span> language</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"s"</span> <span class="keyword">in</span> language</div><div class="line"><span class="keyword">False</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>users = [<span class="string">'neng'</span>,<span class="string">'Mack'</span>,<span class="string">'baby'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>raw_input(<span class="string">'your users name :'</span>) <span class="keyword">in</span> users</div><div class="line">your users name :neng</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>raw_input(<span class="string">'your users name :'</span>) <span class="keyword">in</span> users</div><div class="line">your users name :xxx</div><div class="line"><span class="keyword">False</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h3 id="长度、最小值和最大值"><a href="#长度、最小值和最大值" class="headerlink" title="长度、最小值和最大值"></a>长度、最小值和最大值</h3><ul>
<li>len()   长度</li>
<li>min()   最小值</li>
<li>max()   最大值</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>nunber = [<span class="number">1</span>,<span class="number">24</span>,<span class="number">100</span>,<span class="number">50</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(nunber)</div><div class="line"><span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>min(nunber)</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>max(nunber)</div><div class="line"><span class="number">100</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>max(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>min(<span class="number">26</span>,<span class="number">62</span>)</div><div class="line"><span class="number">26</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[人生苦短 我用Python]]></title>
      <url>http://nenglee.com/2018/06/07/Python/Python%E7%9A%84%E8%AE%A4%E7%9F%A5/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>如果说 <code>&quot;PHP是最好的语言&quot;</code></excerpt></p>
<p>来调侃其它语言</p>
<p>那么 <code>“人生苦短,我用python”</code></p>
<p>来回敬</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>本身做移动开发，一直这块领域匍匐，对移动互联网的了解，08开始Phone os和Android os俩大操<br>作系统，从萌芽到野蛮生长，11年的时候这类开发缺乏人才，到目前的瓶颈及饱和，在2016《时间的<br>朋友》跨年演讲中老罗说：移动互联网的红利开始结束，移动互联网的上半场结束，下半场即将开始。</p>
<p>对这个行业的认知和了解，确实如此，身边有很多同行，都觉得目前移动就业不是非常乐观，其实这<br>就是互联网，高速发展，优胜劣汰。很现实，也很无奈，不得不接收，不得不重新起航。好在当初很<br>幸运，当初赶上了这般末班车。</p>
<blockquote>
<p>经历一些成长后，心算是静了下来了吧！也在这个春暖花开的季节，选择开始播种</p>
</blockquote>
<h3 id="1-学习后台语言"><a href="#1-学习后台语言" class="headerlink" title="1.学习后台语言"></a>1.学习后台语言</h3><p>特意在知乎查了下 PHP、Java、Python、C、C++ 特点，我想以下几点最能说明特性</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PHP:    没啥特别优点好说，中规中矩</div><div class="line">java:   库多，库多，库多</div><div class="line">Python: 语法清楚，语法清楚，语法清楚</div><div class="line">C:      操作底层，细腻到性能优化</div><div class="line">C++:    啥都有，啥都有，啥都有</div></pre></td></tr></table></figure>
<p>那么根据自身条件，特点觉得Python这款最适合,简洁风格最好，毕竟人生苦短，能懒就懒吧！嘿..</p>
<p>在自我工作经历中，项目后台一般就三种，java/Pyhton/PHP</p>
<p>按理说搞搞java会是非常吃香，毕竟没有语法障碍，但是就是不想，不要问我为什么。PHP真心没兴<br>趣。</p>
<p>Pyhon至少在项目中看的不那么头疼，据说有很强的缩进要求，这下开心死了，最厌烦别人代码不格<br>式化，没有整体感。</p>
<h3 id="2-未来趋势"><a href="#2-未来趋势" class="headerlink" title="2.未来趋势"></a>2.未来趋势</h3><p>就目前AR &amp;&amp; VR技术非常流行，开发牵涉的领域太广，国内人才偏少，，报道2020左右会有一个比<br>较成熟的普及。</p>
<p>自动化人工智能也将是一种趋势，刚好最近俩会支持，“用人工智能推动我国产业新变革”,跟着政策<br>走总会有肉吃，而人工智能其中需要一个非常大的数据分析和机器学习，那么Python在这俩点非常、<br>非常的适合。</p>
<h3 id="3-拿它做什么"><a href="#3-拿它做什么" class="headerlink" title="3.拿它做什么"></a>3.拿它做什么</h3><p>我也不知道会不会以这么语言为生，但是语言这东西也会跟新换代，谁好用就用谁，偏爱谁就去追随，<br>哪有那么多为什么？你开心就好了。</p>
<p>想拿它做一些爬虫，觉得很有意思，然后分析分析数据，在互联网里面，数据的价值非常的高；搞些<br>脚本，让懒成为一种艺术。</p>
<p>据说什么都能做，只有你想不到，没有做不到，真是太神奇了！</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[你陪我长大，我陪你变老]]></title>
      <url>http://nenglee.com/2017/06/17/%E9%9A%8F%E7%AC%94/%E4%BD%A0%E9%99%AA%E6%88%91%E9%95%BF%E5%A4%A7%EF%BC%8C%E6%88%91%E9%99%AA%E4%BD%A0%E5%8F%98%E8%80%81/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<blockquote>
<p>所谓父亲，就是那个不断对着背影既欣喜又悲伤、想追回拥抱又不敢声张的人吧。</p>
</blockquote>
<a id="more"></a>   
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<p>01.</p>
<p>最近刚好看到一档节目《朗诵者》，颇有触感，嘉宾是年过花甲的金士杰，喜获龙凤胎，在和主持人谈论孩子、父亲角色故事中，特别是说道当俩个小生命推出来时候，初为人父的他，有种不知所措的喜悦，一下子就改变多年的生活；曾经抗拒过结婚生子这件事，有太多顾虑，觉得”这个地球不好，有太多不公不义，不干不净，不希望带来一个生命来这里，有一天自己离开了，留下孩子会对不起他们”。好奇为什么他会这么说？是有多悲观厌世，后来在<a href="https://www.zhihu.com/question/22265010" target="_blank" rel="external">知乎</a>上了解他的人生经历，从小文艺青年到愤青，最后成为较高水平的戏剧家，生活和现实脱过轨，一波三折，才理解为什么这么讲，可却又偏偏说自己矛盾，解释道，人上了年纪，思想不至于紧绷，对人生有新的诠释，知道怎么追寻生命和拥抱生命，也正如那句话：爱，是唯一理智的行为！</p>
<p>前俩年在《剩者为王》电影中扮演三十几岁未嫁女儿的老父亲，他不动声色地背着女儿，去找将要和自己女儿成为结婚对象的那个人，长达四五分钟的一席话：她不应该为父母亲结婚，不应该在外面听什么疯言疯语听多了就想着要结婚。她应该想着跟自己喜欢的人，白头偕老的结婚，昂首挺胸的，特别硬气的，憧憬的，好像赢了一样，我和她站在一起，我是她的父亲。她在我这里，只能幸福，别的都不行。</p>
<p>相信看过这段独白都会湿了眼，虽然我不是“女儿”，也尚未成家为父，但是真真实实切身体会到一颗做父亲的心，姐姐结婚那时，老爸你为这事也是操透了心。故事中的父爱没有胁迫，没有绑架，站在女儿的立场，切身感受为准则，不允许受到伤害为前提，我想这样的父爱，多善解人意，现实生活中，会有些父亲会参杂母爱之心，极其不易，不仅要忙工作，也要忙生活，但是大多父爱都是共同，无声、深沉，却总能在关键及需要的时刻，像山一样立在儿女面前，遮风挡雨，不管张多大，在父亲面前，永远都是一个孩子，都需要呵护。</p>
<p><br></p>
<p>02.</p>
<p>爸爸，今年的父亲节，不知道该为你准备什么样的礼物，我想和你说说话。</p>
<p>其实对于感恩父母节日由来，切却的说是上高中之后才知道。</p>
<p>记得第一次给你过父亲节的情节，那天下晚自习回家后，你们正在客厅看电视，我端了一盆温水走到你面前。</p>
<p>“爸！今天是父亲节，儿子给帮你洗次脚”</p>
<p>当时我红着脸说。</p>
<p>你一脸的蜜笑，挠了挠头。”放这就行，自己来”</p>
<p>“今过节就洗个脚，工作一天也怪累的”，生怕你在婉拒</p>
<p>母亲在一旁接着说：”娃子的心意，洗了、好让写作文”</p>
<p>当双脚放进盆里时，水的温度，手的温度，脚的温度，都刚刚好，心的温度却上升了，盆里面的脚很厚实，宽大，搓脚的时候，顾不上抹脸，眨巴眨巴，怕打出水滴，也没敢抬头看你。</p>
<p>当时特别想说 ：爸，辛苦了，儿子长大了！ 始终未开口，屋里除了电视声，也就是电视声。</p>
<p><strong>我们都不善表露，可心里全都清楚，这就是血脉相传的定数。</strong></p>
<p><br></p>
<p>03.</p>
<p>上小学时候经常听奶奶讲过去的事，爷爷去世的早，留下奶奶和4个孩子相依为命，当时老爸你13岁和10岁的妹妹从此辍学，干起农活，挑起担子，不由浮想画面，同人群中，矮半截的身影吃力般扛起锄头再砸下，一个小姑娘牵着牛被追着满山跑，把较好得让给俩个幼小的弟弟。</p>
<p>奶奶说：那个时候，哪有什么吃的，经常找屋前人家借米，家里孩子多，村队又是按照劳力分粮，没几天一扫而光。</p>
<p>我问奶奶:“什么是劳力？村队怎么就分的那么少？”</p>
<p>“就是出工的劳力，有男劳力随村队在外做田活，女劳力在内做针线，多劳多得，只晓得总是做，却还是很难撑到下一次分粮，常常寻借；那时候，怎么那么苦都过来，一个都没饿倒，现在还个个一表人才。” 从奶奶的话语中，我听到那个年代的心酸和艰辛，古训讲”穷人家的孩子早当家”。</p>
<p>后来在爷爷辈的帮助下，老爸你成了家，有了我们；还不忘兄弟姐妹，帮幺幺置办嫁妆，协二爹创业，助小爹考学。</p>
<p>在我幼年记忆中，关于老爸你最深刻的俩点：磨豆腐挑去卖和过年写对联。</p>
<p>至今以来我对豆制品的食物，有着独特情怀，都是小时候吃的太多缘故；老爸你却说看到这种豆渣什么的，都吃够了、腻了。</p>
<p>过年的时候，你从街上买回红纸和对联小册子，我在一边看你裁纸，帮你牵纸，然后用浆糊贴满整个家，也告诉我”福”字为什么要倒着写。虽说老爸你只有半初中文化，却能写得出上台面的毛笔字，笔墨横姿，是我今生无法学得会。</p>
<p>我知道，姐姐出生后不吃奶，你背着储存粮赶几十里路外换成奶粉，连路赶回，生怕饿坏；每次和姐打闹，俩个哭鼻子，你对我说：你懂事，你最听话一些，要让着你姐。</p>
<p>当时就生气，自古以来都是大让小，为什么到我这里，非要我让她？</p>
<p>长大后我知道，因为我是家里的男子汉，将来是顶梁的那种。</p>
<p><strong>如果你感觉岁月静好，一定是有人为你负重前行。</strong></p>
<p><br></p>
<p>04.</p>
<p>小时候觉得老爸顶天立地，严厉苛刻；上学后再看朴实，稳重、宽厚在合适不过；工作后细看已是未老先衰，银发渐显。</p>
<p>要强的你，从来都是不善言辞，总是默默发出，沉默的背后也有脆弱的一面。</p>
<p>中学叛逆期，我迷恋网络，吃完午饭你去店里，我偷偷出去上网，你找到了我，当时你没有训，也没有打。说了句：“走，走回去!” 声音不大，却很有力。</p>
<p>太阳很毒，你走在前面，影子被拉的很深。那是第一次见到老爸你流泪了，边走边擦，我知道，抹的都是不争气，不听话，你寄于厚重，望学业有成，能出息，我却让你失望痛心，辛苦的工作供着我在那么好的学校读书，感到惭愧！走到路口，你让我别再去玩、回家。晚上你回来，写了一封信递你，深深的认识到自己的错误，不应该学坏去上网，应该把学习放到第一，并且保证以后不让你操心，好好听话。你没怪罪，还问我这么喜欢上网，要不要买台电脑。那年上初二，那时发现老爸你不再严厉，内心里住着一个孩子。</p>
<p>或许不是学习这块料，中考也不称心如意，还是自费上的高中，二爹带我去报的名，对我说：“这是你爸好几年的血汗钱，得好好上学。”</p>
<p>这俩件事记忆犹新，也是儿子以来最为愧疚，很自责。从这以后，学会独立，不让你操心，争取考个好大学，找个好工作，好好孝敬你。</p>
<p><strong>大半辈子从来没有为自己考虑过父亲，省吃俭用，勤俭节约，把最好的留给我们。</strong></p>
<p>去年5月查出患病要动手术，知道后变貌失色，在病房见到你，剪了个短头，脸腮有些塌，不停的在病房来回走动，显得有些焦虑，时不时去到卫生间吐俩口痰，再叹个气，消瘦得跟变了一样。和你打趣的说“网上买小的衣服估计穿刚刚好”，你没有做声。医生给我们讲“小手术，经常做”，还是不放心，心揪着，毕竟破天荒遇到手术这件事，忐忑不安。</p>
<p>康复后，爸爸你说在手术前一宿没睡，爸爸你真是杞人忧天的一个人，这样不好，以后要改掉。</p>
<p>说真的，那天见到你从手术室下来，手很冰，很虚，主治医生告诉 “很成功”，悬着心也就落了半载；在病房里面握着你的手，你不停的沉睡，肯定是太累，一听到你打呼噜，我就会喊声”爸爸”，然后捏捏你的手，你颤动下手”嗯”一声，我就知道你没睡着，医生说观察期最好不要让病人睡的太沉。</p>
<p>夜里，看见你留下的泪痕，没敢去擦拭，因为儿子心疼看到你这样。</p>
<p><strong>男儿有泪不轻弹，只是未到伤心处。</strong></p>
<p><br></p>
<p>05.</p>
<p>今年五一的时候，我们在西湾红树林游玩和拍照，人嘻人闹。</p>
<p>往年走亲戚，说我长这么高，比你爸还高了</p>
<p>“没有，老爸高，老爸有180多”。</p>
<p>而只有在照片中，才相信已经可以轻易地搂住你的肩。</p>
<p>时常和父母亲出去的话，习惯走在你们的身后，因为只有这样，才能看到你们的背影，你们的变化。</p>
<p><img src="http://of6bvxslc.bkt.clouddn.com/parent_father.png" alt="父母亲"></p>
<p>–End</p>
<p>你陪我长大，我陪你变老。</p>
<p>最后：愿天下所有父母亲幸福康乐 (2017-06 父亲节)</p>
<p><br></p>
<hr>
<blockquote>
<p>严禁转载，盗图链接，违者必究</p>
</blockquote>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建VPS用Shadowsocks科学上网]]></title>
      <url>http://nenglee.com/2017/05/13/%E9%9A%8F%E7%AC%94/%E6%90%AD%E5%BB%BAVPS%E7%94%A8Shadowsocks%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>科学上网俗称:”翻墙”、“梯子”，主要是因为大陆为了“国家安全”和“国家网络安全”等目的，建设了“强大的” GFW（中国防火长城）以禁止大陆网民访问国外的“敏感网站”和“可能敏感网站”。就好如一面墙，屏蔽正常视野。而那些工作特殊着，程序员、外贸外企等，都需要去外网查询交易浏览等业务，所以要借助正确的工具科学上网。</p>
<a id="more"></a>   
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<p>记得以前面试时候提过，’工作中你遇到困难是通过什么样的方式解决问题？</p>
<p>这个无非是搜素引擎的问题，国内的百度、国外的Google，后者更加显具有专业性，毕竟技术大牛都是外国人，与此同时也具有难度，学会用Google是最基本用法，加上特殊因素，学会科学上网尤为重要。</p>
<p>那么问题来.如何用正确的姿势科学上网呢？</p>
<font color="#0099ff"> 1. <strong>第三方提供插件或者软件【免费/付费】</strong> </font><br><font color="#0099ff"> 2. <strong>通过手动搭建海外服务器进行科学上网</strong> </font>

<p>以前呀，都是用第一中方式，花钱买帐号，导致原因很多，不稳定、而且做这一块的都是小公司或者个人居多，当时续了一年的“红杏”，结果用了三个月就用不成，官网只提供‘服务升级维修’之后就了无音讯，导致后期买服务都不敢续年费。</p>
<p>那么免费的如何呢？你要相信没有免费的午饭，特别是安全性无法保证，网速也不能提供稳定性，每天还限时限量根本无法满足，随查随用的自由。</p>
<p>而就在今年1月出《工信部发文规范网络接入服务市场:未经批准不得自行建立或租用VPN》，导致今年很服务商家很难过。</p>
<h2 id="什么是Shadowsocks"><a href="#什么是Shadowsocks" class="headerlink" title="什么是Shadowsocks"></a>什么是Shadowsocks</h2><p>维基百科是这么解释：</p>
<blockquote>
<p>Shadowsocks是使用Python、C++、C#以及Go等语言开发、基于Apache许可证的开放源代码软件，用于保护网络流量、加密数据传输以及突破中国网络审查。<br>Shadowsocks使用Socks5代理方式，Shadowsocks分为服务器端和客户端。在使用之前，需要先将服务器端部署到服务器上面，然后通过客户端连接并创建本地代理。<br>在中国大陆，本工具也被广泛用于突破防火长城（GFW），以浏览被封锁、屏蔽或干扰的内容。在2015年8月22日，Shadowsocks原作者Clowwindy称受到了中国政府的压力，宣布停止维护此计划（项目）并移除其个人页面所存储的源代码。因为移除之前就有大量的复制副本，所以并未停止维护，而是由多位贡献者维护</p>
</blockquote>
<p><img src="http://of6bvxslc.bkt.clouddn.com/GFW_principle.png" alt="GFW"></p>
<p>Shadowsocks 将原来 <a href="https://zh.wikipedia.org/wiki/Secure_Shell" target="_blank" rel="external">ssh</a>创建的<a href="https://zh.wikipedia.org/wiki/SOCKS#SOCK5" target="_blank" rel="external">Socks5</a> 协议拆开成 Server 端和 Client端，两个端分别安装在境外服务器和境内设备上,Client 和 Server 之间可以通过多种方式加密，并要求提供密码确保链路的安全性.</p>
<p>Shadowsocks充当了境内外的俩端连接者，并且具有很多加密方式，绕过防火墙的监控。</p>
<h2 id="搭建VPS"><a href="#搭建VPS" class="headerlink" title="搭建VPS"></a>搭建VPS</h2><p>那么如何搭建服务器呢？在此之前要搞清楚「服务器」，是指服务器主机商提供的VPS（Virtual Private Server 虚拟专用服务器）技术，将一台服务器分割成多个虚拟专享服务器的优质服务。首先选服务器机房必须是境外的网，不然国内的然并卵。又牵扯到境外，那么如何选择呢？</p>
<p>目前简单的了解俩家提供商：</p>
<ol>
<li><a href="https://bwh1.net/" target="_blank" rel="external">bandwagong(搬瓦工)</a></li>
<li><a href="https://billing.virmach.com" target="_blank" rel="external">virmach</a></li>
</ol>
<p>主要从价格，搭建，稳定性以及支付方式几个方面考虑，在这里我选择第一个banwagong，同时在使用时不满意支持退款等服务，还是相当不错，后来了下上YouTube观看1080没什么压力。</p>
<h2 id="如何购买Banwagong-VPS"><a href="#如何购买Banwagong-VPS" class="headerlink" title="如何购买Banwagong VPS"></a>如何购买Banwagong VPS</h2><p>官网 <a href="https://bwh1.net/" target="_blank" rel="external">https://bwh1.net/</a> ,可以看到有不同配置VPS，当然价格也是不同 如图：<br><img src="http://of6bvxslc.bkt.clouddn.com/vps_hosting.jpg" alt="产品配置VPS"><br><br></p>
<p>根据需求选择适合的一款，如果只是仅仅学习或者自用VPN选择RAM256也足够用，避免资源浪费，如果你是土豪就当我什么也没有说哈。这里都是以月多少刀计算，也可以选择季度或者半年及一年的周期续费。</p>
<p>选择一款产品后，Product Configuration 配置产品，主要是选择付费周期和服务器机房地域<br><br><br><img src="http://of6bvxslc.bkt.clouddn.com/product.jpg" alt="Product Configuration"><br><br></p>
<p>如果有优惠码可以在 Promotional Code 中填写，点击Checkout 如果没有注册就在订单下面填写用户信息，主要是左侧 Email Address &amp;&amp; Password请认真填写是帐号，最后选择你所支付的方式，默认是境外主流的PayPal，值得一提的是有支持Alipay(支付宝)方式。2.99刀=20.74RMB (2017-05-13)</p>
<p><br><br><img src="http://of6bvxslc.bkt.clouddn.com/FastStoneEditor1.png" alt="支付与注册信息"><br><br></p>
<h2 id="搭建Shadowsocks-VPN"><a href="#搭建Shadowsocks-VPN" class="headerlink" title="搭建Shadowsocks VPN"></a>搭建Shadowsocks VPN</h2><p>这里已经有了VPS，那么还有最后俩步:</p>
<ol>
<li>VPS装一个OS Server</li>
<li>安装Shadowsocks Server</li>
</ol>
<p>首先要进入 VPS KiWiVM管理页面，入口参考:<br><img src="http://of6bvxslc.bkt.clouddn.com/KiWiVMs.jpg" alt="VPS KiWiVM"></p>
<p>到达KiWiVM管理控制页面,<br><img src="http://of6bvxslc.bkt.clouddn.com/KiWiVM_main.jpg" alt="KiWiVM_MAIN"></p>
<p>步骤:</p>
<ol>
<li>在Main controls 里面 <strong>Actions:Stop</strong> 停止</li>
<li>Install new OS 重装系统，这里以 <strong>centos-6-x86_64minimal</strong> 为例，选中，点击Reload</li>
<li>返回Main controls <strong>Actions:    Start</strong> 开启</li>
</ol>
<h3 id="安装Shadowsocks-Server"><a href="#安装Shadowsocks-Server" class="headerlink" title="安装Shadowsocks Server"></a>安装Shadowsocks Server</h3><p>OS Server装载完毕后，就要搭建安装Shadowsocks Server，这里有俩种方式</p>
<ol>
<li><code>通过KiWiVM内置OpenVPN Server进行安装</code></li>
<li><code>通过远程进入OS系统手动安装</code></li>
</ol>
<h4 id="通过OpenVPN-Server进行安装"><a href="#通过OpenVPN-Server进行安装" class="headerlink" title="通过OpenVPN Server进行安装"></a>通过OpenVPN Server进行安装</h4><ol>
<li><p>这种方式贼简单了，在 <strong>OpenVPN Server</strong> 点击 <strong>Install and Configure OpenVPN server</strong> 进行安装和配置OpenVPN服务器</p>
</li>
<li><p>接下里点击 <strong>Shadowsocks Server</strong> 安装 Shadowsocks</p>
</li>
</ol>
<p>成功之后就会看到<br><img src="http://of6bvxslc.bkt.clouddn.com/Xshot-0002.png" alt="Shadowsocks Server"></p>
<h4 id="通过远程进入OS系统手动安装"><a href="#通过远程进入OS系统手动安装" class="headerlink" title="通过远程进入OS系统手动安装"></a>通过远程进入OS系统手动安装</h4><p>可以通过远程的方式登录服务器进行配置，这里需要linux系统一些基本知识，根据不同的平台操作方式不同，特别是Window平台可以通过 PuTTY ssh方式登录进行配置Shadowsocks。</p>
<p>远程服务器需要Python和pip环境，具体如何安装这里方法就很多了。</p>
<p>可以参考：</p>
<p><a href="http://blog.csdn.net/gekkoou/article/details/50839785" target="_blank" rel="external">CentOS 平台配置</a><br><a href="http://blog.lxx1.com/1209" target="_blank" rel="external">Ubuntu 平台配置</a></p>
<h3 id="电脑和手机端如何配置"><a href="#电脑和手机端如何配置" class="headerlink" title="电脑和手机端如何配置"></a>电脑和手机端如何配置</h3><p>电脑客户端需要下载 <strong>Shadowsocks</strong> 客户端, 其实在 <strong>Shadowsocks Server</strong> 下面有对应介绍</p>
<p>Android users: install from Google Play: <a href="https://play.google.com/store/apps/details?id=com.github.shadowsocks" target="_blank" rel="external">Shadowsocks-Android</a></p>
<p>iOS users: install from App Store: <a href="https://www.apple.com/itunes/download/" target="_blank" rel="external">Shadowsocks-iOS</a></p>
<p>For Windows 7  or earlier, download <a href="https://play.google.com/store/apps/details?id=com.github.shadowsocks" target="_blank" rel="external">shadowsocks-win-2.3.zip</a></p>
<p>For Windows 8 or later, download <a href="https://kiwivm.64clouds.com/dist/shadowsocks-win-dotnet4.0-2.3.zip" target="_blank" rel="external">shadowsocks-win-dotnet4.0-2.3.zip</a></p>
<p>Alternatively, you may download the latest version from developer’s website: <a href="http://sourceforge.net/projects/shadowsocksgui/files/dist/" target="_blank" rel="external">http://sourceforge.net/projects/shadowsocksgui/files/dist/</a></p>
<p>Once downloaded, extract the .zip file and launch Shadowsocks.exe</p>
<h3 id="iPhone手机如何配置"><a href="#iPhone手机如何配置" class="headerlink" title="iPhone手机如何配置"></a>iPhone手机如何配置</h3><p><code>App Store 下载 Wingy  进行参数配置</code></p>
<h3 id="Android-手机如何配置"><a href="#Android-手机如何配置" class="headerlink" title="Android 手机如何配置"></a>Android 手机如何配置</h3><p> <code>商城下载 影梭(Shadowsocks) 客户端 进行参数配置</code></p>
<hr>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="Bandwagon如何换服务器机房"><a href="#Bandwagon如何换服务器机房" class="headerlink" title="Bandwagon如何换服务器机房"></a>Bandwagon如何换服务器机房</h4><p>Migration –&gt; Migrate to another DC  【迁移服务器时候注意数据备份】<br><img src="http://of6bvxslc.bkt.clouddn.com/Migrate.jpg" alt="Migrate to another DC"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">美国：纽约[USNY_2]</div><div class="line">美国：加州洛杉矶（DC1 QNET）[USCA_2]（当前）</div><div class="line">美国：洛杉矶，加州（DC2 MCOM）[USCA_4]</div><div class="line">美国：加利福尼亚州弗里蒙特[USCA_FMT]</div><div class="line">美国：亚利桑那州凤凰城[USAZ_2]</div><div class="line">美国：杰克逊维尔，佛罗里达[USFL_2]</div><div class="line">欧盟：荷兰阿姆斯特丹[EUNL_3]</div><div class="line">加利福尼亚州：不列颠哥伦比亚省，温哥华[CABC_1]</div></pre></td></tr></table></figure>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Atom 编辑器]]></title>
      <url>http://nenglee.com/2017/03/03/Atom%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>Atom是Github发布的一款产品，作为一款高效率的编译器，非常适合文字编写从业人员。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<p><a href="https://atom.io/" target="_blank" rel="external">Atom下载地址</a></p>
<p>如果不经常用，一些快捷键都忘记不行不行的，严重影响操作，不爽…</p>
<h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><p><img src="http://of6bvxslc.bkt.clouddn.com/Atom%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE.png" alt="快捷键"></p>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>好的插件让编译器用起来行云流水，Atom提供非常丰富的插件</p>
<h4 id="Atom安装"><a href="#Atom安装" class="headerlink" title="Atom安装"></a>Atom安装</h4><p>打开设置(Settings)  —&gt; Packages [查看当前安装插件]  —&gt; install [需要安装插件]</p>
<p>在Install 搜素 在对应的插件列表点击install安装即可</p>
<p><img src="http://of6bvxslc.bkt.clouddn.com/atom_settings.png" alt="Atom - Settings"></p>
<h4 id="终端安装"><a href="#终端安装" class="headerlink" title="终端安装"></a>终端安装</h4><p>有时候，在Atom里面搜素慢卡错，所以建议终端安装</p>
<p><a href="https://atom.io/packages" target="_blank" rel="external">网页搜索：https://atom.io/packages</a></p>
<p>例如：搜素 <code>autocomplete-python</code> 插件，点击Repo来到Github仓库，地址为url: <code>https://github.com/autocomplete-python/autocomplete-python</code></p>
<p><img src="http://of6bvxslc.bkt.clouddn.com/atom_packages.jpg" alt="点击 Repo"></p>
<h5 id="Atom包管理用法"><a href="#Atom包管理用法" class="headerlink" title="Atom包管理用法"></a>Atom包管理用法</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装指定包</span></div><div class="line">$ apm install &lt;package_name&gt;</div><div class="line"><span class="comment"># 安装指定版本的包</span></div><div class="line">$ apm install &lt;package_name&gt;@&lt;package_version&gt;</div><div class="line"><span class="comment"># 查找包</span></div><div class="line">$ apm search &lt;package_name&gt;</div><div class="line"><span class="comment"># 查看包更多详情</span></div><div class="line">$ apm view &lt;packge_name&gt;</div><div class="line"><span class="comment"># 查看当前已安装包(包含默认Atom捆绑和个人安装)</span></div><div class="line">$ apm list</div></pre></td></tr></table></figure>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#.atom目录中的packges</span></div><div class="line">~/.atom/packages  </div><div class="line">$ ls</div><div class="line">README.md  atom-runner  color-picker  minimap   </div><div class="line"></div><div class="line"><span class="comment">#clone</span></div><div class="line">$ git <span class="built_in">clone</span>  `https://github.com/autocomplete-python/autocomplete-python`</div><div class="line">Cloning into <span class="string">'autocomplete-python'</span>...</div><div class="line">remote: Counting objects: 2312, done.</div><div class="line">remote: Total 2312 (delta 0), reused 0 (delta 0), pack-reused 2312</div><div class="line">Receiving objects: 100% (2312/2312), 589.11 KiB | 8.00 KiB/s, done.</div><div class="line">Resolving deltas: 100% (1446/1446), done.</div><div class="line">Checking connectivity... done.</div><div class="line"></div><div class="line"></div><div class="line">~/.atom/packages</div><div class="line">$ ls</div><div class="line">README.md  atom-runner  autocomplete-python  color-picker  minimap</div><div class="line"></div><div class="line">~/.atom/packages</div><div class="line">$ npm install autocomplete-python   <span class="comment">#install 安装</span></div><div class="line">autocomplete-python@1.8.60 node_modules\autocomplete-python</div><div class="line">├── selector-kit@0.1.0</div><div class="line">├── atom-slick@2.0.0</div><div class="line">├── underscore@1.8.3</div><div class="line">├── mixpanel@0.5.0</div><div class="line">├── fuzzaldrin-plus@0.3.1</div><div class="line">├── kite-installer@0.13.9</div><div class="line">├── atom-space-pen-views@2.1.1 (fuzzaldrin@2.1.0)</div><div class="line">└── space-pen@5.1.2 (jquery@2.1.4, underscore-plus@1.6.6, grim@1.5.0)</div></pre></td></tr></table></figure>
<p>1.<a href="https://atom.io/packages/minimap.git" target="_blank" rel="external">minimap</a></p>
<p>  类似sublim text右边的代码缩略图</p>
<p>2.<a href="https://atom.io/packages/color-picker" target="_blank" rel="external">color-picker</a></p>
<p>  颜色摄取器    </p>
<p>3.<a href="https://atom.io/packages/atom-runner" target="_blank" rel="external">atom-runner</a></p>
<p>  支持JavaScript，CoffeeScript，Ruby和Python</p>
<p>4.<a href="https://atom.io/packages/autocomplete-python" target="_blank" rel="external">autocomplete-python</a></p>
<p>  python自动补全</p>
<p>5.<a href="https://atom.io/packages/python-tools" target="_blank" rel="external">python-tools</a></p>
<p>  python工具</p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016的最后一天]]></title>
      <url>http://nenglee.com/2016/12/31/%E9%9A%8F%E7%AC%94/2016%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>很幸运，2016年的最后一天算在元旦假期</p>
<a id="more"></a>   
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p><strong>2016年给自己定了三个小目标</strong></p>
<ul>
<li>学一门新语言新技术</li>
<li>新款MackBook Pro</li>
<li>父母过来旅游</li>
</ul>
<p>关于学习这件事，一直没有放弃，当时纠结着ios还是Python，是现在小程序，只要坚持学习这件事上，何必又区别内容上的定义</p>
<p>一直想买一台Mac，供货要等到年底，一直没下订单，后来爆出花屏门，好在机智如我，前俩天咨询了客服，定制需要2周左右，到手也就春节，来年新产品稳定再做打算</p>
<p>说到父母，总觉得亏欠太多，一直想让他们过来转一转，深知做父母的都不容易，五一得知父亲大病了一场，加上那个时候发生其他事情,整自己可以用“崩溃”俩个字形容，好在还有时间</p>
<h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><p>再回看这里一年，多多少少会觉得“碌碌无为”而感叹，岁月催人老，也为目标前进，在新项目中学到画图制表，双11图书打折扣买了各种编程教材，买了域名搭建自己网站，坚持学习维护Blog。今年给家人说了几次让他们过来玩，虽然家人特殊情况没有过来，好在暑假妹妹有时间，带着妹妹东转西转的，也是开心坏了，明年暖和了在让家人过来玩。思而学，学而不做，则有害了，一些事去做了，至少心无遗憾，怕就怕在只是想想而已。</p>
<h2 id="感情"><a href="#感情" class="headerlink" title="感情"></a>感情</h2><p>海子在书中写到:</p>
<p><code>今夜我不关心人类，我只想你</code></p>
<p>此时 若你安好，祝福你<br>此时 若你依旧在那里<br>来年 我继续爱你</p>
<h2 id="祝语"><a href="#祝语" class="headerlink" title="祝语"></a>祝语</h2><p>2016年眼看就要过去</p>
<p><code>祝愿家人和朋友： 身体健康、幸福快乐</code></p>
<p>2017年~ 你好！</p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序的移动互联网]]></title>
      <url>http://nenglee.com/2016/12/28/%E9%9A%8F%E7%AC%94/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91/</url>
      <content type="html"><![CDATA[<p>小程序要来了！</p>
<p>很早就注意这玩意，就是不知道具体是什么鬼？从字面来理解大概是：一种容量特别小的App吧！</p>
<p>后来微信团队张小龙把小程序类比成桌面互联网时代的网站：<strong>无需安装、触手可及、用完即走</strong></p>
<a id="more"></a>
<p><br></p>
<h2 id="回顾小程序"><a href="#回顾小程序" class="headerlink" title="回顾小程序"></a><strong>回顾小程序</strong></h2><ul>
<li><p>2016年1月11日，微信之父张小龙时隔多年的公开亮相，解读了微信的四大价值观，张小龙指出，越来越多产品通过公众号来做，因为这里开发、获取用户和传播成本更低，拆分出来的服务号并没有提供更好的服务，所以微信内部正在研究新的形态，叫「微信小程序」</p>
</li>
<li><p>2016年9月21日，微信小程序正式开启内测，在微信生态下，触手可及、用完即走的微信小程序引起广泛关注，腾讯云正式上线微信小程序解决方案，提供小程序在云端服务器的技术方案</p>
</li>
<li><p>2016年11月3号晚间，微信公众平台发布公告，宣布微信小程序正式开放公测，这本是微信的“小测试”，却引发了朋友圈刷屏，此次小程序公测，开发者可登陆微信公众平台申请，并允许将产品提交至微信公众平台审核，但暂时不支持发布</p>
</li>
<li><p>2016年12月28日上午，微信2017年的公开课在广州开讲，并且确定 <font color="#FF5B5B">小程序将于2017年1月9日上线</font></p>
</li>
</ul>
<p><br><br><strong>这次公开课ORP,张小龙对小程序FAQ：</strong></p>
<ol>
<li><p>小程序不能推送消息</p>
</li>
<li><p>小程序在微信里没有入口，用户通过扫码直接使用小程序</p>
</li>
<li><p>微信不会做小程序商店，不考虑做基于小程序的“流量分发”</p>
</li>
<li><p>小程序不能分享到朋友圈，但可以分享到群聊和聊天</p>
</li>
<li><p>小程序页，分享到群里的信息是活的</p>
</li>
<li><p>小程序不能做游戏</p>
</li>
<li><p>小程序没有粉丝,只有浏览量</p>
</li>
<li><p>小程序能搜到，但只提供有限的搜索能力（用户触到才出现，不主动推荐）</p>
</li>
<li><p>小程序和公众号相互独立（相同企业的两者可以跳转）</p>
</li>
<li><p>会有LBS小程序提示</p>
</li>
<li><p>2017.1.9号小程序上线开放</p>
</li>
</ol>
<p>目前可以很清晰晓得小程序的是通过二维码扫进去，抹去安装琐碎流程，就有点像App的网页版味道，既然没有安装，就没有像AppStore商店聚集处。最开始还担心微信要搞个OS，如果这样话那就过分了，猜想Apple可能是第一个反对，怎能在地主家抢地盘。</p>
<p>张小龙讲到，PC-Web时代通常查看内容，通过搜索引擎【扫二维码】，浏览/操作需要的内容【触手可及】，用完就走不留痕迹，相信微信8.02亿(2016Q3)用户，如果顺利把入口打开，不久的将来，到处都是二维码，包括你家楼下的小广告都是二维码，是不是很喜感，哈哈~ 关于二维码这俩年已经非常普及，从最开始安全验证、扫码下载，扫码支付，十天后你也可以扫码启动小程序</p>
<p>我试想了这样的一个场景：</p>
<p>去餐厅吃饭，目前很多餐厅支持ipad点餐，服务员带你入座，虽然这种方式没所有普及，也许小程序大红大紫时候，连服务员都要减半，再来到餐厅自己爱座哪里座哪里，然后拿出手机扫桌子上的二维码，然后点点点，再然后一气呵成的按下支付走完整个流程</p>
<p>有没有觉得更加(方便|自由)？让我想起了PC-Web时代的 <a href="https://www.hao123.com/" target="_blank" rel="external">hao123.com</a></p>
<p>很佩服张小龙狠狠的抓到“入口”这个点，有入口门槛就有更多用户，更多用户依赖，更多流量</p>
<font color="#388AD2"><strong>可是互联网后背的布局与心酸谁又懂了？</strong></font>


<p><br></p>
<h2 id="几家欢喜几家愁"><a href="#几家欢喜几家愁" class="headerlink" title="几家欢喜几家愁"></a><strong>几家欢喜几家愁</strong></h2><p>移动端互联网到目前阶，已经到了分水岭，寒冬已经让实力薄弱企业倒下，跟不上的从事者失业，优胜劣汰，从中竞争脱颖而出才能笑到最后</p>
<ul>
<li><p>Uber和滴滴补贴大战中，最终达成协议滴滴收购中国Uber</p>
</li>
<li><p>外卖e饿了么、美团、百度还在相互伤害</p>
</li>
<li><p>共享智能单车大营，摩拜单车和oFo小黄车、据说小米也要扎进来搞个”小白单车” (看这趋势开年又是要干的节奏)</p>
</li>
<li><p>最近阿里推出春节Ar红包，微信说今年过年不搞红包，微信只是一个工具 (小程序)</p>
</li>
<li><p>…</p>
</li>
</ul>
<p><br><br>从自身的角度看技术，何尝又不是</p>
<p>那时候移动互联网技术刚刚起步，用的技术都是原生API</p>
<p>这几年技术成熟，给用户更好的体验，来各种框架、插件，热补丁</p>
<p>创业公司加速形成产品各种混合开发</p>
<p>AR视觉技术</p>
<p><br><br>最后写给自己和读者：</p>
<p>你几分付出就有几分回报</p>
<p>就像高速飞行鸟，容不得停顿</p>
<p>怕极了坠落，但是依然相信明天</p>
<p>如同一个朋友签名中所说:</p>
<p><strong><font color="#FF5B5B">未来的幸运，都是过往努力的积攒</font></strong></p>
<p><br><br>最后附上：<br><a href="http://daxue.qq.com/content/content/id/3109" target="_blank" rel="external">张小龙微信2017公开课ORP视频</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式]]></title>
      <url>http://nenglee.com/2016/12/24/Pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>谈一下设计模式（Design pattern），设计模式并不直接用来完成代码的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案。面向对象设计模式通常以类别或对象来描述其中的关系和相互作用，但不涉及用来完成应用程序的特定类别或对象。设计模式能使不稳定依赖于相对稳定、具体依赖于相对抽象，避免会引起麻烦的紧耦合，以增强软件设计面对并适应变化的能力。<br><a id="more"></a></p>
<p>简单的说就是：在编程方面让代码重用、更容易被他人理解、保证代码可靠性，一种编程思想，整体的逻辑是通过设计构思出来，从抽象与实现，让业务逻辑清新</p>
<p>编程道路上，如果仅仅停留在需求功能层面很片面，没有站到宏观的层面来编程，好的程序是设计出来的，在设计中会考虑各方面问题，以及功能、需求、维护，写出来的代码更加赏心悦目，特别是在后期的升级，维护更加简洁，不必动干戈。</p>
<p>23种设计模式，可大致分为三大类</p>
<ul>
<li>创建型模式</li>
<li>行为模式</li>
<li>结构型模式</li>
</ul>
<p><img src="http://of6bvxslc.bkt.clouddn.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.png" alt="设计模式"></p>
<ol>
<li><a href="http://nenglee.com/2016/11/04/Pattern/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/">单例模式 (Singleton)</a></li>
<li><a href="http://nenglee.com/2016/11/05/Pattern/Builder%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/">Builder建造者模式</a></li>
<li><a href="http://nenglee.com/2016/11/07/Pattern/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/">原型模式</a></li>
<li><a href="http://nenglee.com/2016/11/08/Pattern/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/">工厂模式</a></li>
<li><a href="http://nenglee.com/2016/11/10/Pattern/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/">抽象工厂模式</a></li>
<li><a href="http://nenglee.com/2016/11/15/Pattern/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/">策略模式</a></li>
<li><a href="http://nenglee.com/2016/11/15/Pattern/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/">状态模式</a></li>
<li><a href="http://nenglee.com/2016/11/17/Pattern/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/">责任链模式</a></li>
<li><a href="http://nenglee.com/2016/12/05/Pattern/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/">解释器模式</a></li>
<li><a href="http://nenglee.com/2016/12/05/Pattern/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/">命令模式</a></li>
<li><a href="http://nenglee.com/2016/12/06/Pattern/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/">观察者模式</a></li>
<li><a href="http://nenglee.com/2016/12/12/Pattern/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/">备忘录模式</a></li>
<li><a href="http://nenglee.com/2016/12/13/Pattern/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/">迭代器模式</a></li>
<li><a href="http://nenglee.com/2016/12/13/Pattern/%E6%A8%A1%E7%89%88%E6%A8%A1%E5%BC%8F/">模版模式</a></li>
<li><a href="http://nenglee.com/2016/12/14/Pattern/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/">访问者模式</a></li>
<li><a href="http://nenglee.com/2016/12/15/Pattern/%E4%B8%AD%E4%BB%8B%E6%A8%A1%E5%BC%8F/">中介模式</a></li>
<li><a href="http://nenglee.com/2016/12/17/Pattern/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/">代理模式</a></li>
<li><a href="http://nenglee.com/2016/12/17/Pattern/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/">组合模式</a></li>
<li><a href="http://nenglee.com/2016/12/19/Pattern/%E9%80%82%E9%85%8D%E6%A8%A1%E5%BC%8F/">适配器模式</a></li>
<li><a href="http://nenglee.com/2016/12/20/Pattern/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/">装饰模式</a></li>
<li><a href="http://nenglee.com/2016/12/21/Pattern/%E4%BA%A8%E5%85%83%E6%A8%A1%E5%BC%8F/">亨元模式</a></li>
<li><a href="http://nenglee.com/2016/12/22/Pattern/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/">外观模式</a></li>
<li><a href="http://nenglee.com2016/12/23/Pattern/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/" target="_blank" rel="external">桥接模式</a></li>
</ol>
<p>以上所有设计模式的案例code可以在 <a href="https://github.com/lineng11/DesingPatter" target="_blank" rel="external">https://github.com/lineng11/DesingPatter</a></p>
<p>感谢:<br>《Android 源码设计模式 解析与实践》 – 何红辉 关爱民</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[桥接模式]]></title>
      <url>http://nenglee.com/2016/12/23/Pattern/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>桥接模式也称桥梁模式，桥梁就连接河道俩岸的主要交通枢纽，简言而之起作用就是连接河的俩边，而我们的桥接模式与现实的情况很相似，也是承担连接“俩便”的作用。</p>
<a id="more"></a>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>将抽象部分与现实部分分离，使它们都可以独立地进行变化。</p>
<h3 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h3><p><img src="http://of6bvxslc.bkt.clouddn.com/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.png" alt="桥接模式"></p>
<p>模拟咖啡馆销售咖啡类型以 杯子(大、小) 味道(原味、加糖) 可以相互搭配,</p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol>
<li>Coffee：抽象咖啡</li>
<li>LargeCoffee：大杯咖啡</li>
<li>SmallCoffee：小杯咖啡</li>
<li>CoffeeAdditives：抽象咖啡添加剂</li>
<li>Ordinary：咖啡原味</li>
<li>Sugar：咖啡糖</li>
</ol>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/bridge/Coffee.java" target="_blank" rel="external">Coffee.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 咖啡</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/24.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> CoffeeAdditives impl;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Coffee</span><span class="params">(CoffeeAdditives impl)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.impl = impl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 咖啡添加剂</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">makeCoffee</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/bridge/LargeCoffee.java" target="_blank" rel="external">LargeCoffee.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 大咖啡</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/24.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LargeCoffee</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String TAG = <span class="keyword">this</span>.getClass().getSimpleName();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LargeCoffee</span><span class="params">(CoffeeAdditives impl)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(impl);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeCoffee</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"makeCoffee: 大杯 "</span> + impl.addSomething() + <span class="string">" 咖啡"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/bridge/SmallCoffee.java" target="_blank" rel="external">SmallCoffee.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 小咖啡</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/24.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmallCoffee</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String TAG = <span class="keyword">this</span>.getClass().getSimpleName();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmallCoffee</span><span class="params">(CoffeeAdditives impl)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(impl);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeCoffee</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"makeCoffee: 小杯 "</span> + impl.addSomething() + <span class="string">"  咖啡"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/bridge/CoffeeAdditives.java" target="_blank" rel="external">CoffeeAdditives.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 添加剂</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/24.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeAdditives</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 具体要往咖啡里面添加什么由子类实现</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">addSomething</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/bridge/Ordinary.java" target="_blank" rel="external">Ordinary.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 普通原味</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/24.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ordinary</span> <span class="keyword">extends</span> <span class="title">CoffeeAdditives</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"原味"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/bridge/Sugar.java" target="_blank" rel="external">Sugar.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 咖啡 糖</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/24.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sugar</span> <span class="keyword">extends</span> <span class="title">CoffeeAdditives</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"加糖"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>桥接模式可以应用到很多开发中，一个很重要的原因对于抽象与实现的分离把握，是不是要分离、如何分离？对设计者来说要有一个恰到好处的分寸，不管怎么说，桥接模式的优点毋庸置疑，分离抽象与实现、灵活扩展以及对客户端来说透明的实现，但是桥接模式也有缺点，不容易设计，对开发者来说要有一定的经验，因此来说理解很简单，设计不易。</p>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/bridge" target="_blank" rel="external">桥接模式 案例参考code</a></p>
</excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[外观模式]]></title>
      <url>http://nenglee.com/2016/12/22/Pattern/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">


<p>外观模式在开发过程中的运行非常频繁，尤其在现阶段各种第三方SDK、框架JAr，而这些SDK很大概率会使用外观模式。通过一个外观类使得整个接口只有一个统一的高层接口，这样能够降低用户使用成本，也对用户屏蔽了很多实现细节，当然、在我们的开发过程中，外观模式也是我们封装API的常用手段，例如网络模块，图片加载模块，可能你在开发过程中运用无数次外观模式，只是没有在理论层面去认知。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>要求一个子类系统的外部与其内部的通信必须通过一个统一的对象进行，外观模式提供了一个高层次的接口，使得子系统更易于调用。</p>
<h3 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h3><p><img src="http://of6bvxslc.bkt.clouddn.com/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.png" alt="外观模式"></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol>
<li>MobilePhone：系统统一对外接口，也是系内内部组合类以及方法组合。</li>
<li>Phone和Camera：抽象业务接口</li>
<li>PhoneImpl和SamsungCamera：具体业务对象</li>
</ol>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/facade/PhoneImpl.java" target="_blank" rel="external">PhoneImpl.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/22.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneImpl</span> <span class="keyword">implements</span> <span class="title">Phone</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String TAG = <span class="keyword">this</span>.getClass().getSimpleName();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dail</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"dail: 打电话"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hangup</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"hangup: 挂断"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/facade/SamsungCamera.java" target="_blank" rel="external">SamsungCamera.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/22.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SamsungCamera</span> <span class="keyword">implements</span> <span class="title">Camera</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String TAG = <span class="keyword">this</span>.getClass().getSimpleName();</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"open: 打开相机"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takePicture</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"takePicture: 拍照"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"close: 关闭相机"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/facade/MobilePhone.java" alt="MobilePhone.java"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/22.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MobilePhone</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Phone phone = <span class="keyword">new</span> PhoneImpl();</div><div class="line">    <span class="keyword">private</span> Camera camera = <span class="keyword">new</span> SamsungCamera();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dail</span><span class="params">()</span> </span>&#123;</div><div class="line">        phone.dail();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">videoChat</span><span class="params">()</span> </span>&#123;</div><div class="line">        camera.open();</div><div class="line">        phone.dail();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hangup</span><span class="params">()</span> </span>&#123;</div><div class="line">        phone.hangup();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takePicture</span><span class="params">()</span> </span>&#123;</div><div class="line">        camera.open();</div><div class="line">        camera.takePicture();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeCamera</span><span class="params">()</span> </span>&#123;</div><div class="line">        camera.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>大概理解外观模式定义用法，在回想写过的项目很多地方都显而易见，只是很多人对理论层次不够追求，总体来说用法易简，它的精髓就在在于封装，通过一个高层次的结构为用户提供API的入口，使得用户通过一个类型就基本操作整个系统，这样减少用户的使用成本，也能够提高系统的灵活性。</p>
<p>优点：</p>
<ol>
<li>对客户端隐藏子类系细节，因此减少客户对于子系统的耦合，能够拥有变化</li>
<li>外观类对子类系统的接口封装，使得系统更易于使用</li>
</ol>
<p>缺点：</p>
<ol>
<li>外观类接口膨胀，由于系统的接口都有外观类统一对外暴露，使得外观类API接口方法较多，定义要够清晰</li>
<li>外观类没有遵守开闭原则，当业务出现变化时候，可能需要直接修改外观类</li>
</ol>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/facade" target="_blank" rel="external">外观模式 案例参考code</a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[亨元模式]]></title>
      <url>http://nenglee.com/2016/12/21/Pattern/%E4%BA%A8%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>亨元模式是对象池的一种实现，用来尽可能减少内存的用量，它适合用于可能存在大量重复对象的场景，来缓存可共享的对象，达到对象的共享、避免创建过多的对象效果，这样一来就可以提升性能，避免内存移除等..<br>亨元对象中部分状态是可以共享的，可以共享的状态成为内部状态，内部状态不会随着环境变化，不可共享的状态则称为外部共享，它们会随着环境变化改变而改变，在亨元模式中会建立一个对象容器，在经典亨元模式内部有一个容器Map，它的键是亨元对象的内部状态，他的值是亨元对象的本身，否则创建一个亨元对象并且存入容器，这样就可以避免重复的new多个对象。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>使用共享对象可有效地支持大量的细粒度对象</p>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ol>
<li>系统中存在大量相似对象</li>
<li>细粒度的对象都是具备接近相似的外部状态，而且内部状态与环境无关，俗称没有特定身份</li>
<li>需要缓冲池对象</li>
</ol>
<h3 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h3><p><img src="http://of6bvxslc.bkt.clouddn.com/%E4%BA%A8%E5%85%83%E6%A8%A1%E5%BC%8F.png" alt="亨元模式"></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol>
<li>Ticket：享元对象抽象类</li>
<li>TrainTicket：具体亨元对象</li>
<li>TicketFactory：亨元工厂，内部有一个Map作为亨元对象的存储</li>
</ol>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/flyweight/Ticket.java" target="_blank" rel="external">Ticket.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 享元对象抽象类</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/21.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Ticket</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 车票信息</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> from 出发地</div><div class="line">     * <span class="doctag">@param</span> to   终点地</div><div class="line">     * <span class="doctag">@param</span> bunk 座位</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showTicketInfo</span><span class="params">(String from, String to, String bunk)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/flyweight/TrainTicket.java" target="_blank" rel="external">TrainTicket.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 具体 享元对象</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/21.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrainTicket</span> <span class="keyword">implements</span> <span class="title">Ticket</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//始发地</span></div><div class="line">    <span class="keyword">public</span> String from;</div><div class="line">    <span class="comment">//目的地</span></div><div class="line">    <span class="keyword">public</span> String to;</div><div class="line">    <span class="comment">//铺位</span></div><div class="line">    <span class="keyword">public</span> String bunk;</div><div class="line">    <span class="comment">//价钱</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> price;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showTicketInfo</span><span class="params">(String from, String to, String bunk)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.from = from;</div><div class="line">        <span class="keyword">this</span>.to = to;</div><div class="line">        <span class="keyword">this</span>.bunk =bunk;</div><div class="line">        price = <span class="number">100</span>;</div><div class="line">        <span class="keyword">switch</span> (bunk) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">"硬座"</span>:</div><div class="line">                price = price * <span class="number">1</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"下铺"</span>:</div><div class="line">                price = price * <span class="number">3</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"上铺"</span>:</div><div class="line">                price = price * <span class="number">5</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"商务"</span>:</div><div class="line">                price = price * <span class="number">10</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        price = <span class="keyword">new</span> Random().nextInt(price);</div><div class="line">        Log.d(getClass().getSimpleName(), <span class="string">"showTicketInfo: 购买到从："</span> + from + <span class="string">" --- "</span> + to + <span class="string">" 的 "</span> + bunk + <span class="string">" 火车票, 价格："</span> + price);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/flyweight/TicketFactory.java" target="_blank" rel="external">TicketFactory.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 享元工厂</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/21.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketFactory</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">static</span> Map&lt;String, Ticket&gt; stringTicketMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Ticket <span class="title">getTicket</span><span class="params">(String from, String to, String bunk)</span> </span>&#123;</div><div class="line">        Ticket ticket = <span class="keyword">null</span>;</div><div class="line">        String key = from + <span class="string">" - "</span> + to + <span class="string">" - "</span> + bunk;</div><div class="line">        <span class="comment">//Map是否存在对应的车票信息</span></div><div class="line">        <span class="keyword">if</span> (stringTicketMap.containsKey(key)) &#123;</div><div class="line">            ticket = stringTicketMap.get(key);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            ticket = <span class="keyword">new</span> TrainTicket();</div><div class="line">            ticket.showTicketInfo(from, to, bunk);</div><div class="line">            stringTicketMap.put(key, ticket);</div><div class="line">            <span class="keyword">return</span> ticket;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ticket;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>在亨元工厂中对象共享的数据都存放在Map中，这样避免相同的数据下次继续创建，可以通过key来取出</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>亨元模式比较简单，但是它的作用某些场景及其重要性，它可以减少应用程序的创建对象，降低内存的占用，增强程序的性能，但它也提高了系统的复杂性，需要分离出外部状态和内部状态，而且外部状态具体固定性，不随环境变化，不然就会导致逻辑混乱。</p>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/flyweight" target="_blank" rel="external">亨元模式 案例参考code</a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[装饰模式]]></title>
      <url>http://nenglee.com/2016/12/20/Pattern/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>装饰模式也称包装模式，结构设计模式之一，其使用一种对客户端透明的方式来动态的扩展对象的功能，同时它也是继承关系的一种替代方案之一，在现实生活中你也可以看到很多装饰模式，例如人都要穿衣服，可以是衣服的类型有很多类型，起到了一个装饰效果。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式相比生成的子类更加灵活。</p>
<h3 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h3><p><img src="http://of6bvxslc.bkt.clouddn.com/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.png" alt="装饰模式"></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol>
<li>Person：抽象类组件人的穿着</li>
<li>Boy：实现具体男孩穿着</li>
<li>PersonCloth：抽象类装饰者</li>
<li>CheapCloth：装饰者具体实现，一个屌丝穿着</li>
<li>ExpensiveCloth：装饰者具体实现，一个高富帅穿着</li>
</ol>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/decorator/Person.java" target="_blank" rel="external">Person.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 抽象人</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/20.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Person 穿着抽象方法</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">dressed</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/decorator/Boy.java" target="_blank" rel="external">Boy.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 具体人的实现</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/20.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boy</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(getClass().getSimpleName(),<span class="string">"穿了内衣"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/decorator/PersonCloth.java" target="_blank" rel="external">PersonCloth.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 抽象装饰</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/20.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonCloth</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Person person;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonCloth</span><span class="params">(Person person)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.person = person;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Person 穿着抽象方法</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        person.dressed();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/decorator/ExpensiveCloth.java" target="_blank" rel="external">ExpensiveCloth.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 高档的衣服</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/20.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpensiveCloth</span> <span class="keyword">extends</span> <span class="title">PersonCloth</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExpensiveCloth</span><span class="params">(Person person)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(person);</div><div class="line">        Log.d(getClass().getSimpleName(), <span class="string">"ExpensiveCloth: 高档"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.dressed();</div><div class="line">        dressShirt();</div><div class="line">        dressLeather();</div><div class="line">        derssJean();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 穿短袖</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dressShirt</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(getClass().getSimpleName(), <span class="string">"dressShirt: 穿短袖"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 穿皮衣</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dressLeather</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(getClass().getSimpleName(), <span class="string">"dressLeather: 穿件皮衣"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 穿牛仔裤</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">derssJean</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(getClass().getSimpleName(), <span class="string">"derssJean: 穿牛仔裤"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>装饰者模式是以客户端透明的方式扩展对象的功能，是继承关系的一种代替方案，看上去和代理模式有点混淆，而代理模式是给一个对象提供代理对象，并没有代理对象来控制对原有的对象引用，装饰模式为所装饰对象内部功能方法的一种增强。</p>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/decorator" target="_blank" rel="external">装饰模式 案例参考code</a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[适配模式]]></title>
      <url>http://nenglee.com/2016/12/19/Pattern/%E9%80%82%E9%85%8D%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>相信从事过移动端，对于适配器模式一定不会模式，例如Android中的适配器，从早起的ListView、GridView到目前RecyclerView都需要数据的自己的适配，来填充数据。<br>那么问题？什么是适配器？适配器就将俩个不同兼容的对象数据融合在一起，融化成一个对象，并且这个对象同时拥有俩对象的数据，特别是一个对象需要另一个对象数据的依赖，如果把数据抽出来形成一个空壳，那么这样适配就成为一个共同某一种对象使用的工具类。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>适配器把一个类的接口变成客户端所期待的另一种接口，从而使得原本因接口不匹配而无法在一起工作的俩个类能够在一起工作。</p>
<h3 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h3><p><img src="http://of6bvxslc.bkt.clouddn.com/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.png" alt="适配器模式"></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>例如：一台笔记本需要的电压是5V工作，目前我们的压力是220v，那么就需要电压转换器类适配一个5v</p>
<ul>
<li>Targer：接口定义笔记本需要的5v接口</li>
<li>Adaptee：一个220v工作对象</li>
<li>Adapter：核心适配器，实现Targer接口，得到具体5v函数，并且通过Adaptee对象来转换</li>
</ul>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/adapter/FiveVolt.java" target="_blank" rel="external">FiveVolt.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Targer 角色</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/19.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FiveVolt</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 5v 电压</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getVolt5</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/adapter/Volt220.java" target="_blank" rel="external">Volt220.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Adaptee 角色需要被转换的对象</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/19.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Volt220</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 220V 电压</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVolt220</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">220</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/adapter/VoltAdapter.java" target="_blank" rel="external">VoltAdapter.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 适配器</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/19.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltAdapter</span> <span class="keyword">implements</span> <span class="title">FiveVolt</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Volt220 volt220;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VoltAdapter</span><span class="params">(Volt220 volt220)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.volt220 = volt220;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 220V 电压</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVolt220</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> volt220.getVolt220();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVolt5</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getVolt220() - <span class="number">215</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>适配器模式只要明白就是把不同的对象类，或者是需要的数据以接口定义，然后通过Apdate融合成一个对象，并且该对象都有被融合的函数适合，适配器公共对象。</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>适配器adapterd的经典实现在于原本不兼容的接口融合在一起，使之能够很好的进行合作。<br>优点：</p>
<ol>
<li>更好的复用性</li>
<li>扩展性强</li>
</ol>
<p>缺点：</p>
<ol>
<li>过多使用适配器，会让系统非常的零乱，不易整体把控。</li>
</ol>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/adapter" target="_blank" rel="external">适配器模式 案例参考code</a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[组合模式]]></title>
      <url>http://nenglee.com/2016/12/17/Pattern/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>组合模式也称为部分整体模式，结构设计模式一，组合模式比较简洁，它将一组相似的对象看作一个对象处理，并根据一个树状的结构来组合对象，然后提供一个统一的方法去访问相对应的对象，以此忽略对象与对象集合之间的差别，如同生活中部分组织，有Boos管理高层，高层管理上层，上层管理中层这种层次之间组合。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>将对象组合成树状结构表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。</p>
<h3 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h3><p><img src="http://of6bvxslc.bkt.clouddn.com/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.png" alt="组合模式"></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol>
<li>Dir：文件夹和文件的抽象类，并且定义这俩者的抽象方法</li>
<li>Folder：具体文件夹，可以在文件夹下面添加文件夹或者是文件 addDir(Dir)…</li>
<li>File：具体的文件，那当前文件也具备自己的特征，其部分特征和文件夹一样</li>
</ol>
<p>根据模型图的流程，用组合模式就可以把文件夹和文件这俩个相似的对象，同时进行管理。</p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/composite/Dir.java" target="_blank" rel="external">Dir.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 文件和文件夹的抽象类</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Dir</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> List&lt;Dir&gt; dirs = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dir</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * add 文件或文件夹</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> dir</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addDir</span><span class="params">(Dir dir)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * rm 文件或文件夹</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> dir</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">rmDir</span><span class="params">(Dir dir)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 清空文件夹下面的所有元素</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 输出目录下的所有元素</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取文件夹下面的所有文件或子文件夹</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> List&lt;Dir&gt; <span class="title">getFiles</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取文件或文件夹名</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/composite/Folder.java" target="_blank" rel="external">Folder.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 文件夹</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Folder</span> <span class="keyword">extends</span> <span class="title">Dir</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String TAG = <span class="keyword">this</span>.getClass().getSimpleName();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Folder</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDir</span><span class="params">(Dir dir)</span> </span>&#123;</div><div class="line">        dirs.add(dir);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rmDir</span><span class="params">(Dir dir)</span> </span>&#123;</div><div class="line">        dirs.remove(dir);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        dirs.clear();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"文件夹： "</span> + getName());</div><div class="line">        ListIterator iterator = dirs.listIterator();</div><div class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">            Dir dir = (Dir) iterator.next();</div><div class="line">            dir.print();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dir&gt; <span class="title">getFiles</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> dirs;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="&quot;https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/composite/Folder.java&quot;">File.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 文件夹</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Folder</span> <span class="keyword">extends</span> <span class="title">Dir</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String TAG = <span class="keyword">this</span>.getClass().getSimpleName();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Folder</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDir</span><span class="params">(Dir dir)</span> </span>&#123;</div><div class="line">        dirs.add(dir);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rmDir</span><span class="params">(Dir dir)</span> </span>&#123;</div><div class="line">        dirs.remove(dir);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        dirs.clear();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"文件夹： "</span> + getName());</div><div class="line">        ListIterator iterator = dirs.listIterator();</div><div class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">            Dir dir = (Dir) iterator.next();</div><div class="line">            dir.print();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dir&gt; <span class="title">getFiles</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> dirs;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>组合模式一定要有相似性的俩个或多个对象直接进行管理，有一定的树结构的关系，一般在移动端多以UI层管理呈现比较多。<br>优点：</p>
<ol>
<li>组合模式可以分清定义的层次复杂对象，表示对象的全部或部分层次，它让高层模块忽略层次差异，方便整个层次结构进行控制</li>
<li>组合模式新加新的枝干或叶子都很方便，无需对现有的库进行任何修改，符合”开闭”</li>
<li>组合模式为树状结构的面向对象实现提供一种灵活解决方案，通过叶子对象和枝干对象的递归组合，可以形成复杂的树状结构，但对树形的控制非常简单</li>
</ol>
<p>缺点：</p>
<ol>
<li>在新增构件时不好对树干中的构件类型进行限制，不能依赖类系统的施加约束，在大多情况下，树干和树叶都依赖相同的抽象层。</li>
<li>抽象层新增函数，具体子类都要实现。</li>
</ol>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/composite" target="_blank" rel="external">组合模式 案例参考code</a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[代理模式]]></title>
      <url>http://nenglee.com/2016/12/17/Pattern/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>代理模式又名委托模式，何为代理？例如你要上Google因为特殊因素，就需要vpn代理进行，在例如午餐让同事帮忙带一份外卖…<br>那么在程序中，当无法或者不想直接访问某一个对象，可以通过一个代理对象来间接访问，为了保证客户端的透明性，这时候委托对象与代理对象需实现相同的接口。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>为其他对象提供一个代理以控制对这个对象的访问</p>
<h3 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h3><p><img src="http://of6bvxslc.bkt.clouddn.com/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.png" alt="代理模式"></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li>Subject：抽象主题</li>
<li>RealSubject：真实主题子类</li>
<li>ProxySubject：代理类</li>
<li>Client：客户端</li>
</ul>
<blockquote>
<p>通过代理模版图可以看到客户端要实现具体的一个 visit()业务，本身可以直接new RealSubjext进行，但是考虑代理因素，就让代理类ProxySubject来实现，那么代理类就需要具体类RealSubject的对象，客户端间接通代理来实现自己的业务。</p>
</blockquote>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/proxy/stencil" target="_blank" rel="external">代理模式模版</a></p>
<p>为了更加清晰理解代理模式，我们实现一个公司拖欠员工薪资问题，所以就请了一个代理律师来解决问题。</p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/proxy/dome/ILawsuit.java" target="_blank" rel="external">ILawsuit.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 抽象诉讼业务</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ILawsuit</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 提交申请</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">submit</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 进行举证</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">burden</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 开始辩论</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">defend</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 诉讼完成</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">finish</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/proxy/dome/XiaoMin.java" target="_blank" rel="external">XiaoMin.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 诉讼人</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoMin</span> <span class="keyword">implements</span> <span class="title">ILawsuit</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String TAG = <span class="keyword">this</span>.getClass().getSimpleName();</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"submit: 公司Boos拖欠薪资，提出申请仲裁"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">burden</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"burden: 合同证明，过去薪资流水记录清单"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">defend</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"defend: 证据充足"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"finish: XiaoMIn诉讼成功，判7个工作日还清薪资+补偿"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/proxy/dome/Lawyer.java" target="_blank" rel="external">Lawyer.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lawyer</span> <span class="keyword">implements</span> <span class="title">ILawsuit</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> XiaoMin xiaoMin;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Lawyer</span><span class="params">(XiaoMin xiaoMin)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.xiaoMin = xiaoMin;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">()</span> </span>&#123;</div><div class="line">        xiaoMin.submit();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">burden</span><span class="params">()</span> </span>&#123;</div><div class="line">        xiaoMin.burden();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">defend</span><span class="params">()</span> </span>&#123;</div><div class="line">        xiaoMin.defend();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">()</span> </span>&#123;</div><div class="line">        xiaoMin.finish();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>代理模式还可以细分为</p>
<ol>
<li>静态代理</li>
<li>动态代理</li>
</ol>
<p>上述的案例就是静态代理，因为代理人只带要给谁代理，委托人很明确，那么动态代理而相反，代理人不知道委托人，不代表没人不找律师？代理人可以把自己的业务上线挂牌，等待需要代理人出现。</p>
<p>动态代理：通过反射机制动态的生成代理对象，也就是代理人根本不知道代理谁，而java也给我们提供了一个便捷的动态代理接口 <font color="#F79646"> InvocationHandler </font> 动态代理人实现，并且重写  <font color="#F79646"> invoke(Object proxy, Method method, Object[] args) throws Throwable </font> 返回委托人Obj。</p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/proxy/dome/DynamicProxy.java" target="_blank" rel="external">DynamicProxy.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 动态代理人</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Object obj;  <span class="comment">//被代理的类引用</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxy</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.obj = obj;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="comment">//委托者对象方法</span></div><div class="line">        Object result = method.invoke(obj, args);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/activity/ProxyActivity.java" target="_blank" rel="external">ProxyActivity.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">DynamicProxy dynamicProxy = <span class="keyword">new</span> DynamicProxy(xiaoMin);</div><div class="line">ClassLoader mClassLoader = xiaoMin.getClass().getClassLoader();</div><div class="line"><span class="comment">//动态构造一个代理律师</span></div><div class="line">ILawsuit mILawsuit = (ILawsuit) Proxy.newProxyInstance(mClassLoader, <span class="keyword">new</span> Class[]&#123;ILawsuit.class&#125;, dynamicProxy);</div><div class="line"><span class="comment">//律师代理诉讼</span></div><div class="line">mILawsuit.submit();</div><div class="line">mILawsuit.burden();</div><div class="line">mILawsuit.defend();</div><div class="line">mILawsuit.finish();</div></pre></td></tr></table></figure></p>
<blockquote>
<p>getClassLoader()  此方法返回此对象所表示的类或接口的类加载器加载。</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>代理模式应用广泛，似乎找不到缺点所在，并且用用起来非常简单，当然代理模式可以扩展多层代理，也可以使用动态代理，总体来说代理模式就是解决对象与对象之间间接调用。</p>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/proxy" target="_blank" rel="external">代理模式 案例参考code</a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[中介模式]]></title>
      <url>http://nenglee.com/2016/12/15/Pattern/%E4%B8%AD%E4%BB%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>中介模式从字面来理解就突出“中介”的特点，说到中介就想到租房、中间者，生活中我们把一些事情交给第三者来处理，来达到自我的需求。那么程序上也是可以这样，例如一台电脑的组成几个部件如：CPU、CD光驱、显卡、声卡几个固件，现在拿到了一个cd唱片，想观看，那么电脑如何处理，显然它们只是播放中组成部分，这时候需要一个主板“中间者”来协调分配，让CD光驱解析读取数据，然后让CPU解码成出视频和音频，在让显卡和声卡具体显示出来。那么这直接一些操作让主板来分配完成。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>中介模式包装了一系列对象相互交互的方式，使得对象之间不必相互明显作用。</p>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>当对象之间相互作用的时候，它们之间就会产生依赖关系，防止修改一个对象的行为时，同是涉及到其他对象的动作，这时候可以采用中介模式，来解决耦合问题，可以达到对象之间的多对多关系变得一对多的关系，中介者对象将系统从网状结构体变成指挥室的中心作用，降低系统的复杂程度。</p>
<h3 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h3><p><img src="http://of6bvxslc.bkt.clouddn.com/%E4%B8%AD%E4%BB%8B%E6%A8%A1%E5%BC%8F.png" alt="中介模式"></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li>Mediator：抽象中介者，定义了同事对象对中介者的接口</li>
<li>ConcreteMediator：具体中介者实现抽象类</li>
<li>Colleague：抽象固件同事，定义中介者对象的接口，只知道中介者、不知道其他同事A/B</li>
<li>ConcreteColleagueA|B：具体同事本身的Action行为</li>
</ul>
<blockquote>
<p>这里的中介模式定义了简单模版，抓住定义特点：同事之间不知道对方的行为动作，古不能交互，必须让中介者（）来指挥，并把自己的行为动作告诉中介</p>
</blockquote>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/mediator/stencil" target="_blank" rel="external">中介模式—stencil</a></p>
<p>那么如果用中介模式，设计出上诉所说，让主板来指挥一个CD唱片让各种组件同事执行自己的Action？</p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/mediator/dome/Mediator.java" target="_blank" rel="external">Mediator.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 抽象的中介者</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/15.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 抽象中介方法</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">changed</span><span class="params">(Colleague colleague)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/mediator/dome/Colleague.java" target="_blank" rel="external">Colleague.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 抽象同事</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/15.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> Mediator mediator;  <span class="comment">//中介对象</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Colleague</span><span class="params">(Mediator mediator)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mediator = mediator;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/mediator/stencil" target="_blank" rel="external">BoardMediator.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 中介者-- 主板</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/15.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardMediator</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> CPU cpu;</div><div class="line">    <span class="keyword">private</span> CDDevice cdDevice;</div><div class="line">    <span class="keyword">private</span> GraphicsCard graphicsCard;</div><div class="line">    <span class="keyword">private</span> SoundCard soundCard;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changed</span><span class="params">(Colleague colleague)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (colleague == cpu) &#123;</div><div class="line">            handleCPU(cpu);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (colleague == cdDevice) &#123;</div><div class="line">            handleCD(cdDevice);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 处理光驱数据，给其他设备交互</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> cdDevice</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleCD</span><span class="params">(CDDevice cdDevice)</span> </span>&#123;</div><div class="line">        cpu.decodeData(cdDevice.getData());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 处理CPU读取数据后，给其他设备交互</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> cpu</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleCPU</span><span class="params">(CPU cpu)</span> </span>&#123;</div><div class="line">        graphicsCard.videopPlay(cpu.getDataVideo());</div><div class="line">        soundCard.soundPlay(cpu.getDataSound());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCpu</span><span class="params">(CPU cpu)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.cpu = cpu;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCdDevice</span><span class="params">(CDDevice cdDevice)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.cdDevice = cdDevice;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGraphicsCard</span><span class="params">(GraphicsCard graphicsCard)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.graphicsCard = graphicsCard;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSoundCard</span><span class="params">(SoundCard soundCard)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.soundCard = soundCard;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>可以看到CPU、CDDevice、GraphicsCard、SoundCard组件同事之间都没相互依赖交互，而是让中介者(BoardMediator)进行统一的指挥，这也是中介模式核心点.</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在面向对象编程语言中，一个类必然会与其他类产生依赖关系，如果这种依赖关系如果网状错综复杂，那么必然会影响代码逻辑编写以及思路，导致执行效率低迷，适当让中介模式可以让对象与对象之间的关系解耦，这样下来不会绕、逻辑也清晰，在使用的前提下如果只是简单几个对象依赖，逻辑并不负责，还请三思，毕竟要多方面考了，在决定是否合理，权衡利弊。</p>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/mediator/dome" target="_blank" rel="external">中介模式 参考code</a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[访问者模式]]></title>
      <url>http://nenglee.com/2016/12/14/Pattern/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>访问者模式是一种将数据操作与数据结构分离的设计模式，可以说在众多设计之中最为复杂的一个，一般来说使用的频率并不是特别高，但不代表它不重要。<br>访问者的模式基本想法是：软件系统中拥有一个由许多对象构成，访问者是一个接口，它拥有一个Visit方法体，这个方法对访问者的对象结构中不同的类型元素做出不同的处理，在对象结构的一次访问过程中，我们遍历整个对象结构，对每一个元素进行实施accept方法，在每一个元素的accept方法中会调用访问者的visit方法，从而使得访问者得以处理对象结构的每一个元素，我们可以针对结构设计不同的访问者来完成不同的操作，达到区别效果。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>封装一些作用于某种数据结构中各元素操作，它可以在不改变这个数据结构的前提定义作用于这些元素的新操作。</p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol>
<li>对象结构比较稳定，但经常需要在对象结构上定义新的操作</li>
<li>需要对一个对象结构中的元素进行不同的操作，并且是不相关的操作，而需要避免这些操作的“污染”这些对象的类，也不希望在增加新操作时候修改这些类</li>
</ol>
<p>假设一个场景：<br>年终，公司会给员工考核，但是不同职位员工考核标准不同，例如：考核人CEO和CTO俩人，CEO看的是工程师KPI和经理的KPI，CTO看的是工程师的代码量和经理的产品数。<br>那么CEO和CTO对于不同的员工考核的是不一样的，这就需要对不同员工类型进行不同的处理，那么可以考虑采用访问者模式。</p>
<h3 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h3><p><img src="http://of6bvxslc.bkt.clouddn.com/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.png" alt="访问者模式"></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li>Visitor：接口类定义员工访问行为</li>
<li>CEOVisitor | CTOVisitor ：具体的访问者，给出每个元素的访问产生的具体行为</li>
<li>Staff：员工抽象类，定义了接收访问者的 【 abstract void accept(Visitor visitor) 】抽象方法</li>
<li>Engineer | Manager：具体员工类</li>
<li>BusinessReport：对象的结构，管理元素，并且可以迭代这些元素供访问者访问</li>
</ul>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/visitor/Staff.java" target="_blank" rel="external">Staff.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 员工基类</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/14.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Staff</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> kpi;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Staff</span><span class="params">(String name)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        kpi = <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/visitor/Engineer.java" target="_blank" rel="external">Engineer.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 工程师</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/14.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Engineer</span> <span class="keyword">extends</span> <span class="title">Staff</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Engineer</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</div><div class="line">        visitor.visit(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 工程师一年写的代码数量</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCodeLines</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Random().nextInt(<span class="number">10</span> * <span class="number">10000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>可以看到实现了【 public void accept(Visitor visitor) 】提供了具体访问者</p>
</blockquote>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/visitor/Visitor.java" target="_blank" rel="external">Visitor.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/14.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 访问工程师类型</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> engineer</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Engineer engineer)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 访问经理类型</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> manager</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Manager manager)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/visitor/BusinessReport.java" target="_blank" rel="external">BusinessReport.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 员工数据表</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/14.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessReport</span> </span>&#123;</div><div class="line"></div><div class="line">    List&lt;Staff&gt; mStaff = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessReport</span><span class="params">()</span> </span>&#123;</div><div class="line">        mStaff.add(<span class="keyword">new</span> Manager(<span class="string">"Wang经理"</span>));</div><div class="line">        mStaff.add(<span class="keyword">new</span> Engineer(<span class="string">"工程师--Shawn.Xiong"</span>));</div><div class="line">        mStaff.add(<span class="keyword">new</span> Engineer(<span class="string">"工程师--Keal"</span>));</div><div class="line">        mStaff.add(<span class="keyword">new</span> Engineer(<span class="string">"工程师--Chaossss"</span>));</div><div class="line">        mStaff.add(<span class="keyword">new</span> Engineer(<span class="string">"工程师--Leene"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 为访问者展示报表</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> visitor</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showReport</span><span class="params">(Visitor visitor)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (Staff staff : mStaff) &#123;</div><div class="line">            staff.accept(visitor);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>可以看到，员工数据集合中，迭代所有的元素供访问者访问</li>
</ul>
<p>看看CEO和CTO如何更具自己的考核标准，拿到想要的数据?<br><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/visitor/BusinessReport.java" target="_blank" rel="external">VisitorActivity.java Client客户端</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="comment">//构建报表init</span></div><div class="line">       BusinessReport report = <span class="keyword">new</span> BusinessReport();</div><div class="line"></div><div class="line">       Log.d(<span class="keyword">this</span>.getClass().getSimpleName(), <span class="string">"==============给CEO看的报表=============="</span>);</div><div class="line">       <span class="comment">//设置访问者 CEO</span></div><div class="line">       report.showReport(<span class="keyword">new</span> CEOVisitor());</div><div class="line"></div><div class="line">       Log.d(<span class="keyword">this</span>.getClass().getSimpleName(), <span class="string">"==============给CTO看的报表=============="</span>);</div><div class="line">       <span class="comment">//设置访问者 CTO</span></div><div class="line">       report.showReport(<span class="keyword">new</span> CTOVisitor());</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>访问者最大的优点就是增加不同的访问者非常容易，我们从代码中看到，如果增加一个访问者，你要新创建一个实现Visitor接口类，然后实现内部的visit函数。<br>优点:</p>
<ol>
<li>各角色职责分离，符合面向对象的单一原则</li>
<li>具有优秀的扩展性</li>
<li>使得数据结构和作用结构上操作耦合，操作数据更加独立</li>
<li>灵活性</li>
</ol>
<p>缺点：</p>
<ol>
<li>具体元素对访问者公布细节</li>
<li>假如具体元素改变了，导致修改成本增加</li>
</ol>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/visitor" target="_blank" rel="external">访问者模式 案例参考code</a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[模版模式]]></title>
      <url>http://nenglee.com/2016/12/13/Pattern/%E6%A8%A1%E7%89%88%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>在面向对象编程中，通常会遇到这样一个问题：我们知道一个算法所需的关键步骤，并确定了这些步骤的执行顺序，但是，某些步骤的具体实现是未知的，或者说某些步骤的实现会随者环境的变化而改变<br>例如：</p>
<ol>
<li>检查代码语法正确性</li>
<li>链接相关的类库</li>
<li>编译相关代码</li>
<li>执行程序</li>
</ol>
<p>对于不同的程序设计语言来说，上述的4个步骤都是不一样，但是，它们执行的流程上的固定的，这类问题的解决方案就可以用模版模式，可以在流程上一致，具体的算法却是不同。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>一个操作中的算法框架，而将一些步骤延迟到子类中，可以是重写的方式，使得子类可以不改变一个算法的结构体，来重新定义某些特定的步骤。</p>
<h3 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h3><p><img src="http://of6bvxslc.bkt.clouddn.com/%E6%A8%A1%E7%89%88%E6%A8%A1%E5%BC%8Fr.png" alt="模版模式"></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>假设以启动计算流程看成模版，那么启动方式</p>
<ol>
<li>开启电脑</li>
<li>检查硬件</li>
<li>载入系统OS</li>
<li>小白的计算机无验证,直接进入桌面</li>
</ol>
<p>这种模版启动是电脑初始化启动形式，那么不同的用户在启动流程会有不同监测，例如程序员是在登录时候需要用密码登录，军机需要监测电脑硬件、指纹验证等流程，但是计算机的启动方式分了以上四大类，只不过用户在不同频段的方式不同。那么如何用模版模式设计呢？</p>
<ul>
<li>抽象AbstractComputer 定义一套流程模版,其中函数 final void starUp()</li>
<li>子类CodeComouter</li>
<li>子类MilltaryComouter</li>
</ul>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/template/AbstractComputer.java" target="_blank" rel="external">AbstractComputer.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 抽象的 Computer</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/13.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractComputer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> String TAG = <span class="keyword">this</span>.getClass().getSimpleName();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractComputer</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">powerOn</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"开启电脑"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">checkHardware</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"检查硬件"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadOS</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"载入系统OS"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"小白的计算机无验证,直接进入桌面"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 电脑开机模版</div><div class="line">     * ** 注意该方法是模版，固定模式，防止篡改 所以要用 final</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">starUp</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"----------开机-----------"</span>);</div><div class="line">        powerOn();</div><div class="line">        checkHardware();</div><div class="line">        loadOS();</div><div class="line">        login();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>需要注意 public final void starUp() 内部已经把流程启动顺序封装了，并且Final修饰 防止修改启动流程。</p>
</blockquote>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/template/MilltaryComouter.java" target="_blank" rel="external">MilltaryComouter.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 军机 计算机</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/13.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MilltaryComouter</span> <span class="keyword">extends</span> <span class="title">AbstractComputer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">checkHardware</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.checkHardware();</div><div class="line">        Log.e(TAG, <span class="string">"硬件防火墙检查"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"指纹识别进行登录验证登录"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/activity/TemplateActivity.java" target="_blank" rel="external">Client(TemplateActivity)客户端</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 模版模式</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/13.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button starBut1, starBut2;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> AbstractComputer comp;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getContentView</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> R.layout.activity_template;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        starBut1 = (Button) findViewById(R.id.starBut1);</div><div class="line">        starBut2 = (Button) findViewById(R.id.starBut2);</div><div class="line">        starBut1.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        starBut2.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        <span class="comment">//普通小白启动计算机</span></div><div class="line">        comp = <span class="keyword">new</span> AbstractComputer() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>.login();</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        comp.starUp();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.starBut1:</div><div class="line">                <span class="comment">//程序员 计算机</span></div><div class="line">                comp = <span class="keyword">new</span> CodeComouter();</div><div class="line">                comp.starUp();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> R.id.starBut2:</div><div class="line">                <span class="comment">//军机 计算机</span></div><div class="line">                comp = <span class="keyword">new</span> MilltaryComouter();</div><div class="line">                comp.starUp();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>模版模式如果用简单易懂的词形容，我想用“流程封装”，也就是把某个固定的流程封装到一个带有final函数里面，并且让子类能够定制流程中算法或者方法，可以在某个步骤重写，从而取而代之成子类特有属性。宏观的讲封装流程步骤是不能改变。</p>
<p>优点:</p>
<ol>
<li>封装面向对象，扩展性强，可变局部</li>
<li>提取共同代码，便于维护</li>
</ol>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/template" target="_blank" rel="external">模版模式 案例参考code</a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[迭代器模式]]></title>
      <url>http://nenglee.com/2016/12/13/Pattern/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>看到“迭代器”（Iterator）三个字一定不会陌生，在遍历Map时候就用到过，那么这里迭代器也差不多，只不过我们要遍历的是对象中的元素，迭代器模式解决对象内部不用自己来遍历，通过外部迭代器接口接收到需要遍历的对象进行遍历。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>提供了一种方法顺序，访问一个容器对象中各个元素，而又不需要暴露对象内部的表示。</p>
<h3 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h3><p><img src="http://of6bvxslc.bkt.clouddn.com/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.png" alt="迭代器模式"></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/iterator/model/Iterator.java" target="_blank" rel="external">Interator.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/13.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否还有下一个元素</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 光标移动下一个元素</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">T <span class="title">next</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/iterator/model" target="_blank" rel="external">参考模型</a></p>
<h3 id="特色场景"><a href="#特色场景" class="headerlink" title="特色场景"></a>特色场景</h3><p>假设公司大Boos让公司俩个HR（Min、Hui）统计下目前公司人员情况，经过统计过后，结果给大Boos的报表分别是：</p>
<ol>
<li>Min 是以 List<employee> 集合形式统计</employee></li>
<li>hui 是以 Employee[] 集合形式统计<br>那么问题就来了，大Boos如何遍历员工情况？</li>
</ol>
<p>这里Boos让他们统计表分别实现 Iterator 接口，这样Boos就可以通过迭代器模式分别对不同集合数据进行遍历了</p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/iterator/code/MinIteratot.java" target="_blank" rel="external">MinIteratot.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/13.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinIteratot</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;Employee&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> position;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinIteratot</span><span class="params">(List&lt;Employee&gt; list)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.list = list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> !(position &gt; (list.size() - <span class="number">1</span>) || <span class="keyword">null</span> == list.get(position));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        Employee employee = list.get(position++);</div><div class="line">        <span class="keyword">return</span> employee;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/iterator/code/HuiIteratot.java" target="_blank" rel="external">HuiIteratot.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/13.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuiIteratot</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Employee[] array;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> position;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HuiIteratot</span><span class="params">(Employee[] array)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.array = array;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> !(position &gt; (array.length - <span class="number">1</span>) || <span class="keyword">null</span> == array[position]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        Employee employee = array[position++];</div><div class="line">        <span class="keyword">return</span> employee;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样的一下来，Boos就通过Iterator接口迭代器进行遍历<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClickButton</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>.onClickButton(view);</div><div class="line"></div><div class="line">      Employee[] array = Hui();</div><div class="line">      List&lt;Employee&gt; list = Min();</div><div class="line">      <span class="comment">//迭代不同集合的人员</span></div><div class="line">      check(<span class="string">"Hui"</span>, <span class="keyword">new</span> HuiIteratot(array));</div><div class="line">      check(<span class="string">"Min"</span>, <span class="keyword">new</span> MinIteratot(list));</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(String xxx, Iterator iterator)</span> </span>&#123;</div><div class="line">      <span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">          Employee employee = (Employee) iterator.next();</div><div class="line">          Log.d(xxx + <span class="string">" 统计人员："</span>, employee.toString());</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>迭代器模式其自身的优点很单一，通过泛型<t>可以满足各种对象，同时支持不同的集合进行遍历，弱化了容器与遍历算法之间的关系，毕竟不同的集合for循环算法不同，但是都满足是否还有数据？并且返回当前数据这样的接口定义，这样通过迭代器就可以一一遍历。</t></p>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/iterator" target="_blank" rel="external">迭代器模式 案例参考code</a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[备忘录模式]]></title>
      <url>http://nenglee.com/2016/12/12/Pattern/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>备忘录模式用于记录当前信息对象状态，再后来某一时刻进行恢复当初的状态，有点像人们口中说的”时光机”，备忘录模式的实现方式需要被保存对象状态不能被对象外部访问，目是为了保护对象的完整性以及内部实现不向外暴漏。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>在不被破坏封闭的前提下，捕捉一个对象的内部状态，并在对象之外保存这个状态，这样，以后就可将对象恢复到复先的状态。</p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol>
<li>需要保存一个对象在某一时刻的状态或部分状态。</li>
<li>如果用一个接口来让其他对象得到这些状态，将会暴露对象实现细节有可能会破坏对象的封装性，一个对象不希望外界直接访问其内部状态，通过中间者对象可以间接访问内部属性。</li>
</ol>
<h3 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h3><p><img src="http://of6bvxslc.bkt.clouddn.com/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F.png" alt="备忘录模式"></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>模拟一个玩单机游戏场景:完了一会要出去，这时候需要存档当前游戏状态，关机… 下次启动通过读档(备忘录模式)启动游戏恢复上次游戏状态。</p>
<ol>
<li>Orginator : 负责创建一个备忘录，也就是游戏对象，可以记录，恢复本身状态</li>
<li>Memento : 备忘录实体，用户存储游戏状态</li>
<li>Caretaker : 负责存储备忘录，不能对备忘录的内容进行操作，访问修饰，只能将备忘录传递到其他对象中</li>
</ol>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/menento/Originator.java" target="_blank" rel="external">Originator.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 创建 备忘录</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/12.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mCheckpoint = <span class="number">1</span>;  <span class="comment">//当前关卡</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLifeValue = <span class="number">100</span>;  <span class="comment">// 生命值</span></div><div class="line">    <span class="keyword">private</span> String mWeapon = <span class="string">"沙漠小刀"</span>;  <span class="comment">//武器</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 玩游戏</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</div><div class="line">        play(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 玩游戏</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> mWeapon 武器</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String mWeapon)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(mWeapon))</div><div class="line">            <span class="keyword">this</span>.mWeapon = mWeapon;</div><div class="line">        mLifeValue -= <span class="number">10</span>;</div><div class="line">        mCheckpoint++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 退出游戏</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Caretaker <span class="title">quit</span><span class="params">(Menoto menoto)</span> </span>&#123;</div><div class="line">        <span class="comment">//游戏存档</span></div><div class="line">      Caretaker  caretaker = <span class="keyword">new</span> Caretaker();</div><div class="line">        caretaker.archive(menoto);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> caretaker;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 创建 备忘录</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Menoto <span class="title">createMemoto</span><span class="params">()</span> </span>&#123;</div><div class="line">        Menoto menoto = <span class="keyword">new</span> Menoto();</div><div class="line">        menoto.setmCheckpoint(mCheckpoint);</div><div class="line">        menoto.setmLifeValue(mLifeValue);</div><div class="line">        menoto.setmWeapon(mWeapon);</div><div class="line">        <span class="keyword">return</span> menoto;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 恢复游戏属性</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> menoto</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restore</span><span class="params">(Menoto menoto)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mCheckpoint = menoto.getmCheckpoint();</div><div class="line">        <span class="keyword">this</span>.mLifeValue = menoto.getmLifeValue();</div><div class="line">        <span class="keyword">this</span>.mWeapon = menoto.getmWeapon();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"CallofDuty&#123;"</span> +</div><div class="line">                <span class="string">"mCheckpoint="</span> + mCheckpoint +</div><div class="line">                <span class="string">", mLifeValue="</span> + mLifeValue +</div><div class="line">                <span class="string">", mWeapon='"</span> + mWeapon + <span class="string">'\''</span> +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/menento/caretaker.java" target="_blank" rel="external">Caretaker.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 负责 管理备忘录</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/12.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//一定对备忘录内部状态操作，所以注意修饰符</span></div><div class="line">    <span class="keyword">private</span> Menoto menoto; <span class="comment">//备忘录</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 存档</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> menoto</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">archive</span><span class="params">(Menoto menoto)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.menoto = menoto;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取存档</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Menoto <span class="title">getMenoto</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> menoto;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>备忘录是在不被破坏封装的条件下，通过备忘录对象（Memoto）存储另外一个对象内部状态的快照，在将来适合的时候把这个对象还原封不动的还原当前备份的时候。</p>
<p>优点:</p>
<ol>
<li>用户提供了一种可以恢复状态的机制，使得用户回到历史状态某一点。</li>
<li>实现了信息封装，不用关心状态的备份细节。</li>
</ol>
<p>缺点：<br>销毁资源，如果类的成员变量过多，每一次保存都会销毁一定量的内存占用。</p>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/menento" target="_blank" rel="external">备忘录模式 参考code</a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[观察者模式]]></title>
      <url>http://nenglee.com/2016/12/06/Pattern/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>观察者模式使用的频率极高,最大特色是:订阅–发布,本身的设计就是用于解耦，在观察者和被观察者者解耦,它们之间的依赖性小，甚至毫无依赖，以GUI来说，UI本身有着易变性，尤其在需求不明确的情况下，产品改动大，应用的界面经常发生变化，但是业务逻辑变化不大，此时，需要一套机制来对应，而观察者模式使得UI层与业务层的逻辑之间的逻辑解耦，观察者模式就派上用场。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>对象之间的一对多的依赖关系，使一个对象发生了变化，与之依赖它的对象都会得到通知，并且自动更新状态。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol>
<li>关联行为的场景，需要注意的是，关联行为是可拆分，而不是“组合”关系</li>
<li>事件多级触发场景</li>
<li>跨系统的消息交换场景，如何消息队列、事件总线处理机制</li>
</ol>
<h3 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h3><p><img src="http://of6bvxslc.bkt.clouddn.com/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.png" alt="观察者模式"></p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>场景模拟:一家三口人，我和爸爸想知道妈妈现在做饭做到什么程度，什么时候做好？什么时候可以吃饭？于是呢、我和爸爸不听的问现在什么做好了？菜烧好没？饭好了没？妈妈就不赖烦，于是妈妈就说菜烧好了，饭煮好了，快开饭时候我来告诉你，你们不用一直问了。<br>于是呢，关于如下：<br>妈妈（被观察者）  Observable<br>我和爸爸（观察者） Observer<br>我和爸爸的问题成了订阅，妈妈做好一步就通知，不必总去问了，反而做好了就告诉你的一种模式。</p>
<p>在java内置jdk中已经有了Observable(对象) 和 Observer(接口) 可见观察者模式的重要性，那么就先看看内置源码：</p>
<p>Observable.java  被观察者</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observable</span> </span>&#123;</div><div class="line"></div><div class="line">    List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> changed = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Constructs a new &#123;<span class="doctag">@code</span> Observable&#125; object.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Observable</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Adds the specified observer to the list of observers. If it is already</div><div class="line">     * registered, it is not added a second time.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> observer</div><div class="line">     *            the Observer to add.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (observer == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"observer == null"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (!observers.contains(observer))</div><div class="line">                observers.add(observer);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Clears the changed flag for this &#123;<span class="doctag">@code</span> Observable&#125;. After calling</div><div class="line">     * &#123;<span class="doctag">@code</span> clearChanged()&#125;, &#123;<span class="doctag">@code</span> hasChanged()&#125; will return &#123;<span class="doctag">@code</span> false&#125;.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">clearChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">        changed = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the number of observers registered to this &#123;<span class="doctag">@code</span> Observable&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> the number of observers.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countObservers</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> observers.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Removes the specified observer from the list of observers. Passing null</div><div class="line">     * won't do anything.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> observer</div><div class="line">     *            the observer to remove.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deleteObserver</span><span class="params">(Observer observer)</span> </span>&#123;</div><div class="line">        observers.remove(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Removes all observers from the list of observers.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deleteObservers</span><span class="params">()</span> </span>&#123;</div><div class="line">        observers.clear();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the changed flag for this &#123;<span class="doctag">@code</span> Observable&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; when the changed flag for this &#123;<span class="doctag">@code</span> Observable&#125; is</div><div class="line">     *         set, &#123;<span class="doctag">@code</span> false&#125; otherwise.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> changed;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * If &#123;<span class="doctag">@code</span> hasChanged()&#125; returns &#123;<span class="doctag">@code</span> true&#125;, calls the &#123;<span class="doctag">@code</span> update()&#125;</div><div class="line">     * method for every observer in the list of observers using null as the</div><div class="line">     * argument. Afterwards, calls &#123;<span class="doctag">@code</span> clearChanged()&#125;.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * Equivalent to calling &#123;<span class="doctag">@code</span> notifyObservers(null)&#125;.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</div><div class="line">        notifyObservers(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * If &#123;<span class="doctag">@code</span> hasChanged()&#125; returns &#123;<span class="doctag">@code</span> true&#125;, calls the &#123;<span class="doctag">@code</span> update()&#125;</div><div class="line">     * method for every Observer in the list of observers using the specified</div><div class="line">     * argument. Afterwards calls &#123;<span class="doctag">@code</span> clearChanged()&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> data</div><div class="line">     *            the argument passed to &#123;<span class="doctag">@code</span> update()&#125;.</div><div class="line">     */</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(Object data)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> size = <span class="number">0</span>;</div><div class="line">        Observer[] arrays = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (hasChanged()) &#123;</div><div class="line">                clearChanged();</div><div class="line">                size = observers.size();</div><div class="line">                arrays = <span class="keyword">new</span> Observer[size];</div><div class="line">                observers.toArray(arrays);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (arrays != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (Observer observer : arrays) &#123;</div><div class="line">                observer.update(<span class="keyword">this</span>, data);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Sets the changed flag for this &#123;<span class="doctag">@code</span> Observable&#125;. After calling</div><div class="line">     * &#123;<span class="doctag">@code</span> setChanged()&#125;, &#123;<span class="doctag">@code</span> hasChanged()&#125; will return &#123;<span class="doctag">@code</span> true&#125;.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">        changed = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>可以看到内部有一个 List<observer> observers(观察者List集合),也就是需要订阅消息的观察者存放</observer></li>
<li>addObserver(Observer observer) 添加观察者</li>
<li>deleteObserver(Observer observer) 移出观察者</li>
<li>notifyObservers(Object data)  通知，可以看到就是for循环观察者，然后调用观察者的接口，发送Data信息</li>
</ol>
<p>接口：interface Observer 观察者<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * This method is called if the specified &#123;<span class="doctag">@code</span> Observable&#125; object's</div><div class="line">     * &#123;<span class="doctag">@code</span> notifyObservers&#125; method is called (because the &#123;<span class="doctag">@code</span> Observable&#125;</div><div class="line">     * object has been updated.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> observable  //被观察者</div><div class="line">     *            the &#123;<span class="doctag">@link</span> Observable&#125; object.</div><div class="line">     * <span class="doctag">@param</span> data  //发送消息</div><div class="line">     *            the data passed to &#123;<span class="doctag">@link</span> Observable#notifyObservers(Object)&#125;.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable observable, Object data)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/observer/Mother.java" target="_blank" rel="external">Mother.java 母亲–被观察者</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 母亲 被观察者</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/6.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mother</span> <span class="keyword">extends</span> <span class="title">Observable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mother</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 做饭</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cooking</span><span class="params">(String contnet)</span> </span>&#123;</div><div class="line">        notifyObservers(contnet);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通知所以</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</div><div class="line">        notifyObservers(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通知</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> data</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(Object data)</span> </span>&#123;</div><div class="line">        setChanged();</div><div class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">super</span>.notifyObservers();</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">super</span>.notifyObservers(data);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/observer/observer/MyObserver.java" target="_blank" rel="external">MyObserver.java  我–观察者</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 我 观察者</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/7.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyObserver</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable observable, Object data)</span> </span>&#123;</div><div class="line">        Toast.makeText(context,<span class="string">"被观察者(妈妈) 对我说："</span> + data,Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>细心发朋友 被观察者继承了jdk Observable,那么在Android sdk 也有自己的 Observable<t>,这里的泛型也就是说订阅观察者可以是任意类型了，接口就自己定义吧，在Android可以能通知发的消息是一个实体的话，那么就可以自定义自己的观察者，极其方便。</t></p>
<blockquote>
<p> 需要注意的是存放观察者是List集合,就存在顺序，所以先注册订阅在通知的时候就有限得到通知结果，如果你在项目特殊情况，也可以重写Observable来达到自己的目的。 比如说：异步通知？</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>观察者模式的作用就是对象的解耦，将观察者与被观察者完全的隔离，只依赖Observer和Observable(抽象)，就好比ListVIew和Adapter适配器之间，每一个itme都是一个观察者，数据源被观察者，数据发生变了就可以通知，Item就动态刷新。这样的设计使得它的扩展性、灵活性非常强，而且耦合度又非常的低，不得不承认是非常优秀。</p>
<p>优点:</p>
<ol>
<li>观察者和被观察直接抽象耦合，对应业务变化</li>
<li>增强系统的灵活、扩展</li>
</ol>
<p>缺点:</p>
<ol>
<li>效率问题，毕竟要订阅关系</li>
<li>Java内置通知是顺序执行</li>
</ol>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/observer" target="_blank" rel="external">观察者模式 案例参考code</a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[命令模式]]></title>
      <url>http://nenglee.com/2016/12/05/Pattern/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>命令模式，从字面来看“命令”俩字，工作中leading命令XXX把刚刚开会的内容以Word形式发一份到我的邮箱，那么XXX就要执行这条命令内容，那么执行起来会梳理开会内容流程，然后写Word，然后发邮件这样的大致流程，而对于Leading来说只用关心邮箱是否收到邮件，却不关心XXX在执行中遇到的问题，要怎么处理。<br>例如你在点击“关闭电脑”命令时候，电脑会做很多程序处理，结束当前运行的程序，保存当前工作的记录，一切结束后在启动内部的关闭命令。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>将一个请求封装成一个对象集合，从而让用户以参数的形式请求；对于请求排队、记录日志，以及支持撤销回滚事务等一些列操作。</p>
<h3 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h3><p><img src="http://of6bvxslc.bkt.clouddn.com/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8FCommand.png" alt="命令模式"></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>模拟一个场景：俄罗斯方块游戏操作命令(左 右 落 变)</p>
<ol>
<li>TetrisMachine 接收者角色</li>
<li>Command 命令接口</li>
<li>LeftCommand、RightCommand、FallCommand、TransformCommand  (左、右、落、变)接口实现类</li>
<li>Buttons 请求者</li>
<li>Client 客户端</li>
</ol>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/command/TetrisMachine.java" target="_blank" rel="external">TetrisMachine.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 接收者角色 Action</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/5.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TetrisMachine</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toLeft</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"向左"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toRinght</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"向右"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fallToBottom</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"快速落下"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">transform</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"改变形状"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/command/Buttons.java" target="_blank" rel="external">Buttons.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 请求者</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/5.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Buttons</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LeftCommand leftCommand;</div><div class="line">    <span class="keyword">private</span> RightCommand rightCommand;</div><div class="line">    <span class="keyword">private</span> FallCommand fallCommand;</div><div class="line">    <span class="keyword">private</span> TransformCommand transformCommand;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Buttons</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Buttons</span><span class="params">(LeftCommand leftCommand, RightCommand rightCommand, FallCommand fallCommand, TransformCommand transformCommand)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.leftCommand = leftCommand;</div><div class="line">        <span class="keyword">this</span>.rightCommand = rightCommand;</div><div class="line">        <span class="keyword">this</span>.fallCommand = fallCommand;</div><div class="line">        <span class="keyword">this</span>.transformCommand = transformCommand;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeftCommand</span><span class="params">(LeftCommand leftCommand)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.leftCommand = leftCommand;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRightCommand</span><span class="params">(RightCommand rightCommand)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.rightCommand = rightCommand;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFallCommand</span><span class="params">(FallCommand fallCommand)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.fallCommand = fallCommand;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTransformCommand</span><span class="params">(TransformCommand transformCommand)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.transformCommand = transformCommand;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 按下按钮 左</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toLeft</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> leftCommand.execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 按下按钮 右</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toRight</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> rightCommand.execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 按下 快速下落</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fall</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> fallCommand.execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 按下改变状态 变形</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">transform</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> transformCommand.execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/activity/CommandActivity.java" target="_blank" rel="external">Client(CommandActivity)客户端</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 命令模式</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/12/5.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> TextView textView;</div><div class="line">    <span class="keyword">private</span> Button buttonLeft, buttonRight, buttonFall, buttonTransform;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Buttons buttons;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getContentView</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> R.layout.activity_command;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initCreate</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        textView = (TextView) findViewById(R.id.action_txt);</div><div class="line">        buttonLeft = (Button) findViewById(R.id.left_but);</div><div class="line">        buttonLeft.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        buttonRight = (Button) findViewById(R.id.right_but);</div><div class="line">        buttonRight.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        buttonFall = (Button) findViewById(R.id.fall_but);</div><div class="line">        buttonFall.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        buttonTransform = (Button) findViewById(R.id.transform_but);</div><div class="line">        buttonTransform.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//接收者角色</span></div><div class="line">        TetrisMachine tetrisMachine = <span class="keyword">new</span> TetrisMachine();</div><div class="line"></div><div class="line">        LeftCommand leftCommand = <span class="keyword">new</span> LeftCommand(tetrisMachine);</div><div class="line">        RightCommand rightCommand = <span class="keyword">new</span> RightCommand(tetrisMachine);</div><div class="line">        FallCommand fallCommand = <span class="keyword">new</span> FallCommand(tetrisMachine);</div><div class="line">        TransformCommand transformCommand = <span class="keyword">new</span> TransformCommand(tetrisMachine);</div><div class="line"></div><div class="line">        buttons = <span class="keyword">new</span> Buttons(leftCommand, rightCommand, fallCommand, transformCommand);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.left_but:</div><div class="line">                setTextAction(buttons.toLeft());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.right_but:</div><div class="line">                setTextAction(buttons.toRight());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.fall_but:</div><div class="line">                setTextAction(buttons.fall());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.transform_but:</div><div class="line">                setTextAction(buttons.transform());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTextAction</span><span class="params">(String action)</span> </span>&#123;</div><div class="line">        textView.setText(action);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>命令模式本身执行流程，如果在Client客户端直接 new TetrisMachine() 对象这样更加方便，直接拿到需要的方法体，不否认，只是你要是这样想的话，那么就不存在“命令模式”设计，模式是设计对后续的需求扩展、耦合度做了一定的考虑，假设在“落”的时候如果碰壁，或者加特殊音效、动画等一系列操作，那么你就要TetrisMachine内部的函数，导致改变“落”的本身实质功能，改动了，其他场景模式闯关“落”又是不需要呢？那么要加非常多判别，导致臃肿不说，维护成本就非常高了，及不划算。<br>如果用命令模式，在 FallCommand()接口实现中 动态添加其他需求方法，这样请求者更具不同场景情况而调用就非常的清晰了。</p>
<p>这就是设计模式的“精髓”所在，需要后期复杂的场景下，才能体现它的”美”。</p>
<p>在命令模式中充分体现几乎所有的设计模式通病，就是类的膨胀，大量的衍生类的创造，这是一个不可避免的问题，但是同时也给我们的程序设计带来好处非常多，更弱的耦合性，更灵活的控制以及强壮的扩展性，不过，在实际开发中还需要更具情况而定是否真的需要。</p>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/command" target="_blank" rel="external">命令模式 案例参考code</a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解释器模式]]></title>
      <url>http://nenglee.com/2016/12/05/Pattern/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>解释器模式(Interpreter Pattern)提供了评估语言的语法或表达式的方式，属于行为型模式，这种模式实现了一个表达式接口，该接口解释了一个特定的上下文。这种设计模式常用于SQL解析，符号处理引擎上等.<br><a id="more"></a></p>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>给定一个语言之后，解释器模式可以定义出其文法的一种表示，并同时提供一个解释器。</p>
<h3 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h3><p><img src="http://of6bvxslc.bkt.clouddn.com/%E8%A7%A3%E6%9E%90%E5%99%A8%E6%A8%A1%E5%BC%8FInterpreter.png" alt="解析器模式"></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol>
<li>抽象表达式(Expression)角色定义 int interpret(Entity entity) 接口，做解释操作。</li>
<li>俩个接口的实现类 Minus 和 Plus 分别实现interpret()方法</li>
<li>环境(Entity) 存放文法的变量数据</li>
</ol>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/interpreter/Expression.java" target="_blank" rel="external">Expression.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Expression</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 解释器</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> entity 上下文 实体Entity 数据</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Entity entity)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/activity/InterpreterActivity.java" target="_blank" rel="external">InterpreterActivity</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClickButton</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onClickButton(view);</div><div class="line">    Entity entity = <span class="keyword">new</span> Entity(<span class="number">2016</span>, <span class="number">12</span>);</div><div class="line">    <span class="comment">//+</span></div><div class="line">    <span class="keyword">int</span> resultPlus = <span class="keyword">new</span> Plus().interpret(entity);</div><div class="line"></div><div class="line">    Entity entity2 = <span class="keyword">new</span> Entity(resultPlus, <span class="number">5</span>);</div><div class="line">    <span class="comment">//-</span></div><div class="line">    <span class="keyword">int</span> result = <span class="keyword">new</span> Minus().interpret(entity2);</div><div class="line">    setTextStr(String.valueOf(result));</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>总体来说解释器模式用处不是特别广泛，最核心为文法做解释，终结符表达式与非终结符表达式的概念，例如文案中interpret()方法的实现，对数据 numo、numt操作，当numo+munt =result时候,其中numo和munt可以解释为终结符表达式，那么”+”可以为非终结符表达式。</p>
<p>优点：解释器模式提供了一个简单的方式来执行语法，而且容易修改或者扩展语法。一般系统中很多类使用相似的语法，可以使用一个解释器来代替为每一个规则实现一个解释器。而且在解释器中不同的规则是由不同的类来实现的，这样使得添加一个新的语法规则变得简单。</p>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/interpreter" target="_blank" rel="external">解释器模式 案例参考code</a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[孤独深处]]></title>
      <url>http://nenglee.com/2016/11/18/%E9%9A%8F%E7%AC%94/%E5%AD%A4%E7%8B%AC%E6%B7%B1%E5%A4%84/</url>
      <content type="html"><![CDATA[<blockquote>
<p>科幻小说构想一个可能性的世界，人站在这个世界的边缘，最容易感觉到出世和异化。出离世界的感觉是最孤独的孤独。</p>
</blockquote>
<p>——郝景芳《孤独深处》</p>
<the rest="" of="" contents="" |="" 余下全文="">



<p>2016年8月21日，中国科幻女作家 <a href="http://baike.baidu.com/item/%E9%83%9D%E6%99%AF%E8%8A%B3" target="_blank" rel="external">郝景芳</a> 凭借《北京折叠》(Folding Beijing)获得最佳中短篇小说奖。这也是继刘慈欣《三体》之后又一位中国科幻作家获得雨果奖。</p>
<p>“时间”，一天24小时，这个是人类你我平等的享用权，而在《北京折叠》中，把城市大地分成三层。<br>第一空间，享用全天24的自由时间，五百万人口，从清晨六点到第二天清晨六点<br>第二空间16小时，俩千五百万人口，从次日清晨六点到夜晚十点<br>第三空间只有8小时，人口最多五千万人，从夜间十点到第二天清晨六点。</p>
<p>主人公老刀，因为要帮养女糖糖‘交学费’上幼儿园，为了得高额的金钱，老刀铤而走险，完成一项信差，从而获取一笔报酬，去二空间空间见雇主，帮忙转递一封情书，并且亲手递给第一空间的姑娘，然后返回交代的故事。</p>
<p>虽说是科幻小说，就好像生活被的放大，犹如50年或是100年后；和很多年轻人一样，也处于海漂，颇有感受，公寓租房，朝夕上班，日落而归，面对各种有形无形压力，各种不确定，生怕淘汰。当然这些只是浅，而那些被「地域」隔开，连自由时间都被限定；为孩子的教育问题，不顾黑白颠倒的抢购学区房；机器智能时代完完全全取代，低效能的用人成本，而那些丧失就业底层吃着社会福利；不同身份特征，连沟通都难，更别说做朋友。才让人感叹。</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[责任链模式]]></title>
      <url>http://nenglee.com/2016/11/17/Pattern/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>责任链模式最为突出是”链”字，生活中链式可以理解为一环套一环,前面的操作影响后面的结果，那么程序中就是多个节点首尾相连，所构成的结构成为“链”，将每一个节点看成一个对象，每个对象拥有不同的处理逻辑，将一个请求从链式的首端发出，沿着链的路径依次传递每一个节点对象，直到对象处理结束为止，这样的一些列动作称为责任链模式。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系，将这些对象连接成一条链，并沿着这条链式的请求动作，结束为止。</p>
<p>一般用于：多个对象处理一个请求，具体由哪个对象处理则在运行时动态决定，在请求处理者不明确的情况下向多个对象中一个提交一个请求。</p>
<h2 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h2><p><img src="http://of6bvxslc.bkt.clouddn.com/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.png" alt="责任链模式"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>比如:技术人员购买了服务器等业务,需要报销，那么就会给上层请求批准报销，组长只能批准1000一下金额，不然组长就向主管请求，主管可以处理5000金额，超过了则向经理请求处理，经理是10000金额，超过了经理就需要Boss请求批准。这样一环请求一环直到结束，返回一个结果。</p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/chainRespons/Leader.java" target="_blank" rel="external">Leader.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 抽象领导</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/11/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Leader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Leader nextHander;  <span class="comment">//上一级的处理者</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 处理报销请求</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> money</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (money &lt;= limit()) &#123;</div><div class="line">            String str = handle(money);</div><div class="line">            Log.e(<span class="string">"TAG"</span>, str);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != nextHander) &#123;</div><div class="line">                nextHander.handleRequest(money);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 自身批准金额权限</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">limit</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 处理报销行为</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> money</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">handle</span><span class="params">(<span class="keyword">int</span> money)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextHander</span><span class="params">(Leader nextHander)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.nextHander = nextHander;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>抽象Leader定义了上个领导对象，然后在 <font color="#0099ff"> <strong>public final void handleRequest(int money)</strong> </font> 做了逻辑判断请求if-else,特别是不满足报销时候，让领导会请求上一级Leader重新审核报销，直到在满足Leader请求完为止。</p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/activity/ChainResponsActivity.java" target="_blank" rel="external">Client 调用者</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="comment">//初始化Leeader</span></div><div class="line">      groupLeader = <span class="keyword">new</span> GroupLeader();</div><div class="line">      directorLeader = <span class="keyword">new</span> DirectorLeader();</div><div class="line">      mansgerLeader = <span class="keyword">new</span> MansgerLeader();</div><div class="line">      bossLeader = <span class="keyword">new</span> BossLeader();</div><div class="line"></div><div class="line">      <span class="comment">//设置上级Leader</span></div><div class="line">      groupLeader.setNextHander(directorLeader);</div><div class="line">      directorLeader.setNextHander(mansgerLeader);</div><div class="line">      mansgerLeader.setNextHander(bossLeader);</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClickButton</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>.onClickButton(view);</div><div class="line">      <span class="comment">//不同价格的服务器</span></div><div class="line">      <span class="keyword">int</span>[] money = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">200</span>, <span class="number">1885</span>, <span class="number">8888</span>, <span class="number">9999</span>, <span class="number">50000</span>&#125;;</div><div class="line"></div><div class="line">      String strMoney = groupLeader.handleRequest(money[<span class="number">3</span>]);</div><div class="line">      log(strMoney);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>可以看到不同级别的Leader都new成对象，然后在当前Leader对象中存放了上一级的Leader对象，这个是关键，可以保证每个节点(对象)有链式关联。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>责任链模式很好对请求者和处理者之间的解耦，提高代码的灵活性,同时也带来一定弊端，在链式中请求处理者的遍历,如果处理者太多(逻辑业务很强)会影响一定性能，特别是在递归中调用。</p>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/chainRespons" target="_blank" rel="external">责任链模式 案例参考code</a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[状态模式]]></title>
      <url>http://nenglee.com/2016/11/15/Pattern/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>状态模式中的行为是由具体状态决定,不同的状态下有不同的行为，其实状态模式和策略模式俩者的结构几乎完全一致，但是它们的目的、本质却是不同，状态模式行为是平行的，不可替换，策略模式的行为是彼此独立、可相互替换。简单的说状态模式就是被对象的行为包装在不同的状态下，那么每个状态对象都具有一个共同的抽象状态基类，状态模式的意图是让一个对象在其内部状态改变时候，其行为也发生相应的变化。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>当一个对象的内在状态改变时候,允许改变其行为，这个对象看起来像是改变了其类。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>一个对象的行为取决于它的状态，并且它必须运行时根据状态改变它的行为</li>
<li>代码中关于了大量与对象状态的相关条件语句,例如:一个操作中含有庞大的多分支语句，并且这些分支依赖该对象的状态。</li>
</ol>
<h2 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h2><p><img src="http://of6bvxslc.bkt.clouddn.com/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8FState.png" alt="状态模式 State"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>假设需求: 电视Tv有 操作函数(+/-频道  +/-音量) 但是这些前提会根据Tv的状态执行不同功能，那么状态就是电视的开关。</p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/state/TvController.java" target="_blank" rel="external">TvController</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/11/15.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TvController</span> <span class="keyword">implements</span> <span class="title">PoweController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String Tag = <span class="keyword">this</span>.getClass().getSimpleName();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> TvState tvState;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置电视 状态</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> tvState PowerOnState 开 /  PowerOffState 关</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTvState</span><span class="params">(TvState tvState)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.tvState = tvState;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">powerOn</span><span class="params">()</span> </span>&#123;</div><div class="line">        setTvState(<span class="keyword">new</span> PowerOnState());</div><div class="line">        Log.e(Tag, <span class="string">"开机了"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">powerOff</span><span class="params">()</span> </span>&#123;</div><div class="line">        setTvState(<span class="keyword">new</span> PowerOffState());</div><div class="line">        Log.e(Tag, <span class="string">"关机了"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 下一个频道</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextChannel</span><span class="params">()</span> </span>&#123;</div><div class="line">        tvState.nextChannel();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 上一个频道</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prevChannel</span><span class="params">()</span> </span>&#123;</div><div class="line">        tvState.prevChannel();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * +++音量</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnUp</span><span class="params">()</span> </span>&#123;</div><div class="line">        tvState.turnUp();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * ---音量</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnDown</span><span class="params">()</span> </span>&#123;</div><div class="line">        tvState.turnDown();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>状态模式最为关键点在于不同状态下对同一个行为有着不同的响应,其实把if-else用多态方式来实现，好比上述案例code中Tv的On和Off俩种状态下有着相同行为方法。但是Tv的在不同状态下也有相同的行为，可是执行结果不同。</p>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/state" target="_blank" rel="external">状态模式 案例参考code</a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[策略模式]]></title>
      <url>http://nenglee.com/2016/11/13/Pattern/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">


<p>策略模式一般在选择不同的算法上用的比较多，例如XXX想计算乘坐不同的交通工具上班，所需要的多少钱，交通工具定义为公交车和地铁俩种方式，这种情况，用硬编码if–else()很简单,定义交通类型，执行不同的算法方法。可是遇到晚班考虑打的士回家，没有计算的士的价格？这里我们可以理解的士为后期的新增需求，那么你就要在if判断中加不同的类型，以此类推。</p>
<p>但是这种方法不属于开闭原则(OCP)，和单一职责，如果我们把算法抽象出来，提供不同的接口，不同的算法或则策略不同的实现类，这样客户端就可以通过注入的方式来实现算法或者动态调用，这样的模式扩展性更高，维护性更强。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>策略模式定义了一些列的算法，并将每一个算法封装起来，而且使它们可以相互替换，策略模式让算法独立于使用者的独立变化。</p>
<h2 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h2><p><img src="http://of6bvxslc.bkt.clouddn.com/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8FStragety.png" alt="策略模式Stragety"></p>
<h2 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h2><p>最核心应该是调用者，如何注入，也就是给不同的算法类，返回计算后的结果也就是Context中的 <font color="#F79646"> <strong>int setBilling(CalculateStrategy strategy, int km)</strong> </font> 函数。</p>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/stragery" target="_blank" rel="external">Stragety接口与具体实现</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initCreate</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">int</span> km = <span class="number">20</span>;</div><div class="line">       <span class="comment">//new 公交对象</span></div><div class="line">       BusStragery mBusstragery = <span class="keyword">new</span> BusStragery();</div><div class="line">       <span class="comment">//new 地铁对象</span></div><div class="line">       SubWayStragery mSubstragery = <span class="keyword">new</span> SubWayStragery();</div><div class="line"></div><div class="line">       <span class="keyword">int</span> mBusbilling = setBilling(mBusstragery, km);</div><div class="line">       <span class="keyword">int</span> mSubbilling = setBilling(mSubstragery, km);</div><div class="line">       setTextStr(<span class="string">"计费其中 公交:"</span> + mBusbilling + <span class="string">"   地铁:"</span> + mSubbilling);</div><div class="line"></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 计算算法</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> strategy 抽象计算接口</div><div class="line">    * <span class="doctag">@param</span> km       路程km</div><div class="line">    * <span class="doctag">@return</span> 金额</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">setBilling</span><span class="params">(CalculateStrategy strategy, <span class="keyword">int</span> km)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> strategy.calculatePrice(km);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>策略模式主要是用来分离算法，在相同的行为抽象下有不同的具体实现策略,这个模式很好阐述面向对象中的开闭原则，也就是定义抽象，注入不同的实现，从而达到很好的后期扩展。</p>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/stragery" target="_blank" rel="external">Stragety策略模式 案例参考code</a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[抽象工厂模式]]></title>
      <url>http://nenglee.com/2016/11/10/Pattern/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">


<p>抽象工厂模式也是属于创建模式之一,那么和工厂模式又是怎么一回事？联想一下现实中的工厂，每个工厂出的产品或者说加工的东西都是确定性，也就是具体的，那么抽象工厂就把工厂也抽象化，对于出来的产物是不确定的。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>为了创建一组相关或者是相互依赖的对象提供一个接口，而不需要指定它们的具体类。</p>
<h2 id="抽象工厂的使用场景"><a href="#抽象工厂的使用场景" class="headerlink" title="抽象工厂的使用场景"></a>抽象工厂的使用场景</h2><p>一个对象族有相同的约束时，可以用抽象工厂模式。好比如:车厂要生产俩款汽车一个是Q3、另一个是Q7,但是他们的轮胎(小轮胎&amp;&amp;大轮胎)、发动机、制动系统不一样，这个时候工厂是抽象的，其中轮胎、发动机、制动系统定义为接口，然后每种不同产品实现自己的接口，Q3和Q7继承工厂并且组装自己需要的类型配件。</p>
<h2 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h2><p><img src="http://of6bvxslc.bkt.clouddn.com/%E6%8A%BD%E8%B1%A1Factory%E6%A8%A1%E5%BC%8F.png" alt="抽象工厂模式"></p>
<h2 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h2><p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/factory_abs/factory/IcarFactory.java" target="_blank" rel="external">IcarFactory.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 车厂的组成接口</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/11/13.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IcarFactory</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 抽象 轮胎</div><div class="line">     */</div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">ITire</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function">String <span class="title">tire</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 抽象 发动机</div><div class="line">     */</div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">IEngine</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function">String <span class="title">engine</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 抽象 制动系统</div><div class="line">     */</div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">IBrake</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function">String <span class="title">brake</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/factory_abs/factory/CarFactory.java" target="_blank" rel="external">CarFactory.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 抽象车厂</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/11/13.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 轮胎</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> IcarFactory.<span class="function">ITire <span class="title">createTire</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 发动机</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> IcarFactory.<span class="function">IEngine <span class="title">createEngine</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 制动系统</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> IcarFactory.<span class="function">IBrake <span class="title">createBrake</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>优点:<br>最为显著的就分离接口和实现，调用者只是面向产品的接口，使得从具体的产品中解耦，同时基于接口与实现分离,使得抽象的工厂在切换产品类型时候更加灵活，容易。</p>
<p>劣势:<br>抽象一个接口，就要新增很多类文件,不容易扩展，每次新增一个产品都要修改抽象类，那么所有具体的工厂都会被修改。</p>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/factory_abs" target="_blank" rel="external">抽象工厂模式 案例参考code</a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[工厂模式]]></title>
      <url>http://nenglee.com/2016/11/08/Pattern/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>工厂模式(Factory Pattern)属于创建模式之一,那么工厂方法模式是一种结构简单，其实在我们平成的开发应用也很广泛,只是没有留心关注，例如Activity中各种生命周期方法，在工厂模式中，我们在调用者不会暴露创建逻辑，而是通过一个共同的接口来指向需要创建的对象。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>定义一个用于创建对象的接口，让子类来决定实例化哪一个类</p>
<h3 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h3><p><img src="http://of6bvxslc.bkt.clouddn.com/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%9E%8B%E5%9B%BE.png" alt="工厂模式Factory"></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>工厂模式是一个很好的创建模式类型，通过抽象工厂的获得抽象产品，然后由接口和接口之间相互协作，调用者根本不需要知道具体工厂是如何生产，却能给你想要的结果集。</p>
<p>那么在抽象工厂中如何获取对应的抽象产品呢？</p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/factory/Factory.java" target="_blank" rel="external">Factory.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> &lt;T extends Product&gt; <span class="function">T <span class="title">createProdict</span><span class="params">(Class&lt;T&gt; lsz)</span></span>;</div></pre></td></tr></table></figure></p>
<p>这里用到泛型T的概念，而且这个泛型T必须是Product的子类，然后返回当前产品的子类，lsz为产品子类的类名，具体是怎么实现的呢？java中有一个反射机制，来获取对应实例。</p>
<p><a href="https://github.com/lineng11/DesingPatter/blob/master/app/src/main/java/com/neng/app/factory/ConcreteFactory.java" target="_blank" rel="external">ConcreteFactory.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> &lt;T extends Product&gt; <span class="function">T <span class="title">createProdict</span><span class="params">(Class&lt;T&gt; lsz)</span> </span>&#123;</div><div class="line">    Product product = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//这里通过具体工厂来获取抽象对象产品 Product</span></div><div class="line">        product = (Product) Class.forName(lsz.getName()).newInstance();</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (T) product;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样写代码量很简介,不然的话获取三个产品实例的方法，毕竟我们只要产品的抽象类，就可以获取它的抽象方法。</p>
<p>总的来说，抽象工厂的设计要给赞，完美的阐述接口编程的思想，调用者根本不需知道具体的操作流程，就可以得到想要的结果，就比检测员在查看产品是否合格，他不必知道具体的生产流程，你只要给我具体的产品就行了，我就可以出监测报告来判断你的生产是否合格。<br>但是工厂模式也有自己的弊端，就是每次要为工厂方法添加新的产品时候，都需要编写一个产品类，同时还有爱引入抽象层，导致结构复杂，所以清晰的理解就显得尤为重要。</p>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/singleton" target="_blank" rel="external">工厂模式Factory 案例参考code</a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[原型模式]]></title>
      <url>http://nenglee.com/2016/11/07/Pattern/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>原型模式是一种创建模式,从字面意思来理解大致是一个原型模版，当然不是这么简单，在程序的世界里，可以把原型理解一个对象，那么对这个模型对象做一定操作后，如何保证原来的模型对象的状态不改变？</p>
<p>例如：程序中有一个User的用户信息，这个对象是有数据的，但是修改了他的信息后，由于一定因素未把修改的信息提交给后端，此时如何保存程序中有俩个User对象，一个是原型，一个是修改后模型，那后者对象如何而来？有人说那么简单，直接再new一个？假设获取用户是在for中要获取好几个对象情况下，直接new会扩涨内存浪费，导致信息不完整因素。对此类问题原型模式就是用于解决此类问题。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>用原型实例指定创建对象，通过拷贝原有的对象，从而产生一个新对象。有点类似复制一个文本，然后在副本文件里面做操作，且不影响原文件。<br>原型模式是通过实现 Cloneable接口，然后重写 Object类下的clone()函数.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Cloneable)) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CloneNotSupportedException(<span class="string">"Class "</span> + getClass().getName() +</div><div class="line">                                             <span class="string">" doesn't implement Cloneable"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> internalClone();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Native helper method for cloning.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">native</span> Object <span class="title">internalClone</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>看到这里就很清楚，就是克隆Clone一个对象模型从而生成一个新对象，这样的方式更快捷，浅拷贝实现 Cloneable，重写、深拷贝是通过实现 Serializable 读取二进制流。</p>
<h3 id="模拟场景"><a href="#模拟场景" class="headerlink" title="模拟场景"></a>模拟场景</h3><p>在login成功后，把User信息存放到Session中，然后修改User信息产生一个新User,那么原始User信息是不改变</p>
<p>更具原型模式定义，只要在User对象中实现Cloneable接口，然后重新clone函数即可</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line">    <span class="keyword">public</span> String phone;</div><div class="line">    <span class="keyword">public</span> Address address;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        User user = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            user = (User) <span class="keyword">super</span>.clone();    <span class="comment">//克隆一个新的User</span></div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</div><div class="line">                <span class="string">"age="</span> + age +</div><div class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", phone='"</span> + phone + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", address="</span> + address +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么最后总结下，原型模式会在那么情况下，考虑使用:</p>
<ol>
<li>资源优化场景</li>
<li>类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等</li>
<li>性能和安全要求的场景</li>
<li>通过 new 产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式</li>
<li>一个对象多个修改者的场景</li>
<li>一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用</li>
<li>在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone 的方法创建一个对象，然后由工厂方法提供给调用者</li>
</ol>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/prototype" target="_blank" rel="external">原型模式 参考code</a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Builder建造者模式]]></title>
      <url>http://nenglee.com/2016/11/05/Pattern/Builder%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>Builder模式是一步一步创建一个复杂的对象,它允许用户在不知道内部构建细节的情况下，可以更精细的控制对象的构造流程，为了将复杂的过程和它的内部解耦，使得构建的过程和部件表示隔离开来。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的结果表示。</p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol>
<li>相同的方法，不同的执行顺序，产生不同的事件结果</li>
<li>多个部件或零件，都可以装配到一个对象中，但是产生的运行结果又不相同时</li>
<li>产品类非常的复杂,或者产品类中的调用顺序不同，从而产生不同的作用效果，这个时候建造者非常适合</li>
<li>当初始化一个对象特别复杂，如参数多，类型多，且很多参数都具有默认值时</li>
</ol>
<p>厂商生产电脑，因为有各种各样的Name、cpu、display等一些列信息属性，不同的配置组装搭配配置不同的电脑信息。<br>为了更好理解用Builder设置模式，</p>
<h3 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h3><p><img src="http://of6bvxslc.bkt.clouddn.com/Builder%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.png" alt="Builder建造者模式"></p>
<p>说明：</p>
<ul>
<li>Computer：产品的抽象类，目前有俩款产品电脑(Mac、ThinkPad)</li>
<li>Builder:  Builder抽象类，规范产品的组建，一般是由子类实现·体的组件过程</li>
<li>ConcreteBuilder：具体的Builder类</li>
</ul>
<p>建造者模式最核心属性ConcreteBuilder类,在实例化时候获得Computer，因此有了对象属性函数，那么就在此进行组装，在组装的时候有一定的选择性，那么这个选择条件就交的个用户或者需求，所称建造者。</p>
<blockquote>
<p>不知道什么原因,高亮代码(整个Class)前面为什么会空这么多行数，无法顶头，导致浏览效果Zzz.  </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 具体构建者Builder</div><div class="line"> * User: Created by MoMo - Neng. on</div><div class="line"> * Data: 2016/11/5.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> Computer computer;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteBuilder</span><span class="params">(Computer computer)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.computer = computer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">buildName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        computer.setName(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">buildDisolay</span><span class="params">(String display)</span> </span>&#123;</div><div class="line">        computer.setDisplay(display);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">buildCPU</span><span class="params">(String cpu)</span> </span>&#123;</div><div class="line">        computer.setmCpu(cpu);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">buildOS</span><span class="params">()</span> </span>&#123;</div><div class="line">        computer.setOS();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">create</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> computer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ConcreteBuilder <span class="title">construst</span><span class="params">(String name, String display, String cup)</span> </span>&#123;</div><div class="line">        buildName(name);</div><div class="line">        buildDisolay(display);</div><div class="line">        buildCPU(cup);</div><div class="line">        buildOS();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ConcreteBuilder <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        buildName(name);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ConcreteBuilder <span class="title">setCPU</span><span class="params">(String cpu)</span> </span>&#123;</div><div class="line">        buildCPU(cpu);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ConcreteBuilder <span class="title">setDisplay</span><span class="params">(String display)</span> </span>&#123;</div><div class="line">        buildDisolay(display);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ConcreteBuilder <span class="title">setOs</span><span class="params">()</span> </span>&#123;</div><div class="line">        buildOS();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码中38行后面的方式，其中返回参数都是当前this(ConcreteBuilder)这是关键,通过组装步骤,可以形成链式调用.</p>
<blockquote>
<p>.setName().setDisplay().setCPU().setOs()…..  再通过Create() 完成整个配置组装</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Computer mMacConputer = <span class="keyword">new</span> ConcreteBuilder(<span class="keyword">new</span> MacBook())</div><div class="line">        .setName(<span class="string">"Macbook pro 2016 新款 Touch Bar"</span>)</div><div class="line">        .setDisplay(<span class="string">"13.3 英寸 (对角线) LED 背光 Retina 显示屏"</span>)</div><div class="line">        .setCPU(<span class="string">"2.9GHz 四核 Intel Core i7 处理器 Turbo Boost 最高可达 3.8GHz"</span>)</div><div class="line">        .setOs()</div><div class="line">        .create();</div></pre></td></tr></table></figure>
<p>总结：通过模型图 &amp;&amp; 代码都可以看到在构建者Builder时候，来选择需要的函数，来达到自己需求，看到上面这些，在Android里AlertDialog是就最为经典代表，以及很经典ImageLoader中配置Config初始化…很多时候都见过这种写法，却不知道专语名称是什么？理解内在设计思想，这个点是值得学习，知其然知其所以然。</p>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/builder" target="_blank" rel="external">Builder建造模式 案例参考code</a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[单例模式]]></title>
      <url>http://nenglee.com/2016/11/04/Pattern/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">


<p>单例模式（Singleton Pattern）在客户中内存有限，减少内存开支，特别是一个对象频繁的创建使用，或者做全局唯一对象时候，特别理想化。</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>确保某一个类中只有一个实例，而且自己实例化，并且向整个系统提供当前唯一的实例</p>
<h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h2><ul>
<li>构造函数不对外开放，一般为私有修饰Private</li>
<li>通过一个静态的方法返回类的对象</li>
<li>确保单例中的对象有且只有一个，特别是在多线程的情况下</li>
<li>确保单例类对象在反序列化时候，不会被重新构建对象</li>
</ul>
<h2 id="单例模式分类"><a href="#单例模式分类" class="headerlink" title="单例模式分类"></a>单例模式分类</h2><h3 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Singleton instance;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</div><div class="line">        instance = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>细心读者或许已经发现,在 getInstance 方法前面加有 synchronized关键字,主要是该方法是一个同步方法,假设遇到多线程的情况下，synchronized保证单例对象唯一的手段方式。<br>优点:需要时候才会new初始化<br>缺点:每次调用都会进行同步,造成不必要的开销，浪费资源</p>
<h3 id="Double-Check-Lock-（DCL）"><a href="#Double-Check-Lock-（DCL）" class="headerlink" title="Double Check Lock （DCL）"></a>Double Check Lock （DCL）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Singleton instance;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;</div><div class="line">            <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">                instance = <span class="keyword">new</span> Singleton();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>DCL方式实现了单例能够在需要的时候才初始化,俩个if判断，又能保证线程的安全性，并且单例对象初始化调用getInstance不进行同步锁</p>
<h3 id="静态类部类"><a href="#静态类部类" class="headerlink" title="静态类部类"></a>静态类部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> SingletonHolder.instance;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当第一次加载Singleton类的时候并不会初始化,只有在第一次调用getInstance时候才会导致instance初始化，主要是Singleton第一次调用时候会加载里面SingletonHolder类，这种方法不仅能够保证线程安全,而且也能保证单例的对象的唯一性,同时也可以延迟单例的实例化,比较推荐的一种实现方法。</p>
<blockquote>
<p>Android需要注意单例中持有Context,那么很容易导致内存泄露，在传递对象时候最好Application Context来避免。</p>
</blockquote>
<p><a href="https://github.com/lineng11/DesingPatter/tree/master/app/src/main/java/com/neng/app/singleton" target="_blank" rel="external">Singleton 案例参考code</a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android事件分发]]></title>
      <url>http://nenglee.com/2016/10/27/Android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>项目中遇到重写自定义View,特别是对事件交互、如果处理不当，就会造成事件冲突，影响体验。那么事件的分发就尤为重要,理解来龙去脉是前提,在面试中八成都会问到这个体系，所以说很重要、很重要，在说一遍很重要。</p>
<a id="more"></a>   
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<p>事件分发牵涉到三个方法:</p>
<ol>
<li><p>当前事件是否：分发</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>当前事件是否：拦截</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(ev);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>当前事件是否：执行</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>为了更好的理解传递流程,我们看下图解:<br><img src="http://of6bvxslc.bkt.clouddn.com/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91.png" alt="事件分发"></p>
<ul>
<li>其中需要注意 <font color="#F79646"> <strong>onInterceptTouchEvent</strong> </font> 拦截方法只存在ViewGroup中</li>
</ul>
<p>事件的分发是由 <strong>Activity –&gt; ViewGroup –&gt; View</strong> 这样的一个流程走势,也就是说当手机获取用户一个手势命令,宏观的讲(前提没有事件干涉下)先来到Activity传递到内部Layout布局ViewGroup中再一次传递到子View中。</p>
<p>在每次传递的时候会执行上图中对应的方法,通过该方法体的返回值来判断如何走,部分Blog都讲到 <strong>true代表消费,fasle就传递？</strong> 不能这么笼统讲,我们要看到该事件处在那一层.以及在那个方法体下。比如说在Activity中 dispatchTouchEvent 不管你返回值是 true|false 后续发方法体都不会执行,事件直接消费掉；如果句在 onTouchEvent 方法体下是成立的,所以说要明确当初环境。</p>
<p>那么在这么多层结构下，以及多个方法体直接如何分发？就白人说的话就是：<strong>走到那一层(Activity、ViewGroup、View)，开启那个门(返回值)，决定选择上楼还是下楼(传递方法)</strong></p>
<p><img src="http://of6bvxslc.bkt.clouddn.com/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%B5%81%E7%A8%8B.png" alt="手势分发流程"></p>
<p>上图为正常的获取手势走向流程，其中红色(1~7)线为按下到事件消费，所以一定要仔细看(看不清请单独打开连接)</p>
<hr>
<h2 id="返回值：true-、false-、-super-判断方向传递"><a href="#返回值：true-、false-、-super-判断方向传递" class="headerlink" title="返回值：true 、false 、 super. 判断方向传递"></a>返回值：true 、false 、 super. 判断方向传递</h2><font color="#696980"><br>1. Activity：dispatchTouchEvent() 重写返回值如不是 super. 那么事件也无法传递<br><br>2. ViewGroup：dispatchTouchEvent() 返回 false 事件分发上层onTouchEvent()，只有super.情况下继续向下传递<br><br>3. ViewGroup：onInterceptTouchEvent() 返回 true拦截就直接传递自己的 onTouchEvent(), 当为 false | super.不拦截传递子View层<br><br>4. View：dispatchTouchEvent() 返回 false 事件分发上层onTouchEvent()，只有super.情况下继续向下传递 (和ViewGroup一样)<br><br>5. 当事件在 dispatchTouchEvent() 和 onTouchEvent() 返回值为true，改事件一定消费掉，就不传递<br><br>6. 当事件在 onTouchEvent() 返回值为false | super. 传递上层onTouchEvent() ,若返回值为true直接消费<br></font>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git 安装&使用]]></title>
      <url>http://nenglee.com/2016/10/20/git%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>Git免费、开源的分布式版本控制系统,以及分支作业的工具，与Svn相比更加灵活,最大区别就是分布式,以及高效率的分支开发,开源的世界现在都用这个管理。</p>
<p>场景:</p>
<ol>
<li>项目编写,因为突发需求砍掉改功能,正在编写ing,怎么办?   (你可千万别逗一点点删,git可以帮你回到上个需求点Tag)</li>
<li>产品说这个功能点,下个版本在上,可是已经开发好,怎么办?  (git帮你开个分支Branch,下个版本在合并merge)</li>
<li>三人同时工作,功能点不同,相互直接有关联怎么办?最后如何整合？ (git多分支,同一个仓库作业很好解决此内问题)</li>
<li>假设服务器仓库被黒了挂掉了怎么办,哈哈？ (git分布式,每个工作机器本地都有一个仓库Rrpository)</li>
<li>版本v1临时要修复bug,正在开发v1.1版本ing,怎么办? (这里和1.问题一个性质)</li>
</ol>
<p>以上一般开发遇到问题,git版本控制很好解决</p>
<blockquote>
<p>git俩大特点：分支 / 分布式</p>
</blockquote>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="Git安装环境"><a href="#Git安装环境" class="headerlink" title="Git安装环境"></a>Git安装环境</h2><p>关于安装,基本没有什么难道,主要是安装后配置 <a href="https://git-scm.com/downloads" target="_blank" rel="external">Git下载传送门</a></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>安装好,新建一个Git User,不然谁知道谁是谁.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"John Doe"</span>                <span class="comment"># 名字</span></div><div class="line">$ git config --global user.email <span class="string">"johndoe@example.com"</span>    <span class="comment"># 邮箱</span></div></pre></td></tr></table></figure>
<p>如何查看?</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ git config <span class="_">-l</span></div><div class="line">core.symlinks=<span class="literal">false</span></div><div class="line">core.autocrlf=<span class="literal">true</span></div><div class="line">color.diff=auto</div><div class="line">color.status=auto</div><div class="line">color.branch=auto</div><div class="line">color.interactive=<span class="literal">true</span></div><div class="line">pack.packsizelimit=2g</div><div class="line">help.format=html</div><div class="line">http.sslcainfo=/bin/curl-ca-bundle.crt</div><div class="line">sendemail.smtpserver=/bin/msmtp.exe</div><div class="line">diff.astextplain.textconv=astextplain</div><div class="line">rebase.autosquash=<span class="literal">true</span></div><div class="line">user.name=NengLee</div><div class="line">user.email=383356258@qq.com</div><div class="line">core.autocrlf=<span class="literal">false</span></div><div class="line">core.excludesfile=E:\Program Files\Git\Git\cmd\git.exe</div></pre></td></tr></table></figure>
<h3 id="配置SHH"><a href="#配置SHH" class="headerlink" title="配置SHH"></a>配置SHH</h3><p>当要和GitHub配合还需要SHH密钥,需要先创建ssh</p>
<p>1.查看是否已经有了ssh密钥：cd ~/.ssh<br>如果没有密钥则不会有此文件夹 ls查看有： id_rsa(私钥保存好不要公开) | id_rsa.pub(公钥给第三方验证)</p>
<p>2.生存密钥：</p>
<p><font color="#0099ff"> $ ssh-keygen -t rsa -C “你的邮箱,如:johndoe@example.com” </font><br>按3个回车，密码为空</p>
<p>3.给Github添加 id_rsa.pus公钥<br>你的Github下面的 <font color="#0099ff"> Settings  –&gt; SHH add GPG Keys  –&gt; New SHH Keys </font>  把公钥(id_rsa.pub)内容放到Key中</p>
<p>4.查看git 和 Github是否关联</p>
<blockquote>
<p>$ ssh -T git@github.com</p>
</blockquote>
<p><img src="http://of6bvxslc.bkt.clouddn.com/ssh.jpg" alt="SHH关联GIthub成功"></p>
<h3 id="用git使用Github"><a href="#用git使用Github" class="headerlink" title="用git使用Github"></a>用git使用Github</h3><p>如果Github仓库存在, 直接clone</p>
<blockquote>
<p>$ git clone git@github.com:lineng11/ViewPageDrawer.git</p>
</blockquote>
<p>当你在Github 刚刚新建一个空项目,那么就要在本地init一个git然后pusl</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git init                           <span class="comment">#初始化git.  根目录会有一个隐藏的.git文件   可以用命令：  ls -al  来查看当前目录</span></div><div class="line">$ git add .                          <span class="comment">#需要上传当前目录所有文件</span></div><div class="line">$ git commit -m  <span class="string">"Init LogTag"</span>       <span class="comment">#提交本地缓冲区   m ""是对本次提交的一次说明</span></div><div class="line">$ git remote add origin git@github.com:lineng11/ViewPageDrawer.git   <span class="comment">#当前仓库和远程的Github进行关联</span></div><div class="line">$ git push -u origin master          <span class="comment">#推送到远程仓库的主分支master上</span></div></pre></td></tr></table></figure>
<h2 id="git工作原理"><a href="#git工作原理" class="headerlink" title="git工作原理"></a>git工作原理</h2><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>本来想画一个工作流程图,试了几个都不够理想,实在拿不出手,就用网络上一图如下:<br><img src="http://of6bvxslc.bkt.clouddn.com/git_Process.png" alt="GIt工作流程图"></p>
<p>1.Workspace：工作区<br>2.Index / Stage：暂存区<br>3.Repository：仓库区（本地）<br>4.Remote：远程仓库（远程）</p>
<h3 id="流程代码-不包含多分支情况下"><a href="#流程代码-不包含多分支情况下" class="headerlink" title="流程代码:(不包含多分支情况下)"></a>流程代码:(不包含多分支情况下)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">$ git comment -m <span class="string">"logTag"</span>  </div><div class="line">$ git pull   </div><div class="line">$ git push</div></pre></td></tr></table></figure>
<blockquote>
<p>在本地仓库推送push时候,先拉取pull,防止冲突在远程库中,要保证远程库是干净</p>
</blockquote>
<h3 id="流程说明"><a href="#流程说明" class="headerlink" title="流程说明:"></a>流程说明:</h3><ol>
<li>工作区的文件添加到暂存区里面</li>
<li>提交到本地仓库</li>
<li>拉取一次远程项目(是否有更新文件? 没有直接看5 ||  有更新是直接看4)</li>
<li>此时存在俩种情况  A:冲突(后面说明)   B:没有文件冲突   </li>
<li>把本地提交远程</li>
</ol>
<h3 id="分支模式"><a href="#分支模式" class="headerlink" title="分支模式:"></a>分支模式:</h3><ul>
<li>master-发布</li>
<li>develop-主开发</li>
<li>hotfix-修复</li>
</ul>
<hr>
<h2 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h2><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p><code>$ git config</code></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$ git config–list</td>
<td>显示当前的Git配置</td>
</tr>
<tr>
<td>$ git config-e[–global]</td>
<td>编辑Git配置文件</td>
</tr>
<tr>
<td>$ git config[–global]user.name”[name]”</td>
<td>设置提交代码时的用户Name</td>
</tr>
<tr>
<td>$ git config[–global]user.email”[email]”</td>
<td>设置提交代码时的用户email</td>
</tr>
</tbody>
</table>
<h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p><code>$ git add</code></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$ git add [file1][file2]…</td>
<td>添加指定文件到暂存区</td>
</tr>
<tr>
<td>$ git add .</td>
<td>添加当前目录的所有文件到暂存区</td>
</tr>
</tbody>
</table>
<h3 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h3><p><code>$ git rm</code></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$ git rm [file1][file2]…</td>
<td>删除工作区文件，并且将这次删除放入暂存区</td>
</tr>
</tbody>
</table>
<h3 id="提交-更新"><a href="#提交-更新" class="headerlink" title="提交/更新"></a>提交/更新</h3><p><code>$ git commit</code></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$ git commit -m [message]</td>
<td>放入暂存区</td>
</tr>
<tr>
<td>$ git puah</td>
<td>推到远程</td>
</tr>
<tr>
<td>$ git pull</td>
<td>拉取</td>
</tr>
</tbody>
</table>
<h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p><code>$ git branch</code></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$ git branch</td>
<td>查看所有本地分支</td>
</tr>
<tr>
<td>$ git branch -r</td>
<td>查看所有远程分支</td>
</tr>
<tr>
<td>$ git branch -a</td>
<td>查看所有  本地分支 &amp;&amp; 远程分支</td>
</tr>
<tr>
<td>$ git branch [branch-name]</td>
<td>新建一个分支 (依然停留当前分支)</td>
</tr>
<tr>
<td>$ git branch -b [branch-name]</td>
<td>新建一个分支 (并且切换到新创分支)</td>
</tr>
</tbody>
</table>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$ git status</td>
<td>显示有变更的文件</td>
</tr>
<tr>
<td>$ git tag</td>
<td>列出所有tag</td>
</tr>
<tr>
<td>$ git tag [tag]</td>
<td>新建一个tag在当前commit</td>
</tr>
<tr>
<td>$ git show [tag]</td>
<td>查看tag信息</td>
</tr>
<tr>
<td>$ git push [remote] [tag]</td>
<td>提交指定tag</td>
</tr>
<tr>
<td>$ git checkout [file]</td>
<td>恢复暂存区的指定文件到工作区(恢复原来,丢弃现在修改)</td>
</tr>
<tr>
<td>$ git checkout [branch-name]</td>
<td>切换到另一个分支 branch-name</td>
</tr>
<tr>
<td>$ git checkout -</td>
<td>切回上次分支</td>
</tr>
<tr>
<td>$ git checkout-b[branch][tag]</td>
<td>新建一个分支，指向某个tag</td>
</tr>
<tr>
<td>$ git checkout -d [branch-name]</td>
<td>删除分支</td>
</tr>
<tr>
<td>$ git merge [branch]</td>
<td>合并指向分支,到当前分支</td>
</tr>
<tr>
<td>$ git log</td>
<td>显示当前分支的版本历史</td>
</tr>
<tr>
<td>$ git diff</td>
<td>暂存区和工作区的差异(比较)</td>
</tr>
</tbody>
</table>
<h3 id="git遇到error"><a href="#git遇到error" class="headerlink" title="git遇到error"></a>git遇到error</h3><h2 id="error-failed-to-push-some-refs-to-‘git-github-com…-’"><a href="#error-failed-to-push-some-refs-to-‘git-github-com…-’" class="headerlink" title="error:failed to push some refs to ‘git@github.com….’"></a>error:failed to push some refs to ‘git@github.com….’</h2><p>此为问题是远程git存在的文件资源与本地存在差异，远程有的文件、本地没有<br>解决方式，pull下来，然后合并<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull --renase origin master</div></pre></td></tr></table></figure></p>
<p><img src="http://of6bvxslc.bkt.clouddn.com/git20161107012841.jpg" alt="error:failed to push some refs to"></p>
<h3 id="感谢-参考"><a href="#感谢-参考" class="headerlink" title="感谢 参考"></a>感谢 参考</h3><p><a href="https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-Git-%E7%AE%80%E5%8F%B2" target="_blank" rel="external">Git官方</a><br><a href="http://gitref.org/zh/branching/" target="_blank" rel="external">Git参考手册</a><br><a href="http://www.jianshu.com/p/6da80bb7f796#" target="_blank" rel="external">简书:常用Git命令清单 </a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何搭建属于自己的Blog]]></title>
      <url>http://nenglee.com/2016/10/17/Hexo-Blog-%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>如何搭建一个Blog,目前最为方便Github Pages形式搭建,Github Pages可以被认为是用户编写、托管在github上的静态网页，并且存在Github下面一个io站点，都是一些写好的静态html页面，可以很直接访问，而且方便管理…</p>
<p>例如: <a href="https://lineng11.github.io" target="_blank" rel="external"><strong>lineng11.github.io </strong></a><br><a id="more"></a></p>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<p>其实搭建Blog方式有很多中方式，对面Web知识不足的小伙伴，就选择一个脚本生成器，文档也是解析成Html静态页面,那么目前比较友好的Blog生成器,以下三种：</p>
<ol>
<li><a href="http://jekyllcn.com/" target="_blank" rel="external">Jekyll</a> Jekyll是由ruby gem包，同时它是一个解析引擎，可以将templates,partials,markdown等解析成静态网站页面</li>
<li><a href="http://gohugo.io/" target="_blank" rel="external">Hugo</a> Hugo由Go语言实现的静态网站生成器,简单、易用、高效、易扩展、快速部署.</li>
<li><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> Hexo一个简单地、轻量地、基于Node的一个静态博客框架，快速、简单且功能强大的 Node.js</li>
</ol>
<p>就是所谓的静态页面生成器框架,推荐 <font color="#0099ff"> <a href="http://gohugo.io/" target="_blank" rel="external">Hugo</a>、<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> </font> 在搭建时候都试过，最后选择<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>,Hexo主题更加吸引当下，网上对Hexo资料也比较丰富,加上Node.js也是wen比较红火的语言,总体在搭建已经流程上都差不多,环境/模版/部署，二者很相似,既然你来到这里,相信你和我一样更加喜欢<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a></p>
<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul>
<li><a href="http://nodejs.cn/" target="_blank" rel="external">Node.js的安装</a></li>
<li>Git &amp; Github 帐号 创建 <a href="https://pages.github.com/" target="_blank" rel="external">Github Pages  </a></li>
<li>Hexo (Node 命令 npm install -g hexo) 安装Hexo</li>
</ul>
<h3 id="查看npm版本-监测npm是否成功"><a href="#查看npm版本-监测npm是否成功" class="headerlink" title="查看npm版本,监测npm是否成功"></a>查看npm版本,监测npm是否成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm -v</div></pre></td></tr></table></figure>
<h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo</div></pre></td></tr></table></figure>
<hr>
<h2 id="搭建Blog"><a href="#搭建Blog" class="headerlink" title="搭建Blog"></a>搭建Blog</h2><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> f:GitHubPage/Hexo              <span class="comment">#进入Hexo目录             </span></div><div class="line">$ npm install -g hexo               <span class="comment">#安装hexo             </span></div><div class="line">$ hexo init B<span class="built_in">log</span>                    <span class="comment">#初始化一个 Blog模版生成器</span></div><div class="line">$ <span class="built_in">cd</span> B<span class="built_in">log</span>                           <span class="comment">#进入Blog      </span></div><div class="line">$ hexo g                            <span class="comment">#g 或 hexo generate</span></div><div class="line">$ hexo s                            <span class="comment">#s 或 hexo server  *可以在http://localhost:4000/</span></div></pre></td></tr></table></figure>
<h3 id="Hexo模版介绍"><a href="#Hexo模版介绍" class="headerlink" title="Hexo模版介绍"></a>Hexo模版介绍</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">|-- .deploy_git                <span class="comment">#git部署的文件夹，忽略</span></div><div class="line">|-- node_modules               <span class="comment">#node模块文件夹，忽略</span></div><div class="line">|-- public                     <span class="comment">#自动生成的静态页面存放的文件夹，忽略</span></div><div class="line">|-- scaffolds                  <span class="comment">#忽略</span></div><div class="line">|** <span class="built_in">source</span>                     <span class="comment">#存放需要post的文章的文件·</span></div><div class="line">|** themes                     <span class="comment">#放主题的文件夹，看名字就知道能放不止一个主题*</span></div><div class="line">|-- .gitignore                 <span class="comment">#hexo的.gitignore文件，忽略</span></div><div class="line">|** _config.yml                <span class="comment">#配置文件*</span></div><div class="line">|-- db.json                    <span class="comment">#忽略</span></div><div class="line">|-- package.json               <span class="comment">#记录hexo参数的文件，忽略</span></div><div class="line">└── README.md                  <span class="comment">#hexo的README文件，忽略</span></div></pre></td></tr></table></figure>
<h3 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h3><h4 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h4><p><code>hexo cl    #hexo clean</code></p>
<h4 id="生成模版"><a href="#生成模版" class="headerlink" title="生成模版"></a>生成模版</h4><p><code>hexo g   #hexo generate</code></p>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p><code>hexo s   #hexo server</code></p>
<h4 id="新建md"><a href="#新建md" class="headerlink" title="新建md"></a>新建md</h4><p><code>hexo new &quot;Hello-World&quot;   #新建一个md文件,存放在 _posts下面</code></p>
<h4 id="发布-部署github-pages"><a href="#发布-部署github-pages" class="headerlink" title="发布/部署github pages"></a>发布/部署github pages</h4><p><code>hexo d  #hexo deploy</code></p>
<h4 id="其他命令Help"><a href="#其他命令Help" class="headerlink" title="其他命令Help"></a>其他命令Help</h4><p><img src="/content_img/hexo_help.jpg" alt="Hexo 命令">  </p>
<hr>
<h2 id="部署意外-坑"><a href="#部署意外-坑" class="headerlink" title="部署意外(坑)"></a>部署意外(坑)</h2><p>Hexo 目前没有自带 Git 部署模块，需手动安装<br><code>npm install hexo-deployer-git --save</code></p>
<p><br><br>发布github Page 需要修改_config.yml下的deploy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#Deployment</div><div class="line">#Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:你的Github名/你的Github名.github.io.git  #repo: git@github.com:lineng11/lineng11.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Markdown 基本用法]]></title>
      <url>http://nenglee.com/2016/10/12/MarkDown/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p>记得接触Markdown文档，后台小哥给的git文档,各种Api在页面呈现，清晰明了</p>
<p>对应网络书写,选择一款编译器，MarkDonw是目前最优,学习成本低，兼容性强,排版简约大方,注重内容的高生产力，最后很轻易导出html等格式，放入自己的Blog中及其他门户</p>
<p>Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，很多门户都采用例如 github、简书…</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<hr>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown 中，你只需要在文本前面加上 #  [#######]个数随着增加标题字号减小</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">######  Markdown        H6</span></div><div class="line"><span class="comment">#####   Markdown        H5</span></div><div class="line"><span class="comment">####    Markdown        H4</span></div><div class="line"><span class="comment">###     Markdown        H3</span></div><div class="line"><span class="comment">##      Markdown        H2</span></div><div class="line"><span class="comment">#       Markdown        H1</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Markdown 语法中引用对应的符号代码需要空一格.才能生效 最基本知识。切记！</p>
</blockquote>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表有序 和 无序俩中，就在前面数字或者*(-)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1. Android</div><div class="line">2. ios</div><div class="line">3. WindowPh  </div><div class="line"></div><div class="line">* Android</div><div class="line">* ios</div><div class="line">* WindowPh</div></pre></td></tr></table></figure>
<p>例如:</p>
<ul>
<li>Android</li>
<li>ios</li>
<li>WindowPh</li>
</ul>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>  引用就在一段话前面加入 &gt; 符号,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; 话说PHP是最好的编程语言 ,你看呢？</div></pre></td></tr></table></figure>
<p>效果:</p>
<blockquote>
<p>话说PHP是最好的编程语言 ,你看呢？</p>
</blockquote>
<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这图片格式为  ![文字说明](图片url)</div></pre></td></tr></table></figure>
<p><img src="http://pic.qiantucdn.com/58pic/11/60/21/66Y58PICG2I.jpg" alt="图片"></p>
<h2 id="粗体-斜体"><a href="#粗体-斜体" class="headerlink" title="粗体,斜体"></a>粗体,斜体</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">前后对应   下划线(_):斜体   俩个星号(**):粗体    颜色(&lt;font color=#0099ff&gt;内容****内容&lt;/font&gt;):字体变色</div></pre></td></tr></table></figure>
<p>例如:</p>
<p>我们<strong>好像</strong>在哪见过，<em>你记得吗？</em> <font color="#0099ff">Hello world</font></p>
<h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><blockquote>
<p>前后各一个 ``</p>
</blockquote>
<p><code>Markdown.md</code></p>
<h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~~这个删除线~~</div></pre></td></tr></table></figure>
<p><del>这个删除线</del></p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">| Tables        | Are           | Cool  |</div><div class="line">| ------------- |:-------------:| -----:|</div><div class="line">| col 3 is      | right-aligned | $1600 |</div><div class="line">| col 2 is      | centered      |   $12 |</div><div class="line">| zebra stripes | are neat      |    $1 |</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Tables</th>
<th style="text-align:center">Are</th>
<th style="text-align:right">Cool</th>
</tr>
</thead>
<tbody>
<tr>
<td>col 3 is</td>
<td style="text-align:center">right-aligned</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td>zebra stripes</td>
<td style="text-align:center">are neat</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dog | bird | cat</div><div class="line">----|------|----</div><div class="line">foo | foo  | foo</div><div class="line">bar | bar  | bar</div><div class="line">baz | baz  | baz</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>dog</th>
<th>bird</th>
<th>cat</th>
</tr>
</thead>
<tbody>
<tr>
<td>foo</td>
<td>foo</td>
<td>foo</td>
</tr>
<tr>
<td>bar</td>
<td>bar</td>
<td>bar</td>
</tr>
<tr>
<td>baz</td>
<td>baz</td>
<td>baz</td>
</tr>
</tbody>
</table>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>最后附加一个<strong>MackDonw</strong>文档速查  </p>
<p><a href="http://wowubuntu.com/markdown/#p" target="_blank" rel="external"><strong>Markdown文档速查</strong></a></p>
<p><a href="http://www.williamlong.info/archives/4319.html" target="_blank" rel="external"><strong>关于Markdown工具</strong></a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://nenglee.com/2016/10/11/hello-world/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
</the></excerpt>]]></content>
    </entry>
    
  
  
</search>
